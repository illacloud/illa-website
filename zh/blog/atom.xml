<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://illacloud.github.io/illa-website/zh/blog</id>
    <title>ILLA Cloud Blog</title>
    <updated>2024-02-27T10:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://illacloud.github.io/illa-website/zh/blog"/>
    <subtitle>ILLA Cloud Blog</subtitle>
    <icon>https://illacloud.github.io/illa-website/zh/img/public/favicon.ico</icon>
    <rights>Copyright © 2024 ILLA.</rights>
    <entry>
        <title type="html"><![CDATA[React error boundary: 更强大的 React 错误处理方式]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/react-error-boundary</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary"/>
        <updated>2024-02-27T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[在 React 应用中使用 react-error-boundary 可以实现更健壮的错误处理、更容易的调试。通过使用这个库，可以花更少的时间管理错误，更多的时间专注于为构建出色的产品功能。]]></summary>
        <content type="html"><![CDATA[<p>在构建应用时，错误是不可避免的。即使采用最佳的代码实践，运行时也可能会出现意外错误，导致应用崩溃。因此，处理错误是非常重要的。本文就来看看如何在 React 中捕获和处理错误，以及更强大的 React 错误处理方式！</p>
<p>那为什么要在 React 中捕获错误呢？因为从 React 16 开始，React 生命周期中的错误如果未被停止，整个应用就会自行卸载，导致崩溃。在此之前，即使组件中存在一些小错误，它也会保留在屏幕上，但是现在，UI中某些无关紧要的部分，甚至是无法控制的某些第三方库中的未捕获错误，都可能导致页面崩溃，出现白屏的现象，影响用户体验。所以，捕获并处理 React 中的错误至关重要。</p>
<p>在JavaScript中，我们可以使用 <code>try...catch</code> 来捕获错误，例如：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">fetchData</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"https://some-url-that-might-fail.com"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>try...catch</code>仅适用于命令式代码，例如数据获取；而不是适用于声明式代码，例如在组件中编写的 JSX 就是声明式代码。那该如何在 React 中捕获错误呢？幸运的是，在 React 16 中，引入了一个新概念：React Error Boundary。下面来看一下它是什么，以及如何使用。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="什么是-react-error-boundary">什么是 React Error Boundary？<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E4%BB%80%E4%B9%88%E6%98%AF-react-error-boundary" class="hash-link" aria-label="Direct link to 什么是 React Error Boundary？" title="Direct link to 什么是 React Error Boundary？">​</a></h2>
<p>React Error Boundary （错误边界）是 React 应用中错误处理的一种方式。它是一个 React 组件，可以捕获子组件树中任何位置的 JavaScript 错误，并记录这些错误，显示一个备选 UI，而不是一个崩溃的组件树（白屏）。它们就像一个 JavaScript 的 <code>catch {}</code> 块，但是只针对组件。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="基本使用">基本使用<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8" class="hash-link" aria-label="Direct link to 基本使用" title="Direct link to 基本使用">​</a></h2>
<p>在错误边界引入之前，组件内部的错误会不断传播并最终导致白屏或错误的 UI，影响用户体验。但是，使用错误边界，这些未处理的错误可以被有效地包含和管理。</p>
<p>我们可以在整个应用范围内设置错误边界，也可以在各个组件上进行更细粒度的控制。需要注意的是，错误边界只会捕获渲染时、生命周期方法和构造函数中的错误，但不会捕获以下错误：</p>
<ul>
<li>事件处理（对于这种情况，需要使用常规的 <code>try/catch</code> 块）</li>
<li>异步代码（例如，<code>setTimeout</code> 或 <code>requestAnimationFrame</code> 回调函数）</li>
<li>服务端渲染</li>
<li>错误发生在错误边界本身而不是其子组件中时</li>
</ul>
<p>错误边界是在 React v16 中引入的，要使用错误边界，需要定义一个类组件，并添加以下生命周期方法之一或两个：</p>
<ul>
<li><code>getDerivedStateFromError()</code>: 这个生命周期方法在错误抛出后渲染备选 UI。它在渲染阶段被调用，所以不允许有副作用。</li>
<li><code>componentDidCatch()</code>: 这个方法用于记录错误信息。它在提交阶段被调用，所以可以执行副作用。</li>
</ul>
<p>下面来看一个 <code>ErrorBoundary</code> 类组件的例子，它实现了 <code>getDerivedStateFromError()</code> 和 <code>componentDidCatch()</code> 生命周期方法：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">ErrorBoundary</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name">React</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">super</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">state</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hasError</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">static</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getDerivedStateFromError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// 更新 state，下一次渲染将展示备选 UI。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hasError</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">componentDidCatch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> errorInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> errorInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">render</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">hasError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// 可以渲染任意自定义的备选 UI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain">h1</span><span class="token operator">&gt;</span><span class="token plain">出错啦！</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">h1</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 在组件中使用</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">App</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name">React</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">render</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这里定义了一个名为 <code>ErrorBoundary</code> 的错误边界组件。它的构造函数初始化了状态对象，并设置 <code>hasError</code> 属性为 <code>false</code>，表示当前没有发生错误。</p>
<ul>
<li><code>getDerivedStateFromError()</code> 方法在捕获到错误时会被调用。它接收一个 <code>error</code> 对象作为参数，并返回一个新的状态对象，将 <code>hasError</code> 属性设置为 <code>true</code>，以便在下一次渲染时展示备选的 UI。</li>
<li><code>componentDidCatch()</code> 方法在捕获到错误后会被调用。在这个例子中，将错误和错误信息输出到控制台。</li>
</ul>
<p>在 <code>render()</code> 方法中，根据 <code>hasError</code> 的值来决定渲染原始子组件还是备选的 UI。如果 <code>hasError</code> 为 true，则渲染 <code>&lt;h1&gt;出错啦！&lt;/h1&gt;</code>，否则渲染原始子组件。在组件中使用错误边界时，将需要进行错误边界保护的组件包裹在 <code>&lt;ErrorBoundary&gt;</code> 组件中即可。</p>
<p>在React组件中，我们可以使用 Error Boundary 来包裹任何组件，这样就不会因为一个小组件的崩溃，而导致整个组件崩溃，致使出现白屏。只有出现错误的组件处不能正常渲染，而是渲染备选 UI。也方便我们快速查找是哪个组件出了问题。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="实现错误边界的通用设计模式">实现错误边界的通用设计模式<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E5%AE%9E%E7%8E%B0%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C%E7%9A%84%E9%80%9A%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" class="hash-link" aria-label="Direct link to 实现错误边界的通用设计模式" title="Direct link to 实现错误边界的通用设计模式">​</a></h2>
<p>在实现 React 错误边界时，可以根据实际情况使用以下三种设计模式。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="组件级错误边界">组件级错误边界<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E7%BB%84%E4%BB%B6%E7%BA%A7%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C" class="hash-link" aria-label="Direct link to 组件级错误边界" title="Direct link to 组件级错误边界">​</a></h3>
<p>这种方法涉及将单个组件包装在错误边界中。这提供了高度的细粒度，允许单独处理每个组件中的错误。如果一个组件崩溃，错误边界可以捕获错误并阻止其向上传播到组件树。这意味着只有崩溃的组件受到影响，其余的应用可以继续正常运行。</p>
<p>组件级错误边界在有彼此隔离且不共享状态的组件时特别有用。如果其中一个组件渲染失败，它不会影响其他组件。然而，如果许多组件需要拥有自己的错误边界，这种方法可能导致很多重复代码。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="布局级错误边界">布局级错误边界<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E5%B8%83%E5%B1%80%E7%BA%A7%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C" class="hash-link" aria-label="Direct link to 布局级错误边界" title="Direct link to 布局级错误边界">​</a></h3>
<p>布局级错误边界位于组件树中更高的位置，通常包装相关组件组。当有密切相关的组件并共享一个公共状态时，这是一个不错的选择。</p>
<p>当一个组件发生错误时，布局级别的错误边界可以捕获它并为整个组件组显示一个错误消息或备用 UI。这可以成为处理影响应用整个部分的错误的一种好方法，例如侧边栏或仪表板等。</p>
<p>然而，布局级错误边界比组件级粒度更大。一个组件的错误可能会影响整个组件组，即使其他组件可以正常工作。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="顶层错误边界">顶层错误边界<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E9%A1%B6%E5%B1%82%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C" class="hash-link" aria-label="Direct link to 顶层错误边界" title="Direct link to 顶层错误边界">​</a></h3>
<p>顶层错误边界位于组件树的最顶部。它是一个通用的解决方案，可以处理应用中发生的任何错误。这种方法确保如果应用中的任何地方发生错误，都可以捕获并进行优雅处理。</p>
<p>这可以防止整个应用在发生错误时崩溃。然而，顶层错误边界是粒度最大的方法。一个错误可能会影响整个应用，而不仅仅是错误发生的组件或组件组。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="使用-react-error-boundary-库">使用 react-error-boundary 库<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E4%BD%BF%E7%94%A8-react-error-boundary-%E5%BA%93" class="hash-link" aria-label="Direct link to 使用 react-error-boundary 库" title="Direct link to 使用 react-error-boundary 库">​</a></h2>
<p>上面我们提到，React Error Boundary 有一些限制，无法处理某些特殊情况。下面就介绍一个更强大的 React 错误处理方式：<code>react-error-boundary</code>。它是一个小型的 React 错误处理库，它提供了增强的错误处理功能和更灵活的方法来处理 React 应用中的错误，使开发人员能够创建更强大且用户友好的错误处理机制。</p>
<p><code>react-error-boundary</code>使用了更现代化的方法，采用了 React Hooks 和函数组件，与当前 React 开发的趋势更加一致。它使用了一个简单的组件叫做 ErrorBoundary，可以用它来包裹潜在的容易出错的代码。</p>
<p>下面是 <code>react-error-boundary</code> 提供的 props：</p>
<ul>
<li><code>FallbackComponent</code>：用于指定一个自定义组件，在错误边界内发生错误时进行渲染。它提供了灵活性，可以创建一个视觉上吸引人且信息丰富的用户界面来显示错误，并提供任何必要的操作。</li>
<li><code>fallbackRender</code>：类似于 FallbackComponent，该属性用于定义一个自定义的渲染函数来渲染错误回退界面。它提供了对渲染过程的更多控制，并允许进行更高级的错误处理逻辑。</li>
<li><code>onError</code>：其接受一个回调函数，在错误边界捕获到错误时调用该函数，并传递错误对象和组件堆栈跟踪信息。它使我们能够执行额外的操作，例如记录错误或将错误报告发送到外部服务。</li>
<li><code>onReset</code>：其接受一个回调函数，在错误边界成功重置后触发。它可以用于执行清理操作或在错误恢复后更新组件的状态。</li>
<li><code>fallbackProps</code>：允许向 <code>FallbackComponent</code> 或 <code>fallbackRender</code> 函数传递额外的 <code>props</code>。它可以用于提供上下文或附加数据给错误回退界面。</li>
<li><code>retry</code>：布尔值，确定错误边界是否允许重试导致错误的操作。当设置为 true 时，<code>resetErrorBoundary</code> 函数可以从错误回退界面中调用以重试操作。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="errorboundary-组件">ErrorBoundary 组件<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#errorboundary-%E7%BB%84%E4%BB%B6" class="hash-link" aria-label="Direct link to ErrorBoundary 组件" title="Direct link to ErrorBoundary 组件">​</a></h2>
<p><code>react-error-boundary</code> 提供的 <code>ErrorBoundary</code> 组件有一个叫做 <code>fallbackRender</code> 的属性，它接受一个函数或一个 React 元素，在捕获到错误时显示。此外，它还提供了一个 <code>resetKeys</code> 属性，可以在特定 props 改变时重置组件的状态。</p>
<p><code>react-error-boundary</code> 的美妙之处在于避免了手动编写类组件和处理状态，在后台完成了所有工作，使开发人员能够专注于构建应用。下面来看一个在组件中使用 <code>react-error-boundary</code> 的例子：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ErrorBoundary</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyFallbackComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> resetErrorBoundary </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token plain">div role</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"alert"</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain">出错啦</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">resetErrorBoundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain">点击重试</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">div</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// 可能会抛出 JavaScript 错误的一些组件逻辑</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">MyFallbackComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      onReset</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 重置应用状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      resetKeys</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'someKey'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这个例子中，当 <code>ErrorBoundary</code> 捕获到错误时，会渲染 <code>MyFallbackComponent</code>。它显示错误消息并提供一个按钮来重置错误状态并尝试再次渲染该组件。<code>onReset</code> 属性用于清理在抛出错误之前发生的副作用，而 <code>resetKeys</code> 属性用于控制何时重置组件状态。</p>
<p><code>ErrorBoundary</code> 的 <code>onError</code> 属性是一个函数，每当捕获到错误时都会被调用。可以使用该属性将错误进行上报：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// 错误上报函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">logErrorToService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// 错误上报逻辑...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Caught an error:"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    	</span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      onError</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">logErrorToService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>react-error-boundary</code> 最强大的功能之一是就是能够重置错误边界状态，即清除错误并尝试重新渲染组件树。当错误可能是短暂的，例如由于临时断开连接而发生的网络错误时，这是非常有用的。</p>
<p>可以使用提供给回退组件的 <code>resetErrorBoundary</code> 函数来重置错误边界。例如，可以在按钮点击时调用此函数，允许用户手动重试失败的操作。</p>
<p><code>ErrorBoundary</code> 可以接受一个 <code>onReset</code> 属性，该属性是一个函数，在错误状态重置之前调用。此函数对于在错误后重新渲染之前执行任何清理或状态重置操作非常有用。</p>
<p><code>resetKeys</code> 属性是一个值数组，当更改时，会触发错误边界的重置。当知道更改某些 <code>props</code> 或状态值应该解决错误时，这非常有用。以下是如何使用这些属性的例子：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ErrorBoundary</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> resetErrorBoundary </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token plain">div role</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"alert"</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain">出错啦</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">resetErrorBoundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain">点击重试</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">div</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> someKey </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// 可能会抛出 JS 错误的一些组件逻辑</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setSomeKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      onReset</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setSomeKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 在这里重置应用状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      resetKeys</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 当 someKey 更改时重置错误边界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> someKey</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这个例子中，如果 <code>MyComponent</code> 中捕获到错误，则渲染 <code>ErrorFallback</code> 组件，显示错误消息和一个“点击重试”按钮。当点击此按钮时，它调用 <code>resetErrorBoundary</code>，触发 <code>onReset</code> 函数并清除错误状态，从而再次渲染 <code>MyComponent</code>。如果 s<code>omeKey prop</code> 更改，则错误边界也会重置，提供了一种灵活的方式，根据应用程状态的更改恢复错误。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="useerrorhandler-hook">useErrorHandler Hook<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#useerrorhandler-hook" class="hash-link" aria-label="Direct link to useErrorHandler Hook" title="Direct link to useErrorHandler Hook">​</a></h2>
<p><code>react-error-boundary</code> 还提供了一个 <code>useErrorBoundary</code> Hook，它是一个自定义的 React Hook，允许在函数组件的任何地方抛出错误。被抛出的错误将被最近的错误边界捕获，就像从类组件的生命周期方法或渲染函数中抛出错误时会被错误边界捕获一样。</p>
<p>当处理异步代码时，<code>useErrorHandler</code> Hook 特别有用，因为抛出的错误不会被组件的错误边界捕获。以下是使用 <code>useErrorHandler</code> 的例子：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> useErrorHandler </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> handleError </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useErrorHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetchData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// 获取数据</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token function" style="color:rgb(80, 250, 123)">handleError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token spread operator">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"> </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这个例子中，<code>MyComponent</code> 使用 <code>useErrorHandler</code> 获取一个可以用来处理错误的函数。<code>∑</code> 函数是一个异步函数，用于获取数据并捕获错误。如果发生错误，它会传递给 <code>handleError</code> 函数，该函数会抛出错误，以便可以被 <code>ErrorBoundary</code> 捕获。</p>
<p><code>useErrorHandler</code> 提供了一种强大的方式来处理函数组件中的错误。它与 <code>react-error-boundary</code> 的 <code>ErrorBoundary</code> 组件无缝配合，使得在 React 中进行错误处理变得更加简单明了。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="witherrorboundary-hoc">withErrorBoundary HOC<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#witherrorboundary-hoc" class="hash-link" aria-label="Direct link to withErrorBoundary HOC" title="Direct link to withErrorBoundary HOC">​</a></h2>
<p><code>react-error-boundary</code> 包还提供了一个 <code>withErrorBoundary HOC</code> 的解决方案。它是一个高阶组件，用于包装将给定的组件，以捕获该组件中的错误。这样做的好处是，在不改变组件原始实现或向组件树中添加额外 JSX 的情况下，为组件添加错误边界。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> withErrorBoundary </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// 组件逻辑</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token maybe-class-name">MyComponentWithErrorBoundary</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">withErrorBoundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token maybe-class-name">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">FallbackComponent</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">onError</span><span class="token operator">:</span><span class="token plain"> logErrorToService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">onReset</span><span class="token operator">:</span><span class="token plain"> handleReset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">resetKeys</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'someKey'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponentWithErrorBoundary</span><span class="token plain"> someKey</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这个例子中，使用 <code>withErrorBoundary</code> 将 <code>MyComponent</code> 包装在一个错误边界内。<code>withErrorBoundary</code> 的第二个参数是一个可选对象，可以在其中提供与 <code>ErrorBoundary</code> 组件相同的 <code>props：FallbackComponent</code>、<code>onError</code>、<code>onReset</code> 和 <code>resetKeys</code>。</p>
<p>这种高阶组件（HOC）的方法是在不修改组件实现的情况下为组件添加错误边界的一种优雅的解决方案，特别适用于无法使用 <code>Hooks</code> 的类组件。它展示了 <code>react-error-boundary</code> 在适应不同的编码风格和 React 开发范式方面的灵活性。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="优势">优势<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h2>
<p>看完了 <code>react-error-boundary</code> 的基本使用方式，我们来总结一下使用 <code>react-error-boundary</code> 的好处：</p>
<ul>
<li>简单易用：该库提供了简单直观的 API，易于理解和使用。它抽象了错误处理的复杂性，并向开发人员呈现了一种简单明了的方式来管理错误。</li>
<li>适用于函数组件 ：与传统的 React 错误边界需要使用类组件不同，react-error-boundary 是专为函数组件而设计的。它使用了 Hooks，更符合当前 React 开发的趋势。</li>
<li>灵活多样：该库提供了多种使用错误边界的方式，包括作为组件、高阶组件 (HOC) 和自定义 Hook。这种灵活性使开发人员能够根据自己的需求和编码风格选择最佳的方法。</li>
<li>可自定义的回退界面：该库允许在捕获到错误时显示可自定义的回退界面。这比应用崩溃或显示空白屏幕要提供更好的用户体验。</li>
<li>重置功能：该库可以重置错误状态，使应用能够从错误中恢复。这个功能对于可以在不需要完全重新加载页面的情况下解决的临时性错误特别有用。</li>
<li>错误报告：通过 onError 属性，错误可以被记录到错误报告服务中，提供了有价值的信息用于调试和解决问题。</li>
<li>社区和维护：该库在 React 社区中得到广泛使用，并且积极维护，因此可以期待定期的更新和改进。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="总结">总结<a href="https://illacloud.github.io/illa-website/zh/blog/react-error-boundary#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 总结" title="Direct link to 总结">​</a></h2>
<p>无论是使用类组件还是函数组件，<code>react-error-boundary</code> 都能满足需求。它灵活的API包括组件、高阶组件和自定义Hooks，提供了多种将错误处理集成到组件中的方式。此外，它支持自定义备用 UI、错误重置功能和错误报告，即使出现问题，也能确保顺畅的用户体验。</p>
<p>在 React 应用中使用 <code>react-error-boundary</code> 可以实现更健壮的错误处理、更容易的调试。通过使用这个库，可以花更少的时间管理错误，更多的时间专注于为构建出色的产品功能。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="react" term="react"/>
        <category label="component" term="component"/>
        <category label="library" term="library"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 Next.js 博客中使用 Remark 创建交互式目录]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/react-markdown</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/react-markdown"/>
        <updated>2024-02-26T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[目录具有许多好处，对于网站，特别是博客，是一项有价值的增加。一个组织良好且易于导航的目录显著提升用户体验，为读者简化查找所需信息的过程。通过添加目录，您不仅可以为读者提供简化的导航，还可以提高内容的整体可访问性和可用性。]]></summary>
        <content type="html"><![CDATA[<p>目录具有许多好处，对于网站，特别是博客，是一项有价值的增加。一个组织良好且易于导航的目录显著提升用户体验，为读者简化查找所需信息的过程。通过添加目录，您不仅可以为读者提供简化的导航，还可以提高内容的整体可访问性和可用性。</p>
<p>在这篇文章中，我们将介绍使用Remark（一种强大的Markdown处理器）为<code>Next.js</code>博客创建交互式目录的必要步骤。虽然一些Remark插件（如<code>Remark-toc</code>）提供了这种功能，但生成的目录位于内容本身内部，限制了其潜在用途。例如，在此博客上，目录被呈现在博客内容之外，使其在导航时可见。这是我们将在本教程中构建的目录类型。我们将从简要讨论Remark的基本知识、其插件以及与Next.js的集成开始。然后，我们将深入研究实现自定义目录的实际步骤，最后，我们将使其具有交互性，以便单击目录项将页面滚动到相应的部分。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="remark及其插件">Remark及其插件<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#remark%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6" class="hash-link" aria-label="Direct link to Remark及其插件" title="Direct link to Remark及其插件">​</a></h2>
<p>Remark是一款可扩展的Markdown处理器，简化了将Markdown文件转换为HTML或其他格式的过程。Remark的关键方面是其基于插件的架构，使开发人员能够扩展和定制其功能。这些插件可以处理诸如语法高亮显示、添加目录或解析自定义Markdown语法等任务。将Remark与Next.js集成非常简单——通常与<code>getStaticProps</code>函数一起使用，以在构建过程中处理Markdown文件。它还可以处理MDX文件，使其成为使用新的“app”目录的Next.js网站的可行选择。Remark强大的处理能力和与Next.js的无缝集成使其成为增强Next.js博客和网站内容以及用户体验的理想选择。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="入门">入门<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#%E5%85%A5%E9%97%A8" class="hash-link" aria-label="Direct link to 入门" title="Direct link to 入门">​</a></h2>
<p>尽管我们正在构建一个自定义目录，但我们不必从头开始编写所有内容。为了将Markdown/MDX内容与前置内容分离，我们将使用<code>Gray-matter</code>包。如果Markdown文件中没有前置内容，这是可选的。为了处理Markdown本身，我们将使用Remark包。我们还需要<code>unist-util-visit</code>包来遍历节点树，以及<code>mdast-util-to-string</code>包来获取节点的文本内容。</p>
<p>让我们安装所有这些包。</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm i remark mdast-util-to-string gray-matter unist-util-visit</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="用于从内容中提取标题的自定义remark插件">用于从内容中提取标题的自定义Remark插件<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#%E7%94%A8%E4%BA%8E%E4%BB%8E%E5%86%85%E5%AE%B9%E4%B8%AD%E6%8F%90%E5%8F%96%E6%A0%87%E9%A2%98%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89remark%E6%8F%92%E4%BB%B6" class="hash-link" aria-label="Direct link to 用于从内容中提取标题的自定义Remark插件" title="Direct link to 用于从内容中提取标题的自定义Remark插件">​</a></h2>
<p>在呈现目录之前，我们必须从Markdown文件中提取所有标题，并将它们组织成一个节点数组。这个过程可以分为几个步骤：</p>
<ol>
<li>解析文件内容以将前置内容与内容分离。</li>
<li>为每个标题元素生成ID。这对于后面实现滚动到部分功能是必要的。</li>
<li>解析内容，提取标题及其属性。</li>
</ol>
<p>对于第2步，我们可以手动添加IDs作为自定义Markdown属性，例如<code>## Heading 1 {#heading-id}</code>，然后使用类似<code>Remark-heading-id</code>的库将它们渲染为HTML。然而，这种方法需要手动添加和维护这些标题，效率较低。更高效的方法是根据标题文本自动生成IDs，例如，当转换为HTML时，标题<code>Heading 1</code>将自动获得ID <code>heading-1</code>。
此外，我们可以通过创建自定义Remark插件将步骤2和3结合起来。
js复制代码</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">headingTree</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> file</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    file</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">headings</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getHeadings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getHeadings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">root</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> nodes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> output </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> indexMap </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">visit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">root</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">addID</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">transformNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这里，我们有我们的自定义Remark插件<code>headingTree</code>，它从文档中提取标题并将它们作为<code>headings</code>属性添加到处理后的内容中。</p>
<p>插件的主要组件是<code>getHeadings</code>函数，这是一个访问器函数，遍历节点树并操纵它们。为了提高可读性，该函数分为两个部分。</p>
<p><code>addID</code>函数遍历文档中的标题节点，替换它们所有的特殊字符，并将它们作为小写字符串输出，其中空格由破折号替换。这些ID将存储在标题的<code>hProperties</code>属性中。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">addID</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">id</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">nodes</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string interpolation">id</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation operator">&gt;</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation number">1</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation operator">?</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation template-string string" style="color:rgb(255, 121, 198)"> </span><span class="token template-string interpolation template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation template-string interpolation">nodes</span><span class="token template-string interpolation template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string interpolation template-string interpolation">id</span><span class="token template-string interpolation template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string interpolation template-string interpolation"> </span><span class="token template-string interpolation template-string interpolation operator">-</span><span class="token template-string interpolation template-string interpolation"> </span><span class="token template-string interpolation template-string interpolation number">1</span><span class="token template-string interpolation template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string interpolation template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation operator">:</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">replace</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token regex regex-source language-regex char-class char-class-negation operator">^</span><span class="token regex regex-source language-regex char-class range">a</span><span class="token regex regex-source language-regex char-class range range-punctuation operator">-</span><span class="token regex regex-source language-regex char-class range">z</span><span class="token regex regex-source language-regex char-class range">A</span><span class="token regex regex-source language-regex char-class range range-punctuation operator">-</span><span class="token regex regex-source language-regex char-class range">Z</span><span class="token regex regex-source language-regex char-class char-set class-name">\d</span><span class="token regex regex-source language-regex char-class char-set class-name">\s</span><span class="token regex regex-source language-regex char-class">-</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token regex regex-delimiter">/</span><span class="token regex regex-flags">g</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">split</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">" "</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"-"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">toLowerCase</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意，我们使用<code>nodes</code>变量来跟踪每个标题出现的次数。这样做是为了在文档中出现多次的标题（例如，某些部分可能具有相同文本的子标题）前缀带有数字。<code>transformNode</code>函数接受从解析后的Markdown抽象语法树（AST）中得到的节点，并将其转换为一个更适用于构建目录的格式。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> toString </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"mdast-util-to-string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">transformNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> output</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> transformedNode </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">toString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token plain"> </span><span class="token operator">===</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> parent </span><span class="token operator">=</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">parent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      parent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>该函数检查节点是否具有深度为2（Markdown中的##元素）。如果是，转换后的节点将添加到输出数组中，并保存在<code>indexMap</code>中相应深度的位置。这表示转换后的节点位于目录的顶级。在此处，我们将深度2指定为顶级深度，因为这将在HTML输出中产生<code>&lt;h2&gt;</code>标签。我们不使用深度1，因为在页面上有多个<code>&lt;h1&gt;</code>元素对于页面的可访问性和SEO来说并不好。</p>
<p>如果节点的深度大于2（例如，###或####元素），该函数通过查找<code>indexMap</code>中当前节点上一级深度的位置（即<code>node.depth - 1</code>）来识别父节点。如果找到父节点，则将转换后的节点添加到父节点的<code>children</code>数组中，并相应地更新<code>indexMap</code>。这有助于构建目录的嵌套结构，其中深层次的节点成为较高层次节点的子节点。</p>
<p>值得注意的是，为了使该函数正常工作，目录应具有有效的结构，例如，不应该在节点深度2直接跳转到深度4。</p>
<p>现在我们有了实现<code>getHeadings</code>函数所需的一切。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">matter</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"gray-matter"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> remark </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"remark"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> headingTree </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"./headings"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> postsDirectory </span><span class="token operator">=</span><span class="token plain"> path</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">process</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">cwd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"posts"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getHeadings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fullPath </span><span class="token operator">=</span><span class="token plain"> path</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">postsDirectory</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">id</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">.mdx</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fileContents </span><span class="token operator">=</span><span class="token plain"> fs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">readFileSync</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">fullPath</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"utf8"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Use gray-matter to parse the post metadata section</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> matterResult </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">matter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">fileContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Use remark to convert Markdown into HTML string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> processedContent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">remark</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">use</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">headingTree</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">process</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">matterResult</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> processedContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">headings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>有了这个，我们就有了来自文档的标题数组，以及它们的数据属性。数组的结构如下。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-1"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-2"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 3"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-3"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-4"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="渲染目录">渲染目录<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#%E6%B8%B2%E6%9F%93%E7%9B%AE%E5%BD%95" class="hash-link" aria-label="Direct link to 渲染目录" title="Direct link to 渲染目录">​</a></h2>
<p>现在我们有了标题数据，可以使用它来渲染目录。首先，我们将创建一个<code>TableOfContents</code>组件，它将是目录渲染逻辑的包装器。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token string" style="color:rgb(255, 121, 198)">"use client"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">TableOfContents</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> nodes </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token plain">nodes</span><span class="token operator">?.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"toc"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">h3</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"secondary-text"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">Table of contents</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">h3</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>请注意，如果您使用的是Next.js的“app”目录，您需要使用<code>"use client"</code>指令将此组件标记为客户端组件。</p>
<p>目录的实际渲染将由<code>renderNodes</code>函数管理。由于渲染逻辑是递归的，我们使用单独的函数而不是在组件内部定义它。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">data</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">hProperties</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">#</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">data</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">hProperties</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token operator">?.</span><span class="token plain">length </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>目录中的每个元素都是一个链接，通过其<code>href</code>属性指向相应标题的ID。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="单击目录链接时添加平滑滚动效果">单击目录链接时添加平滑滚动效果<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#%E5%8D%95%E5%87%BB%E7%9B%AE%E5%BD%95%E9%93%BE%E6%8E%A5%E6%97%B6%E6%B7%BB%E5%8A%A0%E5%B9%B3%E6%BB%91%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C" class="hash-link" aria-label="Direct link to 单击目录链接时添加平滑滚动效果" title="Direct link to 单击目录链接时添加平滑滚动效果">​</a></h2>
<p>基本的目录已经完成。在我们渲染文章的页面上，我们可以通过调用<code>await getHeadings(postId)</code>或者在使用 "pages" 目录时在<code>getStaticProps</code>中执行此操作）获取标题，并将数据传递给 TableOfContents 组件。在文章页面上，当我们点击目录链接时，应该导航到页面的相应部分。然而，与其突然跳转到标题，我们可以启用平滑滚动。作为附加的增强，我们可以根据其深度逐渐减小子链接的字体大小。</p>
<p>为了实现这一点，我们将引入一个<code>TOCLink</code>组件，负责平滑滚动和个别链接样式，然后我们将在<code>renderNodes</code>中使用它。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">data</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">hProperties</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">TOCLink</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">node</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token operator">?.</span><span class="token plain">length </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">TOCLink</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> node </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fontSizes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token number">2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"base"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"sm"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xs"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">hProperties</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">#</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">block text-</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">fontSizes</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">depth</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)"> hover:accent-color py-1</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 121, 198)">e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(255, 121, 198)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">preventDefault</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        </span><span class="token tag script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">getElementById</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">scrollIntoView</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">behavior</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"smooth"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">block</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"start"</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">      </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>为了平滑滚动到网页上的特定元素，我们首先使用其 ID 定位元素，然后使用带有<code>behavior: "smooth"</code>选项的<code>scrollIntoView</code>方法。有关此方法的更多信息，请参阅<code>MDN</code>网站。该方法在<code>浏览器支持</code>方面具有广泛的支持，但<code>smooth</code>选项可能与一些较旧的浏览器不兼容。通过采用这种方法，现在点击目录链接会产生一个漂亮的滚动动画，而不是之前的突然过渡。</p>
<p>如果您需要在滚动到标题元素时添加偏移量（例如，当页面有一个固定的导航栏时），您可以将<code>scroll-margin-top</code> CSS 属性应用于标题元素。</p>
<p>此外，我们可以使用<code>TailwindCSS</code>和其<code>text</code>实用程序类，根据深度逐渐减小目录链接的字体大小。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="强调活动链接">强调活动链接<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#%E5%BC%BA%E8%B0%83%E6%B4%BB%E5%8A%A8%E9%93%BE%E6%8E%A5" class="hash-link" aria-label="Direct link to 强调活动链接" title="Direct link to 强调活动链接">​</a></h2>
<p>为了增强目录导航，最后的一点是在页面上查看其相应标题时突出显示目录链接。</p>
<p>为了检测页面上元素的可见性，我们将使用<code>Intersection Observer API</code>，该API具有良好的浏览器支持，但有一些小问题。此外，我们将此功能转移到一个自定义的钩子中，该钩子返回一个布尔值，指示链接是否突出显示，并提供手动设置高亮状态的回调。这个钩子将在<code>TOCLink</code>组件中使用。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> useEffect</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> useRef</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> useState </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"react"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useHighlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> observer </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">activeId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setActiveId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">useEffect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">handleObserver</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">entries</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      entries</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">forEach</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">entry</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">entry</span><span class="token operator">?.</span><span class="token plain">isIntersecting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token function" style="color:rgb(80, 250, 123)">setActiveId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    observer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">IntersectionObserver</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">handleObserver</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token literal-property property">rootMargin</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"0% 0% -35% 0px"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> elements </span><span class="token operator">=</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">querySelectorAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"h2, h3, h4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    elements</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">forEach</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">elem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> observer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">observe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">elem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> observer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token operator">?.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">disconnect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">activeId </span><span class="token operator">===</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setActiveId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">TOCLink</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> node </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fontSizes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token number">2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"base"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"sm"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xs"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">hProperties</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">highlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setHighlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useHighlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">#</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">block text-</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">fontSizes</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">depth</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)"> hover:accent-color py-1 </span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">        highlighted </span><span class="token tag script language-javascript template-string interpolation operator" style="color:rgb(255, 121, 198)">&amp;&amp;</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript template-string interpolation string" style="color:rgb(255, 121, 198)">"accent-color"</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">      </span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 121, 198)">e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(255, 121, 198)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">preventDefault</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        </span><span class="token tag script language-javascript function" style="color:rgb(80, 250, 123)">setHighlighted</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        </span><span class="token tag script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">getElementById</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">scrollIntoView</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">behavior</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"smooth"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">block</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"start"</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">      </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这个钩子中<code>handleObserver</code>函数作为<code>Intersection Observer</code>的回调函数，处理被观察元素的可见性变化，接受一个条目数组作为其参数。
<code>handleObserver</code>函数遍历条目，其中包括 h2、h3 和 h4 元素，检查<code>isIntersecting</code>属性是否为<code>true</code> — 表示元素在视口中可见 — 如果是，使用<code>setActiveId</code>更新目录中的活动部分。当链接被点击时，我们通过<code>setHighlighted</code>回调将其设置为突出显示。</p>
<p>此外，我们将一个新的<code>Intersection Observer</code>实例存储在一个<code>ref</code>中，以在组件渲染期间保持其身份不变。</p>
<p>通过滚动页面，您可以在此页面上看到这个目录的实际效果，观察随着页面到达相应部分，目录中的活动部分如何更新。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/react-markdown#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>总的来说，使用Remark和自定义插件为 Next.js 博客创建目录可以为您的网站的用户体验和可访问性带来许多好处。通过 Remark，这个强大的 Markdown 处理器，以及它丰富的插件范围，可以轻松从 Markdown 文件中提取标题，并将它们转换为交互式和易于导航的目录。</p>
<p>通过引入目录，您可以增强 Next.js 博客上的用户体验，使读者更容易找到他们需要的信息。此外，使用 Remark 创建自定义目录插件使您能够将目录集成到内容之外，从而提高内容的可用性和可访问性。通过使用诸如<code>mdast-util-to-string</code>和<code>unist-util-visit</code>等插件，可以从内容中提取标题，生成唯一的 ID，并将它们解析为适用于构建目录的格式。</p>
<p>本教程通过创建具有嵌套结构、平滑滚动和活动链接突出显示的自定义目录，引导您完成了这个过程。因此，读者现在可以快速找到并导航到他们感兴趣的内容，增强了博客的整体可用性和价值。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="postgresql" term="postgresql"/>
        <category label="select" term="select"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PostgreSQL SELECT 语句]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/postgresql-select</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select"/>
        <updated>2024-02-21T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文介绍了 `PostgreSQL` 中的 `SELECT` 语句的基本形式，以及如何使用 `SELECT` 语句从数据表中查询数据。在 `PostgreSQL` 中，`SELECT` 语句用于从一个或多个表中检索数据，它可能是使用最多的语句。]]></summary>
        <content type="html"><![CDATA[<p>本文介绍了 <code>PostgreSQL</code> 中的 <code>SELECT</code> 语句的基本形式，以及如何使用 <code>SELECT</code> 语句从数据表中查询数据。</p>
<p>在 <code>PostgreSQL</code> 中，<code>SELECT</code> 语句用于从一个或多个表中检索数据，它可能是使用最多的语句。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-语法">PostgreSQL SELECT 语法<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#postgresql-select-%E8%AF%AD%E6%B3%95" class="hash-link" aria-label="Direct link to PostgreSQL SELECT 语法" title="Direct link to PostgreSQL SELECT 语法">​</a></h2>
<p>让我们 <code>SELECT</code> 从从单个表中检索数据的语句的基本形式开始。</p>
<p>下面说明了 <code>SELECT</code> 语句的语法：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    expr_list</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    table_name</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">other_clauses</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这个语法中：</p>
<ul>
<li><code>SELECT</code> 和 <code>FROM</code> 是关键字。</li>
<li><code>expr_list</code> 是要选择的列或者表达式的列表。多个列或表达式需要使用逗号分隔。</li>
<li><code>table_name</code> 是要查询的数据表。</li>
<li><code>FROM table_name</code> 是可选的。如果你不查询任何表中的行，则可以省略 <code>FROM</code> 子句。</li>
<li><code>other_clauses</code> 是 <code>SELECT</code> 语句支持的子句。 <code>SELECT</code> 语句支持很多子句，包括：<!-- -->
<ul>
<li>使用 <code>DISTINCT</code> 运算符选择不同的行。</li>
<li>使用 <code>ORDER BY</code> 子句对行进行排序。</li>
<li>使用 <code>WHERE</code> 子句过滤行。</li>
<li>使用 <code>LIMIT</code> 或者 <code>FETCH</code> 子句从表中选择行的子集。</li>
<li>使用 <code>GROUP BY</code> 子句将行分组。</li>
<li>使用 <code>HAVING</code> 子句过滤组。</li>
<li>使用诸如 <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>FULL OUTER JOIN</code>, <code>CROSS JOIN</code> 之类的与其他表连接。</li>
<li>使用 <code>UNION</code> ， <code>INTERSECT</code> 和 <code>EXCEPT</code> 执行集合运算。</li>
</ul>
</li>
</ul>
<p>请注意，<code>SQL</code> 关键字不区分大小写。但是为了让 <code>SQL</code> 代码更易于阅读，将 <code>SQL</code> 关键字书写为大写形式是一个好的编码习惯。</p>
<p>在本教程中，我们将聚焦于 <code>SELECT</code> 语句的基本用法，其他相关的子句的用法将在后续的教程中学习。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-示例">PostgreSQL SELECT 示例<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#postgresql-select-%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to PostgreSQL SELECT 示例" title="Direct link to PostgreSQL SELECT 示例">​</a></h2>
<p>我们来看一些使用 PostgreSQL <code>SELECT</code> 语句的例子。</p>
<p>我们将使用 <code>PostgreSQL Sakila</code> 示例数据库中 <code>customer</code> 表进行演示。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="使用-postgresql-select-语句查询一列数据">使用 PostgreSQL SELECT 语句查询一列数据<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#%E4%BD%BF%E7%94%A8-postgresql-select-%E8%AF%AD%E5%8F%A5%E6%9F%A5%E8%AF%A2%E4%B8%80%E5%88%97%E6%95%B0%E6%8D%AE" class="hash-link" aria-label="Direct link to 使用 PostgreSQL SELECT 语句查询一列数据" title="Direct link to 使用 PostgreSQL SELECT 语句查询一列数据">​</a></h3>
<p>下面的 <code>SELECT</code> 语句从 <code>customer</code> 表中查找所有客户的名字：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> first_name </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这是部分输出：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">first_name</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">------------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARY</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PATRICIA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LINDA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BARBARA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ELIZABETH</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">JENNIFER</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARIA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">SUSAN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARGARET</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">DOROTHY</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>请注意，我们在 <code>SELECT</code> 语句末尾添加了一个分号 (;) 。分号不是 SQL 语句的一部分。它用于向 PostgreSQL 发出 SQL 语句结束的信号。分号也用于分隔两条 SQL 语句。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="使用-postgresql-select-语句查询多列数据示例">使用 PostgreSQL SELECT 语句查询多列数据示例<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#%E4%BD%BF%E7%94%A8-postgresql-select-%E8%AF%AD%E5%8F%A5%E6%9F%A5%E8%AF%A2%E5%A4%9A%E5%88%97%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 使用 PostgreSQL SELECT 语句查询多列数据示例" title="Direct link to 使用 PostgreSQL SELECT 语句查询多列数据示例">​</a></h3>
<p>如果您想知道客户的名字、姓氏和电子邮件，您可以在 <code>SELECT</code> 子句中指定这些列名，如以下查询所示：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    first_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    last_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    email</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>以下是部分输出：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">first_name </span><span class="token operator">|</span><span class="token plain"> last_name </span><span class="token operator">|</span><span class="token plain">                email</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">------------+-----------+-------------------------------------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARY       </span><span class="token operator">|</span><span class="token plain"> SMITH     </span><span class="token operator">|</span><span class="token plain"> MARY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">SMITH</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PATRICIA   </span><span class="token operator">|</span><span class="token plain"> JOHNSON   </span><span class="token operator">|</span><span class="token plain"> PATRICIA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">JOHNSON</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LINDA      </span><span class="token operator">|</span><span class="token plain"> WILLIAMS  </span><span class="token operator">|</span><span class="token plain"> LINDA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">WILLIAMS</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BARBARA    </span><span class="token operator">|</span><span class="token plain"> JONES     </span><span class="token operator">|</span><span class="token plain"> BARBARA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">JONES</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ELIZABETH  </span><span class="token operator">|</span><span class="token plain"> BROWN     </span><span class="token operator">|</span><span class="token plain"> ELIZABETH</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">BROWN</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">JENNIFER   </span><span class="token operator">|</span><span class="token plain"> DAVIS     </span><span class="token operator">|</span><span class="token plain"> JENNIFER</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DAVIS</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARIA      </span><span class="token operator">|</span><span class="token plain"> MILLER    </span><span class="token operator">|</span><span class="token plain"> MARIA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MILLER</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">SUSAN      </span><span class="token operator">|</span><span class="token plain"> WILSON    </span><span class="token operator">|</span><span class="token plain"> SUSAN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">WILSON</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARGARET   </span><span class="token operator">|</span><span class="token plain"> MOORE     </span><span class="token operator">|</span><span class="token plain"> MARGARET</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MOORE</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">DOROTHY    </span><span class="token operator">|</span><span class="token plain"> TAYLOR    </span><span class="token operator">|</span><span class="token plain"> DOROTHY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">TAYLOR</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="使用-postgresql-select-语句查询一个表的所有列的数据示例">使用 PostgreSQL SELECT 语句查询一个表的所有列的数据示例<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#%E4%BD%BF%E7%94%A8-postgresql-select-%E8%AF%AD%E5%8F%A5%E6%9F%A5%E8%AF%A2%E4%B8%80%E4%B8%AA%E8%A1%A8%E7%9A%84%E6%89%80%E6%9C%89%E5%88%97%E7%9A%84%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 使用 PostgreSQL SELECT 语句查询一个表的所有列的数据示例" title="Direct link to 使用 PostgreSQL SELECT 语句查询一个表的所有列的数据示例">​</a></h3>
<p>如果您想使用 <code>SELECT</code> 语句从 <code>customer</code> 表中查找所有的列，请使用以下语句：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>以下是部分输出：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> customer_id </span><span class="token operator">|</span><span class="token plain"> store_id </span><span class="token operator">|</span><span class="token plain"> first_name </span><span class="token operator">|</span><span class="token plain"> last_name </span><span class="token operator">|</span><span class="token plain">                email                </span><span class="token operator">|</span><span class="token plain"> address_id </span><span class="token operator">|</span><span class="token plain"> activebool </span><span class="token operator">|</span><span class="token plain"> create_date </span><span class="token operator">|</span><span class="token plain">     last_update     </span><span class="token operator">|</span><span class="token plain"> active</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">-------------+----------+------------+-----------+-------------------------------------+------------+------------+-------------+---------------------+--------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> MARY       </span><span class="token operator">|</span><span class="token plain"> SMITH     </span><span class="token operator">|</span><span class="token plain"> MARY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">SMITH</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">       </span><span class="token operator">|</span><span class="token plain">          </span><span class="token number">5</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> PATRICIA   </span><span class="token operator">|</span><span class="token plain"> JOHNSON   </span><span class="token operator">|</span><span class="token plain"> PATRICIA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">JOHNSON</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">          </span><span class="token number">6</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">3</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> LINDA      </span><span class="token operator">|</span><span class="token plain"> WILLIAMS  </span><span class="token operator">|</span><span class="token plain"> LINDA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">WILLIAMS</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">   </span><span class="token operator">|</span><span class="token plain">          </span><span class="token number">7</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">4</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> BARBARA    </span><span class="token operator">|</span><span class="token plain"> JONES     </span><span class="token operator">|</span><span class="token plain"> BARBARA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">JONES</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">    </span><span class="token operator">|</span><span class="token plain">          </span><span class="token number">8</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">5</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> ELIZABETH  </span><span class="token operator">|</span><span class="token plain"> BROWN     </span><span class="token operator">|</span><span class="token plain"> ELIZABETH</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">BROWN</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain">          </span><span class="token number">9</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">6</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> JENNIFER   </span><span class="token operator">|</span><span class="token plain"> DAVIS     </span><span class="token operator">|</span><span class="token plain"> JENNIFER</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DAVIS</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">   </span><span class="token operator">|</span><span class="token plain">         </span><span class="token number">10</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">7</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> MARIA      </span><span class="token operator">|</span><span class="token plain"> MILLER    </span><span class="token operator">|</span><span class="token plain"> MARIA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MILLER</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">     </span><span class="token operator">|</span><span class="token plain">         </span><span class="token number">11</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">8</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> SUSAN      </span><span class="token operator">|</span><span class="token plain"> WILSON    </span><span class="token operator">|</span><span class="token plain"> SUSAN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">WILSON</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">     </span><span class="token operator">|</span><span class="token plain">         </span><span class="token number">12</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           </span><span class="token number">9</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> MARGARET   </span><span class="token operator">|</span><span class="token plain"> MOORE     </span><span class="token operator">|</span><span class="token plain"> MARGARET</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MOORE</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">   </span><span class="token operator">|</span><span class="token plain">         </span><span class="token number">13</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token number">10</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">        </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> DOROTHY    </span><span class="token operator">|</span><span class="token plain"> TAYLOR    </span><span class="token operator">|</span><span class="token plain"> DOROTHY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">TAYLOR</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain">   </span><span class="token operator">|</span><span class="token plain">         </span><span class="token number">14</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> t          </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">14</span><span class="token plain">  </span><span class="token operator">|</span><span class="token plain"> </span><span class="token number">2006</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">15</span><span class="token plain"> </span><span class="token number">04</span><span class="token plain">:</span><span class="token number">57</span><span class="token plain">:</span><span class="token number">20</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain">      </span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在此示例中，我们在 <code>SELECT</code> 子句中使用了星号 (<code>*</code>)，它是所有列的简写。星号 (<code>*</code>) 可以让我们输入更少，而不用列出 <code>customer</code> 表中的所有的列名。</p>
<p>但是，在 <code>SELECT</code> 语句中使用星号 (<code>*</code>) 并不是一个好习惯，原因如下：</p>
<ol>
<li>数据库性能。假设您有一个包含许多列和大量数据的表，带有星号 (*) 速记的 <code>SELECT</code> 语句将从表的所有列中选择数据，这对于应用程序来说可能不是必需的。</li>
<li>应用性能。从数据库中检索不必要的数据会增加数据库服务器和应用程序服务器之间的流量。因此，您的应用程序的响应速度可能较慢且可扩展性较差。</li>
</ol>
<p>由于这些原因，最好在 <code>SELECT</code> 子句中明确指定列名，以便仅从数据库中获取必要的数据。</p>
<p>对于检查数据库数据的即时查询，您应只使用星号 (<code>*</code>) 简写。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="使用带有表达式的-postgresql-select-语句示例">使用带有表达式的 PostgreSQL SELECT 语句示例<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#%E4%BD%BF%E7%94%A8%E5%B8%A6%E6%9C%89%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84-postgresql-select-%E8%AF%AD%E5%8F%A5%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 使用带有表达式的 PostgreSQL SELECT 语句示例" title="Direct link to 使用带有表达式的 PostgreSQL SELECT 语句示例">​</a></h3>
<p>除了列名，您还可以在 <code>SELECT</code> 语句中使用表达式。以下示例使用 <code>SELECT</code> 语句返回所有客户的全名和电子邮件：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    first_name </span><span class="token operator">||</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> last_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    email</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>以下是部分输出：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">     ?</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">column</span><span class="token plain">?     </span><span class="token operator">|</span><span class="token plain">                email</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">------------------+-------------------------------------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> MARY SMITH       </span><span class="token operator">|</span><span class="token plain"> MARY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">SMITH</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> PATRICIA JOHNSON </span><span class="token operator">|</span><span class="token plain"> PATRICIA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">JOHNSON</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> LINDA WILLIAMS   </span><span class="token operator">|</span><span class="token plain"> LINDA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">WILLIAMS</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> BARBARA JONES    </span><span class="token operator">|</span><span class="token plain"> BARBARA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">JONES</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> ELIZABETH BROWN  </span><span class="token operator">|</span><span class="token plain"> ELIZABETH</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">BROWN</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> JENNIFER DAVIS   </span><span class="token operator">|</span><span class="token plain"> JENNIFER</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">DAVIS</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> MARIA MILLER     </span><span class="token operator">|</span><span class="token plain"> MARIA</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MILLER</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> SUSAN WILSON     </span><span class="token operator">|</span><span class="token plain"> SUSAN</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">WILSON</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> MARGARET MOORE   </span><span class="token operator">|</span><span class="token plain"> MARGARET</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">MOORE</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> DOROTHY TAYLOR   </span><span class="token operator">|</span><span class="token plain"> DOROTHY</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">TAYLOR</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">@sakilacustomer.org</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在此示例中，我们使用字符串连接运算符 <code>||</code> 连接每个客户的名字、空格和姓氏。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="使用-postgresql-select-语句计算表达式示例">使用 PostgreSQL SELECT 语句计算表达式示例<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#%E4%BD%BF%E7%94%A8-postgresql-select-%E8%AF%AD%E5%8F%A5%E8%AE%A1%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 使用 PostgreSQL SELECT 语句计算表达式示例" title="Direct link to 使用 PostgreSQL SELECT 语句计算表达式示例">​</a></h3>
<p>如果您只想要单纯的计算一个表达式，您可以省略 <code>SELECT</code> 语句中的 <code>FROM</code> 子句。 以下 <code>SELECT</code> 语句用来计算 <code>5 * 3</code> 的结果：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这是输出：</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">?</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">column</span><span class="token plain">?</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">----------</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">       </span><span class="token number">15</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-select#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>在本教程中，您学习了如何使用 PostgreSQL <code>SELECT</code> 语句的基本形式从单个表中查询数据。如果您不需要从任何表查询数据，则可以省略 <code>SELECT</code> 语句中的 <code>FROM</code> 子句。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="postgresql" term="postgresql"/>
        <category label="select" term="select"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PostgreSQL中ISNULL和ISNOTNULL的最佳实践]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/postgresql-isnull</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/postgresql-isnull"/>
        <updated>2024-02-04T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文介绍了在 PostgreSQL 中如何使用 `IS NULL` 运算符检查一个值是不是 `NULL`。PostgreSQL `IS NULL` 是一个布尔运算符，它检查一个值是不是`NULL`。 `NULL`值是一个特殊的值，它表示什么都没有，它即不是空字符串也不是false。]]></summary>
        <content type="html"><![CDATA[<p>本文介绍了在 PostgreSQL 中如何使用 <code>IS NULL</code> 运算符检查一个值是不是 <code>NULL</code>。PostgreSQL <code>IS NULL</code> 是一个布尔运算符，它检查一个值是不是<code>NULL</code>。 <code>NULL</code>值是一个特殊的值，它表示什么都没有，它即不是空字符串也不是false。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-is-null-语法">PostgreSQL IS NULL 语法<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-isnull#postgresql-is-null-%E8%AF%AD%E6%B3%95" class="hash-link" aria-label="Direct link to PostgreSQL IS NULL 语法" title="Direct link to PostgreSQL IS NULL 语法">​</a></h2>
<p>PostgreSQL <code>IS NULL</code> 是一个单目比较运算符，只需要一个操作数。<code>IS NULL</code> 运算符的语法是：</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">expr IS NULL</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">expr IS NOT NULL</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>解析：</p>
<ul>
<li><code>expr</code>可以是一个字段名、一个值或者一个表达式。</li>
<li><code>IS NOT NULL</code> 是 <code>IS NULL</code> 的否定运算。</li>
<li><code>IS NULL</code> 和 <code>IS NOT NULL</code> 可以用在 <code>SELECT</code> 语句或者 <code>WHERE</code> 子句中。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-is-null-运算规则">PostgreSQL IS NULL 运算规则<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-isnull#postgresql-is-null-%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99" class="hash-link" aria-label="Direct link to PostgreSQL IS NULL 运算规则" title="Direct link to PostgreSQL IS NULL 运算规则">​</a></h2>
<p>当 PostgreSQL <code>IS NULL</code> 运算符左侧的操作数是 <code>NULL</code> 时，<code>IS NULL</code> 运算符返回 <code>t</code>，否则返回 <code>f</code>。</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    NULL IS NULL "NULL IS NULL",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0 IS NULL "0 IS NULL",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    1 IS NULL "1 IS NULL";</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="�复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> NULL IS NOT NULL | 0 IS NOT NULL | 1 IS NOT NULL</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------------+---------------+---------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> f                | t             | t</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-is-null-实例">PostgreSQL IS NULL 实例<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-isnull#postgresql-is-null-%E5%AE%9E%E4%BE%8B" class="hash-link" aria-label="Direct link to PostgreSQL IS NULL 实例" title="Direct link to PostgreSQL IS NULL 实例">​</a></h2>
<p>我们将使用<code>Sakila</code>示例数据库 中的表进行演示，请您先在 PostgreSQL 中安装 <code>Sakila</code> 示例数据库。</p>
<p><code>Sakila</code> 示例数据库是使用最广泛的示例数据库之一，也是最好的示例数据库之一。<code>Sakila</code> 示例数据库最初由 MySQL AB 文档团队的前成员 Mike Hillyer 开发。它旨在提供一个标准模式，可用于书籍、教程、文章等中的示例演示。</p>
<p><code>Sakila</code> 数据库为 DVD 租赁商店业务建模，其中包含影片、演员、影片与演员关系等内容，以及连接影片、商店和租赁业务的中央库存表。</p>
<p>作为最好的示例数据库之一，<code>Sakila</code> 数据库已经被移植 PostgreSQL, Oracle, DB2, SQLite 等平台。</p>
<p>在 <code>Sakila</code> 示例数据库中， staff 表存储了 DVD 租赁商店中的职员信息。</p>
<p>在 <code>staff</code> 表中， <code>picture</code> 中存储了职员的照片文件， 要从 <code>staff</code> 表中查询那些没有上传图片的职员， 需要检查 <code>picture</code> 是否为 <code>NULL</code>, 请使用以下带有 <code>IS NULL</code> 的 SQL 语句：</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    first_name, last_name, picture</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">FROM</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    staff</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    picture IS NULL;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> first_name | last_name | picture</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------+-----------+---------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> Mike       | Hillyer   | &lt;null&gt;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> Jon        | Stephens  | &lt;null&gt;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/postgresql-isnull#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>在本文中，我们学习了 PostgreSQL 中 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 比较运算符的语法和用法。本文要点如下：</p>
<ul>
<li><code>IS NULL</code> 和 <code>IS NOT NULL</code> 是单目比较运算符。</li>
<li>使用 <code>IS NULL</code> 运算符检查一个值是否是 <code>NULL</code>。</li>
<li><code>IS NOT NULL</code> 运算符是 <code>IS NULL</code> 的否定操作。</li>
<li><code>NULL IS NULL</code> 的结果是真。</li>
</ul>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="postgresql" term="postgresql"/>
        <category label="isnull" term="isnull"/>
        <category label="isnotnull" term="isnotnull"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年最受欢迎的5款React组件库]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/react-component-library</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/react-component-library"/>
        <updated>2024-01-29T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[React是一个流行的用于构建用户界面的JavaScript库。它被许多公司使用，包括Facebook、Instagram、Netflix、Airbnb和Uber。React还被许多开源项目使用，如WordPress、Drupal和Magento。]]></summary>
        <content type="html"><![CDATA[<p>React是一个流行的用于构建用户界面的JavaScript库。它被许多公司使用，包括Facebook、Instagram、Netflix、Airbnb和Uber。React还被许多开源项目使用，如WordPress、Drupal和Magento。</p>
<p>在构建很多界面的时候，我们需要选择一个合适的React组件库。这些组件库可以帮助我们快速构建用户界面。它们还提供了许多可重用的组件，如按钮、表单、图表、表格等。这些组件库还提供了许多功能，如主题、动画、路由、状态管理等。</p>
<p>市场上有许多React组件库。每个库都有自己的特点、优缺点和价格。在本博客文章中，我们将回顾2024年最受欢迎的5款React组件库，并根据其特点、易用性、兼容性进行比较。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="为什么选择组件库">为什么选择组件库？<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E7%BB%84%E4%BB%B6%E5%BA%93" class="hash-link" aria-label="Direct link to 为什么选择组件库？" title="Direct link to 为什么选择组件库？">​</a></h2>
<p>一般来说，公司在构建Web应用程序时会选择组件库，以简化重复的任务。组件库提供了一系列开箱即用的组件，如选择框、输入框、复选框等。这些组件具有可自定义的样式或内置的吸引人的样式，可以快速开发出外观美观的网站，而无需从零开始。</p>
<p>总之，我们通常在两种场景下使用组件库：</p>
<ul>
<li>外部工具：直接面向公司用户，通常与公司的风格一致，外观更美观，响应更灵敏。</li>
<li>内部工具：针对公司员工内部使用，强调设计美学和快速功能实现。</li>
</ul>
<p>接下来，我们将基于以下几个方面分析组件库：</p>
<ol>
<li>优势</li>
<li>劣势</li>
<li>如何做出选择</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="内部工具场景的最佳选择">内部工具场景的最佳选择<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E5%86%85%E9%83%A8%E5%B7%A5%E5%85%B7%E5%9C%BA%E6%99%AF%E7%9A%84%E6%9C%80%E4%BD%B3%E9%80%89%E6%8B%A9" class="hash-link" aria-label="Direct link to 内部工具场景的最佳选择" title="Direct link to 内部工具场景的最佳选择">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>是一个开箱即用的低代码工具，可以使用简单的JS快速构建内部工具，无需创建复杂的前端项目，开箱即用，使用拖拉拽构建UI。</p>
<ul>
<li>Web和应用管理面板</li>
<li>数据仪表板</li>
<li>自定义的B2B工具</li>
</ul>
<p>与使用组件库构建相比，ILLA Cloud可以实现10倍更快的工具构建，并支持团队内协作编辑。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/dashboard.png" alt="dashboard" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="mui">MUI<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#mui" class="hash-link" aria-label="Direct link to MUI" title="Direct link to MUI">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/mui.png" alt="MUI" class="img_CfaS"></p>
<p>⭐ GitHub Stars：90k</p>
<p>⏬ NPM下载量：每周3,263,852次下载</p>
<p>💪🏼 首次发布日期：2014年11月6日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势">优势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>MUI的组件是非常全面的，MUI的组件由几部分组成，包括：</p>
<ul>
<li>MUI Core：核心组件，包括按钮、表单、图标、图表、表格等。</li>
<li>MUI X：高级组件，包括数据表、复杂图表等。</li>
</ul>
<p>使用MUI基本上可以覆盖所有的场景，无需为复杂的数据处理场景和展示而选择其他组件库。</p>
<p>如果你喜欢Material Design的风格的设计，使用MUI是你的最佳选择。你可以不做任何修改的情况下构建出来一套完整的Google风格的应用。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="劣势">劣势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E5%8A%A3%E5%8A%BF" class="hash-link" aria-label="Direct link to 劣势" title="Direct link to 劣势">​</a></h3>
<p>MUI X中的复杂数据处理组件是需要付费的。</p>
<p>MUI作为Material Design的实现，其设计风格是比较严谨的，对于一些需要自定义设计风格的场景，可能需要额外的工作量。</p>
<p>MUI的自定义Style系统是使用EmotionJs进行整体布局的样式调整，这可能需要一些学习曲线，可能不太适合直接开发，需要查阅文档来进行某些样式修改。</p>
<p>如果你不喜欢CSS-IN-JS的方式，MUI可能不是你的最佳选择。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="shadcn-ui">Shadcn UI<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#shadcn-ui" class="hash-link" aria-label="Direct link to Shadcn UI" title="Direct link to Shadcn UI">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/shadcnui.png" alt="Shadcn UI" class="img_CfaS"></p>
<p>⭐ GitHub Stars：37k</p>
<p>⏬ NPM下载量：每周23,962次下载</p>
<p>💪🏼 首次发布日期：2023年3月8日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势-1">优势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E4%BC%98%E5%8A%BF-1" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>作为一个相对较新的项目，Shadcn UI在开源社区中迅速得到了认可。并且Shadcn由于是新构建的项目，没有历史包袱，可以更好的适应新的技术栈。</p>
<p>Shadcn UI的设计风格偏向于商业风格，具有干净的用户界面，适用于内部工具和严肃的应用场景。Shadcn UI支持自定义主题，还有一些预制的风格，你可以选择自己的喜欢的样式进行安装和修改，这对于一些不需要自定义设计风格的场景，可以快速的构建出来一个应用。</p>
<p>Shadcn UI最大的优势是他并不是一个组件库，Shadcn UI不是一个被npm分发的库，接入Shadcn UI是直接使用代码进行构建，这意味着你可以直接修改Shadcn UI的代码，而不需要额外的工作量。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="劣势-1">劣势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E5%8A%A3%E5%8A%BF-1" class="hash-link" aria-label="Direct link to 劣势" title="Direct link to 劣势">​</a></h3>
<p>Shadcn UI的主题是基于CSS变量实现的，这意味着它不支持IE11。如果您需要支持IE11，那么Shadcn UI可能不是您的最佳选择。</p>
<p>并且Shadcn UI的主题修改方式是CSS variables or Tailwind CSS utility classes，所以如果你使用CSS-IN-JS的方式，可能需要额外的工作量。</p>
<p>Shadcn UI相对于其他组件库的维护时间较短，对于比较复杂的组件，比如DataGrid，Chart等，目前还不支持，还需要寻找其他的解决方案，这意味着你不能使用一个组件库完成你的所有工作。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="chakra-ui">Chakra UI<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#chakra-ui" class="hash-link" aria-label="Direct link to Chakra UI" title="Direct link to Chakra UI">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/chakraui.png" alt="chakra-ui" class="img_CfaS"></p>
<p>⭐ GitHub Stars：35.8k</p>
<p>⏬ NPM下载量：每周534,188次下载</p>
<p>💪🏼 首次发布日期：2019年12月7日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势-2">优势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E4%BC%98%E5%8A%BF-2" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>Chakra UI是一个风格比较商业的组件库，没有绑定某种特殊的风格，在使用上比较符合大多数人的审美。</p>
<p>作为一个组件库，Chakra UI有一个非常庞大的模板市场，你可以在Chakra UI的模板市场找到大多数主流场景的完整模板，比如电商，SaaS官网等。下载模板之后，你可以直接使用，也可以进行修改。</p>
<p>Chakra UI的大多数功能是不需要配置的，这对于制作一个快速的原型是非常有帮助的。并且天然对于响应式的支持，你可以在不同的设备上进行预览。</p>
<p>Chakra UI是SEO友好的，这对于制作需要SEO友好的产品是非常有必要的。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="劣势-2">劣势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E5%8A%A3%E5%8A%BF-2" class="hash-link" aria-label="Direct link to 劣势" title="Direct link to 劣势">​</a></h3>
<p>Chakra UI的组件丰富度是不够的，对于一些复杂的场景，比如数据处理，图表等，Chakra UI并不支持，你需要额外的工作量来寻找其他的解决方案。</p>
<p>最好不要使用Chakra UI来构建复杂的工具类产品和SaaS，因为他对组件的定制化能力也不够好，使用Chakra UI制作Landing Page才是最好的选择。</p>
<p>虽然Chakra UI有丰富的模板市场，但是这些模板并不是免费的，你需要额外的费用来购买模板。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ant-design">Ant Design<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#ant-design" class="hash-link" aria-label="Direct link to Ant Design" title="Direct link to Ant Design">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/antd.png" alt="ant-design" class="img_CfaS"></p>
<p>⭐ GitHub Stars：89.1k</p>
<p>⏬ NPM下载量：每周1,264,151次下载</p>
<p>💪🏼 首次发布日期：2015年7月21日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势-3">优势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E4%BC%98%E5%8A%BF-3" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>作为一个成熟的千亿美金的上市公司维护的组件库，Ant Design的丰富度是最好的，几乎可以满足所有的场景，而且Ant Design的组件库是非常稳定的，不会出现大的变动。</p>
<p>如果你的工作场景里面要统一React和Vue的风格，那么Ant Design是你的最佳选择，因为Ant Design不仅仅支持React，还支持Vue。</p>
<p>Ant Design不仅有基础组件的集合，甚至还有Web3的组件集合，这意味着你可以直接使用Ant Design来构建一个Web3的应用。</p>
<p>Ant Design还对数据图标，大数据场景，地图等做了定制化的组件库，可以支持非常复杂的数据大屏场景。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="劣势-3">劣势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E5%8A%A3%E5%8A%BF-3" class="hash-link" aria-label="Direct link to 劣势" title="Direct link to 劣势">​</a></h3>
<p>Ant Design中由于大量的支持带来了一些历史包袱，比如Table组件的性能是非常差的，这意味着你需要额外的工作量来寻找其他的解决方案。</p>
<p>Ant Design中拥有大量其他类库的功能，对于组件的广度满足的十分出色，但是对于组件的深度满足的不够好。</p>
<p>Ant Design的所有依赖都是Ant Design自己维护的，这意味着你需要额外的工作量来兼容你自己的构建方案和CSS方案，这对于想要使用其他开源库的场景来说是不够友好的。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="fluent-ui">Fluent UI<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#fluent-ui" class="hash-link" aria-label="Direct link to Fluent UI" title="Direct link to Fluent UI">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/fluentui.png" alt="fluent-ui" class="img_CfaS"></p>
<p>⭐ GitHub Stars：17.3k</p>
<p>⏬ NPM下载量：每周191,170次下载</p>
<p>💪🏼 首次发布日期：2020年9月17日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势-4">优势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E4%BC%98%E5%8A%BF-4" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>微软官方维护的组件库，Fluent UI的风格是跟微软的风格完全一致的，这对于一些需要跟微软风格一致的场景是非常有帮助的。</p>
<p>Fluent UI支持很多平台，包括Web，React Native，iOS，Android，macOS，Windows，这意味着你可以使用Fluent UI来构建一个跨平台的应用。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="劣势-4">劣势<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E5%8A%A3%E5%8A%BF-4" class="hash-link" aria-label="Direct link to 劣势" title="Direct link to 劣势">​</a></h3>
<p>微软的风格并不会让所有人喜欢，所以如果你不喜欢微软的风格，那么Fluent UI可能不是你的最佳选择。</p>
<p>Fluent UI的组件丰富度是不够的，对于一些复杂的场景，比如数据处理，图表等，Fluent UI并不支持，你需要额外的工作量来寻找其他的解决方案。</p>
<p>Fluent UI的文档不够好，对于开发者来说，文档建设是很重要的，这点Fluent UI还有改进空间。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="总结">总结<a href="https://illacloud.github.io/illa-website/zh/blog/react-component-library#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="Direct link to 总结" title="Direct link to 总结">​</a></h2>
<p>如果你需要一个大而全的组件库，并且愿意为之付费，推荐使用MUI。如果你不想为之付费，推荐使用Ant Design。</p>
<p>如果你在开发Landing Page，推荐使用Chakra UI。</p>
<p>如果你想使用微软风格，推荐使用Fluent UI。</p>
<p>如果你不想引入组件库，只想要源码集成，推荐使用Shadcn UI。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="react" term="react"/>
        <category label="component" term="component"/>
        <category label="library" term="library"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[最佳的Web Worker教程]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial"/>
        <updated>2024-01-29T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Web Worker是一个可以在后台运行JavaScript的JavaScript API。它旨在允许执行复杂的计算而不会阻塞主线程。]]></summary>
        <content type="html"><![CDATA[<p>Web Worker是一个可以在后台运行JavaScript的JavaScript API。它旨在允许执行复杂的计算而不会阻塞主线程。这对Web开发人员非常有用，但并没有广泛使用。本文将介绍如何使用Web Worker。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="什么是web-worker">什么是Web Worker<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#%E4%BB%80%E4%B9%88%E6%98%AFweb-worker" class="hash-link" aria-label="Direct link to 什么是Web Worker" title="Direct link to 什么是Web Worker">​</a></h2>
<p>众所周知，JavaScript语言的一个主要特点是其单线程性质，一次只能同步处理一个任务。这也是针对Node.js的后端开发者的主要批评点之一。</p>
<p>然而，JavaScript最初是有意设计为单线程语言，以适应当时的用途。</p>
<p>JavaScript的最初目标是通过操作DOM或BOM元素来促进Web页面与用户的交互。为了在这个上下文中追求效率，必须指定只有一个线程在任何时间点可以直接操作页面元素，以避免资源竞争和数据同步等问题，以确保系统的稳定性和安全性。</p>
<p>然而，JavaScript并不限制于线性任务处理。JavaScript具有消息队列和事件循环机制，通过异步消息处理实现并发处理。在高I/O并发事务处理中，不需要手动创建和销毁线程，也不需要额外的线程管理空间，因此性能优越。结果，探索在服务器端使用JavaScript的Node.js在高并发网络请求处理方面表现出色。</p>
<p>虽然JavaScript通过其异步机制有效地解决了与高I/O相关的性能问题，但其单线程执行的基本特性仍然存在。这是因为在处理CPU密集型任务时无法充分利用其计算资源，这是因为它不能充分利用现代多核多线程机器的计算资源。</p>
<p>在现代大型前端项目中，随着代码复杂性的增加，本地计算密集型任务也变得需要。如果将JavaScript项目在单个线程中运行，应用程序可能会变得繁忙，忽略了频繁的用户交互，用户体验可能不佳。更严重的是，如果有太多的计算密集型任务，可能会导致资源饱和，使网页不再响应。因此，在Web项目中需要本地多线程计算能力，这就是Web Worker诞生的原因。</p>
<p>Web Worker作为HTML5的标准引入，官方定义如下：</p>
<blockquote>
<p>Web Worker允许在与Web应用程序的主执行线程分开的后台线程中运行脚本操作。</p>
</blockquote>
<p>这样，JavaScript脚本可以创建多个线程，充分利用CPU的多核计算能力，而不会阻塞主线程（通常是UI渲染线程）。</p>
<p>尽管Web Worker是HTML5的一部分，但实际上它在2009年提出了W3C的草案。因此，它具有很好的兼容性，并且在大多数主要的Web浏览器中得到支持。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/web-worker-tutorial/worker.png" alt="web_worker" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="web-worker的限制">Web Worker的限制<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#web-worker%E7%9A%84%E9%99%90%E5%88%B6" class="hash-link" aria-label="Direct link to Web Worker的限制" title="Direct link to Web Worker的限制">​</a></h2>
<p>Web Worker基本上不会破坏JavaScript的单线程性质。</p>
<p>实际上，Web Worker脚本内的代码不能直接操作DOM节点，也不能使用大多数BOM（浏览器对象模型）API。它的全局环境不是Window，而是DedicatedWorkerGlobalScope。Worker在沙箱中运行，执行与主线程完全独立的JavaScript文件。</p>
<p>这些限制是为了避免在前文提到的资源竞争问题中使用Worker。主要用途是作为主线程的辅助，处理高CPU密集型数据处理任务，并通过线程间通信将执行结果返回给主线程。通过这个过程，主线程可以继续响应用户交互，有效地防止了页面延迟的问题。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="使用web-worker">使用Web Worker<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#%E4%BD%BF%E7%94%A8web-worker" class="hash-link" aria-label="Direct link to 使用Web Worker" title="Direct link to 使用Web Worker">​</a></h2>
<p>目前，Web Worker在浏览器中得到了广泛支持，只需提供Worker脚本的URI并进行实例化即可使用。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> worker </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"./worker.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="通信">通信<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#%E9%80%9A%E4%BF%A1" class="hash-link" aria-label="Direct link to 通信" title="Direct link to 通信">​</a></h3>
<p>Worker和主线程之间的通信只需要两个API，即用于接收消息的<code>onmessage</code>或<code>addEventListener</code>以及用于发送消息的<code>postMessage</code>，可以无缝地实现基于消息的交互。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> worker </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"./worker.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 从主线程发送消息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'从主线程发送的数据'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 主线程接收消息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method-variable function-variable method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> data </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Worker线程接收消息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'message'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> data </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// Worker线程发送消息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Worker收到了数据'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意：在Worker内部，可以使用<code>this.xx</code>、<code>self.xx</code>以及直接使用<code>xx</code>，它们都处于相同的作用域，引用全局变量<code>DedicatedWorkerGlobalScope</code>，可以互换使用。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="终止">终止<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#%E7%BB%88%E6%AD%A2" class="hash-link" aria-label="Direct link to 终止" title="Direct link to 终止">​</a></h3>
<p>有两种方法可以终止Worker。可以在内部终止，也可以从主线程发出终止指令。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">terminate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="高��级用法基于promise的通信">高级用法：基于Promise的通信<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E5%9F%BA%E4%BA%8Epromise%E7%9A%84%E9%80%9A%E4%BF%A1" class="hash-link" aria-label="Direct link to 高级用法：基于Promise的通信" title="Direct link to 高级用法：基于Promise的通信">​</a></h3>
<p>基于前面的部分，已经可以使用Worker的API相对轻松地利用浏览器的多线程功能。但是，缺少一些常用功能，如异步响应等，这在工程应用程序中通常是需要的。接下来，将介绍如何实现这些功能。</p>
<p>首先，需要一个异步回调集合，称为<code>actionHandlerMap</code>。它用于存储等待Worker响应的Promise解析方法，并可以使用唯一的标识符（确保唯一性）指定键。接下来，需要封装原生的<code>postMessage</code>和<code>onmessage</code>方法。</p>
<p>在发送消息时，需要在消息中包含一个<code>id</code>，并在<code>actionHandlerMap</code>中存储当前Promise的解析方法以等待Worker的响应。</p>
<p>在<code>onmessage</code>监听器方面，接收到Worker的响应后，将其与相应的Promise匹配并执行<code>.then()</code>方法。完成后，从集合中删除Promise的解析函数。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> fakeId </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MainThreadController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">workerUrl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">workerName</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 用于等待异步回调的集合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">bind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 执行相应的Promise解析</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">delete</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 在实际使用中，可以使用业务ID作为键或生成键</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> fakeId</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">resolve</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> reject</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> message </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token spread operator">...</span><span class="token plain">action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token function" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> mainThreadController </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">MainThreadController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">workerUrl</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'./worker.js'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">workerName</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'test-worker'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mainThreadController</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">actionType</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'asyncCalc'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">payload</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'向Worker发送消息'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'从Worker接收到消息:'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Worker部分的处理要简单得多。当计算完成后，将请求的ID包含在响应中。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 用于等待异步回调的集合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">bind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> payload </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'print'</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'消息已打印。'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'asyncCalc'</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 模拟异步处理情景</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setTimeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">params</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">计算的结果为 </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">result</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">。</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> workerThreadController </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>当然，在Worker端可以进一步改进。如果Worker需要处理多种类型的计算，<code>onmessage</code>函数中的<code>switch</code>语句可能会变得很长。基于字符串的检查也可能不够可靠。通过使用策略模式将Worker内部逻辑封装起来，可以简化Worker内部的逻辑。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 这可以单独提取到另一个文件并导入</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> api </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'消息已打印。'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">asyncCalc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setTimeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">params</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">计算的结果为 </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">result</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">。</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 用于等待异步回调的集合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">bind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> payload </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> api</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token plain"> result </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> workerThreadController </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>因此，建立了一个简单且方便的基于Promise的Worker。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/web-worker-tutorial#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>总结一下，本文简要介绍了Web Worker的概念、其功能和限制，并为读者提供了全面的理解以及如何使用Web Worker的用例。还提出了一种封装原生Worker API以实现基于Promise调用的解决方案，并最终建议使用在团队中已经广泛使用且成熟的解决方案。希望这对前端开发人员对未来的Worker扩展感兴趣时有所帮助。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="javascript" term="javascript"/>
        <category label="webworker" term="webworker"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[最实用的Typescript常用特性]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation"/>
        <updated>2024-01-25T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[类型编程在项目中的重要性不言而喻，本文将总结一些 Typescript 的常用特性，帮助大家熟悉掌握 Typescript 的使用。]]></summary>
        <content type="html"><![CDATA[<p>类型编程在项目中的重要性不言而喻，本文将总结一些 Typescript 的常用特性，帮助大家熟悉掌握 Typescript 的使用。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="高级类型">高级类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 高级类型" title="Direct link to 高级类型">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="交叉类型">交叉类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 交叉类型" title="Direct link to 交叉类型">​</a></h3>
<p>交叉类型就是通过 &amp; 符号，将多个类型合并为一个类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I2</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I1</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="联合类型">联合类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 联合类型" title="Direct link to 联合类型">​</a></h3>
<p>联合类型就是通过 | 符号，表示一个值可以是几种类型之一。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="字符串字面量类型">字符串字面量类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 字符串字面量类型" title="Direct link to 字符串字面量类型">​</a></h3>
<p>字符串字面量类型就是使用一个字符串类型作为变量的类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'number'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'number'</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="数�字字面量类型">数字字面量类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%95%B0%E5%AD%97%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 数字字面量类型" title="Direct link to 数字字面量类型">​</a></h3>
<p>数字字面量类型就是使用一个数字作为变量的类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="布尔字面量类型">布尔字面量类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E5%B8%83%E5%B0%94%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 布尔字面量类型" title="Direct link to 布尔字面量类型">​</a></h3>
<p>数字字面量类型就是使用一个布尔值作为变量的类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">true</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="字符串模板类型">字符串模板类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 字符串模板类型" title="Direct link to 字符串模板类型">​</a></h3>
<p>字符串模板类型就是通过 ES6 的模板字符串语法，对类型进行约束。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">https</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">https://</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation builtin" style="color:rgb(189, 147, 249)">string</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain">https </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">https://jd.com</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="操作符">操作符<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%93%8D%E4%BD%9C%E7%AC%A6" class="hash-link" aria-label="Direct link to 操作符" title="Direct link to 操作符">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="keyof">keyof<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#keyof" class="hash-link" aria-label="Direct link to keyof" title="Direct link to keyof">​</a></h3>
<p>keyof 用于获取某种类型的所有键，其返回值是联合类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// const a: 'name' | 'age' = 'name'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'name'</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="typeof">typeof<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#typeof" class="hash-link" aria-label="Direct link to typeof" title="Direct link to typeof">​</a></h3>
<p>typeof 用于获取对象或者函数的结构类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a2 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'tj'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> a2 </span><span class="token comment" style="color:rgb(98, 114, 164)">// {name: string}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fn1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> x </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> fn1 </span><span class="token comment" style="color:rgb(98, 114, 164)">// (x: number) =&gt; number</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="in">in<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#in" class="hash-link" aria-label="Direct link to in" title="Direct link to in">​</a></h3>
<p>in 用于遍历联合类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> obj </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T5</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">name: any,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">age: any</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tk">T[K]<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#tk" class="hash-link" aria-label="Direct link to T[K]" title="Direct link to T[K]">​</a></h3>
<p>T[K] 用于访问索引，得到索引对应的值的联合类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I3</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T6</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string | number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="运算符">运算符<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E8%BF%90%E7%AE%97%E7%AC%A6" class="hash-link" aria-label="Direct link to 运算符" title="Direct link to 运算符">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="非空断言运算符">非空断言运算符<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E9%9D%9E%E7%A9%BA%E6%96%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6" class="hash-link" aria-label="Direct link to 非空断言运算符" title="Direct link to 非空断言运算符">​</a></h3>
<p>非空断言运算符 ! 用于强调元素是非 null 非 undefined，告诉 Typescript 该属性会被明确的赋值。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">Demo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">JSX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access maybe-class-name" style="color:rgb(80, 250, 123)">Element</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> divRef </span><span class="token operator">=</span><span class="token plain"> useRef</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">HTMLDivElement</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">   useEffect(() =&gt; </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      divRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">scrollIntoView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 断言divRef.current 是非 null 非 undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text">, [])</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">   return </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">ref</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">divRef</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">divDemo</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="可选链运算符">可选链运算符<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E5%8F%AF%E9%80%89%E9%93%BE%E8%BF%90%E7%AE%97%E7%AC%A6" class="hash-link" aria-label="Direct link to 可选链运算符" title="Direct link to 可选链运算符">​</a></h3>
<p>可选链运算符 ?. 用于判断左侧表达式的值是否是 null 或 undefined，如果是将停止表达式运行。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a </span><span class="token operator">=</span><span class="token plain"> b</span><span class="token operator">?.</span><span class="token plain">a</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="空值合并运算符">空值合并运算符<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6" class="hash-link" aria-label="Direct link to 空值合��并运算符" title="Direct link to 空值合并运算符">​</a></h3>
<p>空值合并运算符 ?? 用于判断左侧表达式的值是否是 null 或 undefined，如果不是返回右侧的值。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a </span><span class="token operator">=</span><span class="token plain"> b </span><span class="token operator">??</span><span class="token plain"> </span><span class="token number">10</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="数字分隔符">数字分隔符<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6" class="hash-link" aria-label="Direct link to 数字分隔符" title="Direct link to 数字分隔符">​</a></h3>
<p>数字分隔符 _ 用于对长数字进行分割，便于数字的阅读，编译结果将会自动去除 _。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> num</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1_111_111_111</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="类型别名">类型别名<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D" class="hash-link" aria-label="Direct link to 类型别名" title="Direct link to 类型别名">​</a></h2>
<p>类型别名用来给一个类型起个新名字。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Message</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">greet</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">message</span><span class="token operator">:</span><span class="token plain"> Message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="类型断言">类型断言<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80" class="hash-link" aria-label="Direct link to 类型断言" title="Direct link to 类型断言">​</a></h2>
<p>类型断言就是告诉浏览器我非常确定的类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// 尖括号 语法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> someValue</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"this is a string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> strLength</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain">someValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// as 语法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> someValue</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"this is a string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> strLength</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">someValue </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="类型守卫">类型守卫<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB" class="hash-link" aria-label="Direct link to 类型守卫" title="Direct link to 类型守卫">​</a></h2>
<p>类型守卫就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">B</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  sex</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  home</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">doSomething</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">B</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 使用 in 类型守卫</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">doSomething</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">B</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"name"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 使用 typeof 类型守卫</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> a </span><span class="token operator">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> a </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> a </span><span class="token operator">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"number"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> a </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// instanceof类型守卫</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Foo</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Bar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">input</span><span class="token operator">:</span><span class="token plain"> Foo </span><span class="token operator">|</span><span class="token plain"> Bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">input </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">instanceof</span><span class="token plain"> </span><span class="token class-name">Foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 这里 input 的类型「收紧」为 Foo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 这里 input 的类型「收紧」为 Bar</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="泛型">泛型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B" class="hash-link" aria-label="Direct link to 泛型" title="Direct link to 泛型">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="泛型介绍">泛型介绍<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 泛型介绍" title="Direct link to 泛型介绍">​</a></h3>
<p>泛型就是通过给类型传参，得到一个更加通用的类型，就像给函数传参一样。</p>
<p>如下我们得到一个通用的泛型类型 T1，通过传参，可以得到 T2 类型 string[]、T3 类型 number[]：</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string[]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// number[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如上 T 是变量，我们可以用任意其他变量名代替他。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T4</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">A</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T5</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T4</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string[]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T6</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T4</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// number[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="命名规范">命名规范<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83" class="hash-link" aria-label="Direct link to 命名规范" title="Direct link to 命名规范">​</a></h3>
<p>在 Typescript 泛型变量的命名规范中，默认了 4 种常见的泛型变量名，为提高可读性，不建议改为其他的变量名来定义。</p>
<p>T：表示第一个参数
K： 表示对象的键类型
V：表示对象的值类型
E：表示元素类型</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="泛型接口">泛型接口<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3" class="hash-link" aria-label="Direct link to 泛型接口" title="Direct link to 泛型接口">​</a></h3>
<p>泛型接口和上述示例类似，为接口类型传参：</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I1</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">U</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="泛型约束extends-操作符">泛型约束(extends 操作符)<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9Fextends-%E6%93%8D%E4%BD%9C%E7%AC%A6" class="hash-link" aria-label="Direct link to 泛型约束(extends 操作符)" title="Direct link to 泛型约束(extends 操作符)">​</a></h3>
<p>有时候，我们需要对泛型参数进行约束，限制每个变量的类型。Typescript 通过 extends 实现类型约束。</p>
<p>泛型约束语法如下：</p>
<p>泛型名 extends 类型
通过 T extends Length 约束了 T 的类型，必须是包含 length 属性，且 length 的类型必须是 number。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name">Length</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  length</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(80, 250, 123)">fn1</span><span class="token generic-function generic class-name operator">&lt;</span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token generic-function generic class-name"> Length</span><span class="token generic-function generic class-name operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">arg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> arg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过 extends 约束了 K 必须是 T 的 key。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(80, 250, 123)">getProperty</span><span class="token generic-function generic class-name operator">&lt;</span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token generic-function generic class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token generic-function generic class-name operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">obj</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> tsInfo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Typescript"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  supersetOf</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Javascript"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  difficulty</span><span class="token operator">:</span><span class="token plain"> Difficulty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Intermediate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> difficulty</span><span class="token operator">:</span><span class="token plain"> Difficulty </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">getProperty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tsInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"difficulty"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> supersetOf</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">getProperty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tsInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"superset_of"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="泛型参数默认值">泛型参数默认值<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC" class="hash-link" aria-label="Direct link to 泛型参数默认值" title="Direct link to 泛型参数默认值">​</a></h3>
<p>泛型参数默认值，和函数参数默认值一样，在没有传参时，给定默认值。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I4</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name"> </span><span class="token class-name operator">=</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">string</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">S1</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I4</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"123"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 默认 name: string类型</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">S2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I4</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">123</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="泛型条件">泛型条件<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="Direct link to 泛型条件" title="Direct link to 泛型条件">​</a></h3>
<p>条件类型和 Js 的条件判断意思一样，都是指如果满足条件，就 xx，否则 xx。</p>
<p>条件类型表达式：</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">X</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">Y</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果 T 能够赋值给 U，那么类型是 X，否则类型是 Y。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'string'</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'number'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 'string'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 'number</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="泛型推断infer-操作符">泛型推断(infer 操作符)<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E6%8E%A8%E6%96%ADinfer-%E6%93%8D%E4%BD%9C%E7%AC%A6" class="hash-link" aria-label="Direct link to 泛型推断(infer 操作符)" title="Direct link to 泛型推断(infer 操作符)">​</a></h3>
<p>泛型推断的关键字是 infer，语法是 infer 类型。</p>
<p>一般是和泛型条件结合使用，结合实际例子理解：</p>
<p>如果泛型参数 T 能赋值给类型 <code>{t: infer Test}</code>，那么类型是推断类型 Test，否则类型是 string。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Foo</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">t</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">infer</span><span class="token plain"> Test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> Test </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>泛型参数 number 没有 t 属性，所以类型是 string</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">One</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>泛型参数的 t 属性是 boolean，所以类型是推断类型 boolean</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Two</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> t</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">boolean</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// boolean</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>泛型参数的 t 属性是 () =&gt; void，所以类型是推断类型 () =&gt; void</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Three</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">t</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// () =&gt; void</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="泛型工具类型">泛型工具类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%B3%9B%E5%9E%8B%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 泛型工具类型" title="Direct link to 泛型工具类型">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="映射类型">映射类型<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Direct link to 映射类型" title="Direct link to 映射类型">​</a></h3>
<p>映射类型，它是一种泛型类型，可用于把原有的对象类型映射成新的对象类型。</p>
<p>常见的映射类型语法：</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">readonly</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">readonly</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token operator">-</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">readonly</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>举例说明，通过映射类型将所有属性变为可选：</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Partial</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="partial">Partial<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#partial" class="hash-link" aria-label="Direct link to Partial" title="Direct link to Partial">​</a></h3>
<p>Typescript 已将一些常用的映射类型进行封装，如 Partial 就是用于将泛型的全部属性变为可选。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Partial</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Partial</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 没有name属性也不会报错</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="required">Required<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#required" class="hash-link" aria-label="Direct link to Required" title="Direct link to Required">​</a></h3>
<p>Required 将泛型的所有属性变为必选。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Required</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Required</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> b</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ts报错，类型 "{}" 中缺少属性 "name"，但类型 "Required&lt;{ name?: string | undefined; }&gt;" 中需要该属性。ts(2741)</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>语法-?，是把?可选属性减去的意思</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="readonly">Readonly<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#readonly" class="hash-link" aria-label="Direct link to Readonly" title="Direct link to Readonly">​</a></h3>
<p>Readonly 将泛型的所有属性变为只读。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Readonly</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> c</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj1"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ts 报错，无法分配到 "name" ，因为它是只读属性。ts(2540)</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="pick">Pick<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#pick" class="hash-link" aria-label="Direct link to Pick" title="Direct link to Pick">​</a></h3>
<p>Pick 从类型中选择一下属性，生成一个新类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Pick</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T4</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Pick</span><span class="token operator">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">这是一个新类型，T4={name: string}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> d</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T4</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="record">Record<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#record" class="hash-link" aria-label="Direct link to Record" title="Direct link to Record">​</a></h3>
<p>Record 将 key 和 value 转化为 T 类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Record</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">key </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> e</span><span class="token operator">:</span><span class="token plain"> Record</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'tj'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> f</span><span class="token operator">:</span><span class="token plain"> Record</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>keyof any 对应的类型为 number | string | symbol，是可以做对象键的类型集合。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="returntype">ReturnType<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#returntype" class="hash-link" aria-label="Direct link to ReturnType" title="Direct link to ReturnType">​</a></h3>
<p>ReturnType 获取 T 类型对应的返回值类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">ReturnType</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name operator">...</span><span class="token class-name">args</span><span class="token class-name operator">:</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token class-name"> </span><span class="token class-name operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">...</span><span class="token plain">args</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">infer</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">R</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">R</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="exclude">Exclude<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#exclude" class="hash-link" aria-label="Direct link to Exclude" title="Direct link to Exclude">​</a></h3>
<p>Exclude 将某个类型中属于另一个的类型移除掉。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Exclude</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T0</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// "b" | "c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// "c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">Function</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string | number</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="extract">Extract<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#extract" class="hash-link" aria-label="Direct link to Extract" title="Direct link to Extract">​</a></h3>
<p>Extract 从 T 中提取出 U。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Extract</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T0</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Extract</span><span class="token operator">&lt;</span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"f"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// "a"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Extract</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">Function</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// () =&gt;void</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="omit">Omit<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#omit" class="hash-link" aria-label="Direct link to Omit" title="Direct link to Omit">​</a></h3>
<p>Omit 使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Omit</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Pick</span><span class="token operator">&lt;</span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name">Todo</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  title</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  completed</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">boolean</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  description</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">TodoPreview</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Omit</span><span class="token operator">&lt;</span><span class="token plain">Todo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"description"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">title: string;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">completed: boolean;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="nonnullable">NonNullable<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#nonnullable" class="hash-link" aria-label="Direct link to NonNullable" title="Direct link to NonNullable">​</a></h3>
<p>NonNullable 用来过滤类型中的 null 及 undefined 类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">NonNullable</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">undefined</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T0</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> NonNullable</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">undefined</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string | number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> NonNullable</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">undefined</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="parameters">Parameters<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#parameters" class="hash-link" aria-label="Direct link to Parameters" title="Direct link to Parameters">​</a></h3>
<p>Parameters 用于获得函数的参数类型组成的元组类型。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Parameters</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name operator">...</span><span class="token class-name">args</span><span class="token class-name operator">:</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token class-name"> </span><span class="token class-name operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">...</span><span class="token plain">args</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">infer</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// []</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">B</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token plain">typeofArray</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">isArray</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// [any]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">C</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token plain">typeofparseInt</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// [string, (number | undefined)?]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">D</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token plain">typeofMath</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">max</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// number[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="最后">最后<a href="https://illacloud.github.io/illa-website/zh/blog/typescript-most-practical-features-compilation#%E6%9C%80%E5%90%8E" class="hash-link" aria-label="Direct link to 最后" title="Direct link to 最后">​</a></h2>
<p>赶紧收藏起来！</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="typescript" term="typescript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[IT支持的最佳工具]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/it-support</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/it-support"/>
        <updated>2024-01-23T20:00:00.000Z</updated>
        <summary type="html"><![CDATA[在普通公司中，IT部门的技术支持负责管理公司的信息系统、数据库]]></summary>
        <content type="html"><![CDATA[<p>IT支持分为技术支持和程序支持两部分。</p>
<p>技术支持需要具备广泛知识结构的技术人员。一定规模的公司都有一个IT部门，通常称为网络管理，但并不是所有公司都有程序支持。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="it支持的工作内容">IT支持的工作内容<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#it%E6%94%AF%E6%8C%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9" class="hash-link" aria-label="Direct link to IT支持的工作内容" title="Direct link to IT支持的工作内容">​</a></h2>
<p>在普通公司中，IT部门的技术支持负责管理公司的信息系统、数据库、机械硬件设备等。如果公司需要任何特殊软件或更新新的系统，通常会与技术公司的程序员组成一个团队，再加上公司自己的程序支持。</p>
<p>技术支持更像是一位顾问，指导更宏观的方向，所以他们通常知道很多。</p>
<p>程序支持更专注于编码。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="推荐工具">推荐工具<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E6%8E%A8%E8%8D%90%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to 推荐工具" title="Direct link to 推荐工具">​</a></h2>
<p>在IT支持工作中，我们肯定需要许多工具来帮助我们更好地完成任务，因为每个IT人都有许多共同的需求。例如：</p>
<ul>
<li>处理工作订单</li>
<li>项目管理</li>
<li>代码管理</li>
<li>文档管理</li>
<li>通知</li>
<li>会议</li>
<li>......</li>
</ul>
<p>以下是一些推荐的工具，以帮助每个人更好地完成他们的工作。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#illa-cloud" class="hash-link" aria-label="Direct link to ILLA Cloud" title="Direct link to ILLA Cloud">​</a></h2>
<p>如果您考虑构建以业务逻辑为导向的工具，并且只需要一个美观的用户界面，而不追求复杂的动画和花哨的页面，我们建议使用ILLA Cloud进行开发和构建。</p>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a> 是一个开箱即用的低代码工具，允许使用简单的JS快速构建内部工具，无需创建新项目。</p>
<ul>
<li>Web和App管理面板</li>
<li>数据仪表板</li>
<li>定制的B2B工具</li>
<li>CRM</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-citizen-developer-tool/illa.png" alt="illa" class="img_CfaS"></p>
<p>ILLA Cloud允许您通过拖放快速构建工具，无需编写代码，提高工作效率达到10倍。它还原生支持团队协作，允许您和您的同事一起编辑和构建。</p>
<p>ILLA Cloud还具有连接器功能，可以快速连接到您使用的其他SaaS工具。它支持定时任务、Webhooks、参数传递等功能。</p>
<p>ILLA Cloud还包括AI代理功能，帮助您快速构建基于AI的工具，如文本分析、语音分析、图像分析等。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/agent.png" alt="agent" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="linear">Linear<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#linear" class="hash-link" aria-label="Direct link to Linear" title="Direct link to Linear">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/linear.png" alt="linear" class="img_CfaS"></p>
<p>Linear是一个项目管理工具，有助于简化软件项目、迭代、任务和缺陷跟踪。它是为高绩效团队构建的简单、快速、强大的工具。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优点">优点<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E4%BC%98%E7%82%B9" class="hash-link" aria-label="Direct link to 优点" title="Direct link to 优点">​</a></h3>
<ol>
<li>
<p><strong>简化项目管理</strong>：Linear专注于简化软件项目，提供用户友好的界面，简化复杂的项目管理任务，使团队更容易实现项目目标和截止日期。</p>
</li>
<li>
<p><strong>高效的迭代和任务管理</strong>：具有专门用于管理迭代和任务的功能，Linear可能提供了有效的敏捷方法工具，促进更好的计划、跟踪和执行软件开发周期。</p>
</li>
<li>
<p><strong>有效的缺陷跟踪</strong>：强调缺陷跟踪表明，Linear提供了强大的工具，用于识别、记录和解决软件缺陷，这对于维护软件质量和可靠性至关重要。</p>
</li>
<li>
<p><strong>速度和简单性</strong>：被描述为简单和快速，Linear可能提供了快速设置和易用性，对于希望在不陡峭的学习曲线下实施工具的团队尤其有益。</p>
</li>
<li>
<p><strong>适用于高绩效团队</strong>：专为高绩效团队设计，Linear可能经过优化，以支持团队管理复杂项目而不降低性能。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点">缺点<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to 缺点" title="Direct link to 缺点">​</a></h3>
<ol>
<li>
<p><strong>潜在的过度简化</strong>：虽然简单性是一个优点，但这也可能意味着Linear缺乏一些大型或复杂项目所需的高级功能，可能会限制其对某些专业应用的实用性。</p>
</li>
<li>
<p><strong>专注于软件项目</strong>：Linear特定于软件项目的关注表明，它可能不太适合其他类型的项目管理，限制了其在非软件团队中的多功能性。</p>
</li>
<li>
<p><strong>新用户的学习曲线</strong>：尽管它简单，但新用户，尤其是不熟悉敏捷方法的用户，可能仍然需要一些时间来理解如何最好地利用该工具来满足其特定需求。</p>
</li>
<li>
<p><strong>有限的自定义选项</strong>：快速而简单的工具有时提供有限的自定义选项，可能无法满足需要高度定制的项目管理解决方案的团队的需求。</p>
</li>
<li>
<p><strong>依赖团队纪律</strong>：任何项目管理工具的有效性，包括Linear，通常取决于团队在一致正确地使用工具方面的纪律 ，这在某些组织文化中可能会成为挑战。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="gitlab">Gitlab<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#gitlab" class="hash-link" aria-label="Direct link to Gitlab" title="Direct link to Gitlab">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/gitlab.png" alt="gitlab" class="img_CfaS"></p>
<p>GitLab是一个完整的DevOps平台，作为一个单一的应用程序交付。它使并发的DevOps能够使软件生命周期快200%，从而显著提高了业务速度。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优点-1">优点<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E4%BC%98%E7%82%B9-1" class="hash-link" aria-label="Direct link to 优点" title="Direct link to 优点">​</a></h3>
<ol>
<li>
<p><strong>集成的DevOps工作流程</strong>：作为提供完整DevOps解决方案的单一应用程序，GitLab为软件开发的所有阶段提供了一个集成的环境，从计划到监控，这可以极大地简化工作流程。</p>
</li>
<li>
<p><strong>提高效率</strong>：GitLab对并发的DevOps的重视意味着它支持在开发周期中同时执行操作，这可以导致软件生命周期加快200%，从而加快业务速度。</p>
</li>
<li>
<p><strong>一站式平台</strong>：该平台的一站式性质意味着团队可以避免集成多个独立工具的麻烦，这可以减少复杂性和潜在的兼容性问题。</p>
</li>
<li>
<p><strong>简化的协作</strong>：GitLab可能通过为代码仓库、问题跟踪、CI/CD等提供统一平台来促进团队成员之间更好的协作，这可以提高团队合作和生产力。</p>
</li>
<li>
<p><strong>可见性和透明度</strong>：将DevOps周期的所有方面放在一个地方可以提供更好的可见性和透明度，从而更好地支持基于信息的决策。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-1">缺点<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E7%BC%BA%E7%82%B9-1" class="hash-link" aria-label="Direct link to 缺点" title="Direct link to 缺点">​</a></h3>
<ol>
<li>
<p><strong>学习曲线</strong>：GitLab的全面性质可能对那些不习惯使用如此全面的平台或从较简单的工具过渡的团队来说，学习曲线可能会很陡峭。</p>
</li>
<li>
<p><strong>资源消耗</strong>：由于其广泛的功能，GitLab可能需要大量服务器资源，这对于规模较小的组织或拥有有限IT基础设施的团队来说可能是一个挑战。</p>
</li>
<li>
<p><strong>对小型项目来说可能过于庞大</strong>：对于小型项目或团队来说，GitLab的广泛功能可能超出了所需的范围，可能导致对平台的未充分利用。</p>
</li>
<li>
<p><strong>潜在的供应商锁定</strong>：依赖于一个单一平台来满足所有DevOps需求可能会导致供应商锁定，团队可能会在未来决定切换到另一个工具时面临挑战。</p>
</li>
<li>
<p><strong>成本考虑</strong>：虽然GitLab提供各种各样的计划，包括免费层，但更高级的功能通常包括在他们的付费计划中，这对一些组织来说可能是一个重大开支。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="notion">Notion<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#notion" class="hash-link" aria-label="Direct link to Notion" title="Direct link to Notion">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/notion.png" alt="notion" class="img_CfaS"></p>
<p>Notion是一个适用于笔记、任务、维基和数据库的一站式工作区。它是一个简单、快速且功能强大的工具，专为高性能团队打造。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优点-2">优点<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E4%BC%98%E7%82%B9-2" class="hash-link" aria-label="Direct link to 优点" title="Direct link to 优点">​</a></h3>
<ol>
<li>
<p><strong>多功能性</strong>：作为一个一站式工作区，Notion提供了一个多功能平台，您可以在其中管理各种内容类型，如笔记、任务、维基和数据库。这种多功能性可以在一个应用程序内简化不同工作方面。</p>
</li>
<li>
<p><strong>易用性</strong>：Notion被描述为简单和快速，很可能具有用户友好的界面，可以快速采用和使用。这可以减少学习曲线并提高生产力。</p>
</li>
<li>
<p><strong>可定制性</strong>：Notion的平台通常允许高度定制，使用户能够根据其特定的工作流需求进行定制，无论是个人使用还是团队协作。</p>
</li>
<li>
<p><strong>协作功能</strong>：由于专为高性能团队而建，Notion预计具有强大的协作功能，促进有效的团队合作、信息共享和项目管理。</p>
</li>
<li>
<p><strong>集成能力</strong>：Notion通常与其他工具很好地集成，这对于使用各种应用程序和服务的团队是有益的。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-2">缺点<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E7%BC%BA%E7%82%B9-2" class="hash-link" aria-label="Direct link to 缺点" title="Direct link to 缺点">​</a></h3>
<ol>
<li>
<p><strong>对新用户来说可能过于庞大</strong>：Notion中的大量功能和定制选项可能对新用户来说过于庞大，特别是那些寻求更简单的即插即用解决方案的用户。</p>
</li>
<li>
<p><strong>离线功能有限</strong>：在离线时，Notion的功能可能受到限制，这对需要在网络连接不佳或没有网络连接的区域访问其工作区的用户可能是一个缺点。</p>
</li>
<li>
<p><strong>处理大型数据库时可能存在性能问题</strong>：随着数据库规模的增长，一些用户报告了Notion的性能问题，如加载时间较慢和延迟，这可能会影响效率。</p>
</li>
<li>
<p><strong>导出选项有限</strong>：虽然Notion非常适合积累和组织信息，但将这些数据从Notion导出有时可能会有挑战，可能会导致数据可移植性问题。</p>
</li>
<li>
<p><strong>高级功能的成本因素</strong>：虽然Notion提供免费层，但更高级的功能和更大的使用限制通常需要通过他们的付费计划来获得，这对于注重预算的个人或小团队来说可能是一个考虑因素。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-flow">ILLA Flow<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#illa-flow" class="hash-link" aria-label="Direct link to ILLA Flow" title="Direct link to ILLA Flow">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/connector.png" alt="connector" class="img_CfaS"></p>
<p>ILLA Flow是一个低代码工作流工具，可帮助您自动化业务流程。它是一个简单、快速且功能强大的工具，专为高性能团队打造。</p>
<p>您可以通过拖放界面构建自己的工作流程，然后通过调度触发器或Webhook触发器执行您的工作流程。</p>
<p>流畅的拖放体验使您能够快速构建工作流程，而无需担心任何集成问题。整个系统由JavaScript驱动，确保灵活性，同时也方便开发人员使用。</p>
<p>ILLA Flow支持多种触发器类型，包括定期触发器和Webhook触发器。</p>
<p>我们使用ILLA Flow来执行许多任务，例如：</p>
<ul>
<li>当新用户注册时向Slack发送消息</li>
<li>每天报告GitHub上的星星数量</li>
<li>每天预订一个会议室</li>
<li>......</li>
</ul>
<p>我们的工程师使用ILLA Flow来自动执行许多任务，例如：</p>
<ul>
<li>从数据库中读取一些业务数据，每天发送到Slack</li>
<li>构建CI/CD报告系统</li>
<li>在出现警告时发送电子邮件</li>
<li>......</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/it-support#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>对于IT支持而言，简单易用的工具对于提高工作效率至关重要。选择适合您需求的正确工具至关重要。希望每个人都能找到有用的工具，成为出色的IT支持。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="工作流程" term="工作流程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年市民开发者的最佳工具]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool"/>
        <updated>2024-01-23T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[在最近几十年里，应用程序开发一直是IT程序员的专属领域，但这可能在未来会有所改变！]]></summary>
        <content type="html"><![CDATA[<p>在最近几十年里，应用程序开发一直是IT程序员的专属领域，但这可能在未来会有所改变！</p>
<p>考虑到日益竞争激烈的业务需求，企业唯一的发展途径是提高业务能力，加快交付速度，而不产生额外成本。</p>
<p>为了解决企业面临的数字挑战，市民开发（CD）为非技术性的业务用户（也被称为市民开发者）铺平了道路。使用经IT批准的低代码/无代码（LCNC）平台，可以在高效、灵活和用户友好的环境中直观地构建企业应用程序。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="市民开发的价值">市民开发的价值<a href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool#%E5%B8%82%E6%B0%91%E5%BC%80%E5%8F%91%E7%9A%84%E4%BB%B7%E5%80%BC" class="hash-link" aria-label="Direct link to 市民开发的价值" title="Direct link to 市民开发的价值">​</a></h2>
<p>根据项目管理协会（PMI）的说法，市民开发将成为这一新常态的颠覆者，许多低代码/无代码平台已经向客户和合作伙伴展示了这一点。在实际应用中，LCNC已经证明了其在最小成本下显著降低应用程序开发复杂性的能力。到目前为止，许多组织已经开始在其业务运营中采用市民开发，以刺激快速变革，并在社区中创造独特的足迹，从而提高整体生产力。特别是在今天的数字领域，低代码/无代码在帮助企业利用这个新数字空间提供的无限潜力并轻松引发创新方面发挥着关键作用。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="推荐的工具">推荐的工具<a href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool#%E6%8E%A8%E8%8D%90%E7%9A%84%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to 推荐的工具" title="Direct link to 推荐的工具">​</a></h2>
<p>作为具有基本计算机技能的市民开发者，您需要各种工具来协助您的工作。以下是一些推荐的工具，可提高您的工作效率。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool#illa-cloud" class="hash-link" aria-label="Direct link to ILLA Cloud" title="Direct link to ILLA Cloud">​</a></h3>
<p>如果您考虑构建以业务逻辑为导向的工具，只需一个漂亮的UI，而无需追求复杂的动画和华丽的页面，那么建议使用ILLA Cloud进行开发和构建。</p>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>是一个开箱即用的低代码工具，允许快速构建内部工具，使用简单的JS，无需创建新项目。</p>
<ul>
<li>网页和应用管理面板</li>
<li>数据仪表板</li>
<li>定制的B2B工具</li>
<li>客户关系管理（CRM）</li>
</ul>
<p>ILLA Cloud允许您通过拖放方式快速构建工具，无需编写代码，将您的工作效率提高了10倍。它还原生支持团队协作，允许您和您的同事一起编辑和构建。</p>
<p>ILLA Cloud还具有连接器功能，可以快速连接到您使用的其他SaaS工具。它支持定期任务、Webhooks、参数传递等功能。</p>
<p>ILLA Cloud还包括AI代理功能，帮助您快速构建基于人工智能的工具，例如文本分析、语音分析、图像分析等。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="webflow">Webflow<a href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool#webflow" class="hash-link" aria-label="Direct link to Webflow" title="Direct link to Webflow">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-citizen-developer-tool/webflow.png" alt="webflow" class="img_CfaS"></p>
<p>如果您考虑构建用户界面要求高、寻求复杂动画和炫酷页面的工具，建议使用Webflow进行开发和构建。</p>
<p>Webflow自然支持多种动画功能和强大的UI配置，允许您在很短的时间内构建令人惊叹的页面。它还原生适应移动设备。</p>
<p>Webflow社区拥有大量支持各种业务需求的模板，如电子商务、博客、企业网站等。</p>
<p>Webflow还包括用于管理网站访问者的CRM后端，无需进行基本管理任务的二次开发，从而实现快速使用。</p>
<p>当然，Webflow还支持无运营成本的托管服务。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="supabase">Supabase<a href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool#supabase" class="hash-link" aria-label="Direct link to Supabase" title="Direct link to Supabase">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-citizen-developer-tool/supabase.png" alt="supabase" class="img_CfaS"></p>
<p>当您已经构建了在线站点时，您将使用Webflow处理用户界面部分，使用ILLA Cloud处理内部工具。但是，您仍然缺少一个重要的部分。</p>
<p>在您的业务开发中需要一个存储数据的地方。</p>
<p>建议使用Supabase进行存储，它具有以下优点：</p>
<ul>
<li>面向开发者友好，满足超复杂和简单的业务需求。</li>
<li>可扩展性强，随着业务的发展而动态扩展，因此无需担心由于业务快速增长而引起的技术问题。</li>
<li>支持各种SDK，以与不同技术兼容。</li>
<li>使用SQL进行简单数据操作非常容易，因为Supabase基于PostgreSQL，可以进行快速数据操作。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/best-citizen-developer-tool#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>对于市民开发者来说，简单易用的工具是提高工作效率的关键。选择适合您需求的正确工具非</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="市民开发者" term="市民开发者"/>
        <category label="市民开发" term="市民开发"/>
        <category label="市民开发者工具" term="市民开发者工具"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Appsmith vs Retool: 哪个开源低代码平台更好？]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool"/>
        <updated>2024-01-23T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[在不断发展的低代码开发平台领域，Appsmith 和 Retool 已经崭露头角，它们分别提供独特的功能和能力。这些平台旨在简化应用程序开发，并使组织能够高效构建定制的内部工具。在这个全面的比较中，我们将探讨这两个平台的优点和缺点，并介绍一款顶级替代品，ILLA Cloud，以帮助您为您的低代码开发需求做出明智的选择。]]></summary>
        <content type="html"><![CDATA[<p>在不断发展的低代码开发平台领域，Appsmith 和 Retool 已经崭露头角，它们分别提供独特的功能和能力。这些平台旨在简化应用程序开发，并使组织能够高效构建定制的内部工具。在这个全面的比较中，我们将探讨这两个平台的优点和缺点，并介绍一款顶级替代品，ILLA Cloud，以帮助您为您的低代码开发需求做出明智的选择。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud-最佳软件开发工具">ILLA Cloud: 最佳软件开发工具<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#illa-cloud-%E6%9C%80%E4%BD%B3%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to ILLA Cloud: 最佳软件开发工具" title="Direct link to ILLA Cloud: 最佳软件开发工具">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a> 是一个开箱即用的低代码工具，可以使用简单的JS快速构建内部工具，无需创建新项目。</p>
<ul>
<li>Web 和应用程序管理面板</li>
<li>数据仪表板</li>
<li>定制的B2B工具</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/illa.png" alt="illa" class="img_CfaS"></p>
<p>与使用组件库构建相比，ILLA Cloud 可以实现 10 倍更快的工具构建，并支持团队内的协作编辑。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith">Appsmith<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#appsmith" class="hash-link" aria-label="Direct link to Appsmith" title="Direct link to Appsmith">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/appsmith.png" alt="appsmith" class="img_CfaS"></p>
<p>Appsmith 是一个总部位于印度的开源平台，在低代码开发领域迅速获得了认可。它在很多方面都与 Retool 应用程序构建器具有相同的功能，使其成为一位强大的竞争对手。然而，有必要深入了解使 Appsmith 与众不同的具体特点：</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith-的优点">Appsmith 的优点：<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#appsmith-%E7%9A%84%E4%BC%98%E7%82%B9" class="hash-link" aria-label="Direct link to Appsmith 的优点：" title="Direct link to Appsmith 的优点：">​</a></h3>
<ul>
<li>开源优势：Appsmith 是一个开源平台，为开发人员提供访问平台源代码的机会。这种开放性鼓励协作和定制，使其成为那些需要更多控制开发环境的人的首选。</li>
<li>云和本地部署：Appsmith 通过支持云和完全本地部署提供了灵活性。这种双重性使组织可以选择与其安全性和合规性要求相符的托管选项。</li>
<li>活跃的开发者社区：Appsmith 在 Github 等平台上拥有不断增长的开发者社区。这种社区支持导致持续改进、及时的错误修复和新功能的开发，确保平台保持与用户需求的同步。</li>
<li>广泛的集成选项：Appsmith 可以与各种数据库和API进行集成，使企业能够无缝连接到其数据源。这种多功能性确保您的应用程序可以与必要的数据资源互动。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith-的缺点">Appsmith 的缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#appsmith-%E7%9A%84%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to Appsmith 的缺点：" title="Direct link to Appsmith 的缺点：">​</a></h3>
<p>缺乏自动化工作流程：一个明显的限制是 Appsmith 不支持自动化工作流程或计划任务。对于需要在其内部工具中进行复杂自动化流程的组织来说，这可能是一个不足之处。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool-内部工具领域的先驱">Retool: 内部工具领域的先驱<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#retool-%E5%86%85%E9%83%A8%E5%B7%A5%E5%85%B7%E9%A2%86%E5%9F%9F%E7%9A%84%E5%85%88%E9%A9%B1" class="hash-link" aria-label="Direct link to Retool: 内部工具领域的先驱" title="Direct link to Retool: 内部工具领域的先驱">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/retool.png" alt="retool" class="img_CfaS"></p>
<p>Retool 是一个广受欢迎的开发平台，用于创建定制的内部软件。它提供了直观的拖放应用程序构建器和一组预构建的UI组件库。然而，有必要了解其优点和不足之处：</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool-的优点">Retool 的优点：<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#retool-%E7%9A%84%E4%BC%98%E7%82%B9" class="hash-link" aria-label="Direct link to Retool 的优点：" title="Direct link to Retool 的优点：">​</a></h3>
<ul>
<li>拖放应用程序构建器：Retool 提供直观的拖放应用程序构建器，使技术水平不同的用户都能轻松使用。</li>
<li>集成库：通过广泛的集成库，Retool 简化了连接到数据库和API的过程，允许企业高效地访问和操作其数据。</li>
<li>细粒度权限：Retool 支持基于角色的访问控制，提供安全的环境，并确保用户对工具和数据有适当的访问权限。</li>
<li>企业功能：Retool 提供企业需求，包括单一登录（SSO）、审计日志记录和专门的企业支持。</li>
<li>本地移动应用程序：Retool Mobile 在 Retool 环境内提供了专门的解决方案，用于构建原生的iOS和Android移动应用程序。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool-的缺点">Retool 的缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#retool-%E7%9A%84%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to Retool 的缺点：" title="Direct link to Retool 的缺点：">​</a></h3>
<ul>
<li>代码的可扩展性有限：Retool 的代码可扩展性受到限制，主要支持 JavaScript。这可能对需要更多多样化编码选项的开发人员构成挑战。</li>
<li>性能较差：用户经常报告 Retool 应用程序</li>
</ul>
<p>的性能问题，原因包括基于浏览器的代码执行、单步查询和缺乏全局边缘缓存。</p>
<ul>
<li>工作流和计划任务有限：Retool 的工作流功能仍处于测试阶段，功能不完整。此外，它仅在 Retool Cloud 上可用，限制了自托管客户的访问。</li>
<li>仅支持 SQL 的生成AI：Retool 的生成AI功能仅支持 SQL，可能不能完全满足开发人员在不同语言和用例中的代码生成和优化需求。</li>
<li>传统的本地部署模式：Retool 的本地部署模式资源密集，使企业难以维护和更新。这可能会将资源从工具开发中转移。</li>
<li>昂贵的定价：Retool 采用不灵活的定价模型，附加了高昂的平台费用，对许多组织来说昂贵。</li>
<li>新功能的推出速度较慢：新功能有时推出速度较慢，特别是对于自托管客户来说，这会导致利用最新技术的延迟。</li>
<li>闭源代码：Retool 是闭源的，限制了代码审计和可扩展性选项。</li>
<li>仅支持美国云：Retool Cloud 托管在美国，这可能导致位于美国以外的用户和数据中心性能下降。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud-提供最佳解决方案">ILLA Cloud 提供最佳解决方案<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#illa-cloud-%E6%8F%90%E4%BE%9B%E6%9C%80%E4%BD%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" class="hash-link" aria-label="Direct link to ILLA Cloud 提供最佳解决方案" title="Direct link to ILLA Cloud 提供最佳解决方案">​</a></h2>
<p>ILLA 是内部工具开发的最快平台之一。它为开发人员节省了在网站设计和其他工作方面的宝贵时间。开发人员越来越倾向于选择 ILLA 的主要原因之一是其库。该平台已经构建了丰富的代码组件集合，您可以简单地拖放并在几分钟内构建复杂的应用程序。</p>
<p>您还可以使用应用程序编程接口将 ILLA 与您选择的数据库连接起来。该平台可以卓越地将后端和前端数据整合在一起。因此，开发人员可以通过基本的数据调用实现广泛的信息互动。</p>
<p>任何开发人员都会喜欢 ILLA，原因有两点-自由和与其他开发人员同时工作的机会。首先，开发人员可以随时在任何地方编写 JavaScript。这允许在他们的工作中获得更大的灵活性和更多的结果多样性。</p>
<p>其次，开发人员可以在 ILLA Builder 中与其他专业人士实时共享链接。因此，他们可以在一起编辑和评论彼此的工作。换句话说，开发人员可以在一个有趣和协作的工作空间中工作。当然，这会产生更快和更好的结果。</p>
<p>最后，开发人员在使用 ILLA 云时可以随时携带他们的工作。只需单击任何设备上的一个按钮，即可访问云并进入 ILLA 的用户界面。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa-的关键特点">ILLA 的关键特点<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#illa-%E7%9A%84%E5%85%B3%E9%94%AE%E7%89%B9%E7%82%B9" class="hash-link" aria-label="Direct link to ILLA 的关键特点" title="Direct link to ILLA 的关键特点">​</a></h3>
<p>以下是您必须了解的 ILLA 的关键特点：</p>
<ul>
<li>ILLA 具有用于 React 组件的即用型库。</li>
<li>令人惊奇的是，ILLA 设计工具具有 TypeScript 类型功能，并支持可预测的静态类型。</li>
<li>ILLA Design 提供了快速且简便的导入，有助于提高开发人员的生产力。</li>
<li>您可以访问精美设计的强大主题和组件。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="升级版的-illa-特性">升级版的 ILLA 特性<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#%E5%8D%87%E7%BA%A7%E7%89%88%E7%9A%84-illa-%E7%89%B9%E6%80%A7" class="hash-link" aria-label="Direct link to 升级版的 ILLA 特性" title="Direct link to 升级版的 ILLA 特性">​</a></h3>
<p>以下是一些升级版的 ILLA 特性，您必须了解：</p>
<ul>
<li>与任何数据源的快速集成</li>
<li>您可以将 ILLA 连接到任何主流数据库或其他数据源。此工具允许您使用前端组件从后端获取数据。</li>
<li>实时协作以增强效率</li>
<li>ILLA Builder 允许开发人员协作处理项目。他们可以创建和分享链接给不同的开发人员，以共同编辑其工具，并与其他团队成员实时通信。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="响应式ui库以满足您的需求">响应式UI库以满足您的需求<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#%E5%93%8D%E5%BA%94%E5%BC%8Fui%E5%BA%93%E4%BB%A5%E6%BB%A1%E8%B6%B3%E6%82%A8%E7%9A%84%E9%9C%80%E6%B1%82" class="hash-link" aria-label="Direct link to 响应式UI库以满足您的需求" title="Direct link to 响应式UI库以满足您的需求">​</a></h3>
<p>ILLA Builder 还具有众多组件，以有效满足每位开发人员的需求。因此，开发人员可以访问拖放构建器，快速开发其所需的内部工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/appsmith-vs-retool#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>总之，Retool 和 Appsmith 都是出色的低代码平台，可以帮助您快速高效地构建应用程序。然而，它们各自都有其优点和不足之处，因此在决定哪个适合您之前，考虑您的需求非常重要。如果您想要一个具有强大管理功能的更加亲手操作的平台，那么 Tooljet 可能更适合您。另一方面，如果您想要一个不需要任何编码经验的用户友好型平台，那么 Appsmith 可能更适合您。最终，一切都取决于您是哪种类型的开发人员以及您想要构建哪种类型的应用程序。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="tooljet" term="tooljet"/>
        <category label="appsmith" term="appsmith"/>
        <category label="retool" term="retool"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tooljet vs. Appsmith: 开源低代码平台，哪个更优秀？]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith"/>
        <updated>2024-01-23T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[如果您考虑使用低代码开发平台，可能会疑惑在Tooljet和Appsmith之间选择哪个作为候选项。虽然两者都是提供不同功能的开源平台，但它们各自都有独特的优势和不足。本博客文章将比较Tooljet和Appsmith，帮助您选择符合您需求的选项。]]></summary>
        <content type="html"><![CDATA[<p>如果您正在考虑使用低代码开发平台，可能会疑惑在Tooljet和Appsmith之间选择哪个作为候选项。虽然两者都是提供不同功能的开源平台，但它们各自都有独特的优势和不足。本博客文章将比较Tooljet和Appsmith，帮助您选择符合您需求的选项。</p>
<p>Tooljet适合喜欢使用可视化元素和拖放工具的人们。使用其用户界面，您可以轻松选择各种组件并拖放以快速创建应用程序，因此您可以从头开始迅速构建应用程序。此外，Tooljet还提供了强大的管理功能，可实时与其他用户协作并监控项目进展。</p>
<p>Appsmith适合希望在应用程序中添加更多控制的开发者。它提供了广泛的功能，如API集成、触发器、脚本等，可以为应用程序添加复杂功能。此外，Appsmith还配备了直观的代码编辑器，可以轻松编写自定义代码，如果需要的话。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud最优秀的软件开发工具">ILLA Cloud：最优秀的软件开发工具<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#illa-cloud%E6%9C%80%E4%BC%98%E7%A7%80%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to ILLA Cloud：最优秀的软件开发工具" title="Direct link to ILLA Cloud：最优秀的软件开发工具">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>是一个即时可用的低代码工具，可以快速创建内部工具，无需创建新项目或编写大量代码。</p>
<ul>
<li>管理Web和应用程序面板</li>
<li>数据仪表板</li>
<li>可定制的B2B工具</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/illa.png" alt="illa" class="img_CfaS"></p>
<p>与使用组件库进行开发相比，ILLA Cloud支持团队协作，可以更快地创建工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet和appsmith是两个受欢迎的软件开发工具">Tooljet和Appsmith是两个受欢迎的软件开发工具。<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#tooljet%E5%92%8Cappsmith%E6%98%AF%E4%B8%A4%E4%B8%AA%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to Tooljet和Appsmith是两个受欢迎的软件开发工具。" title="Direct link to Tooljet和Appsmith是两个受欢迎的软件开发工具。">​</a></h2>
<p>Tooljet和Appsmith都是功能强大的软件开发工具，可以快速高效地创建应用程序，借助数据源。这两个工具都使用直观的拖放元素、代码工具、数据连接和可视化开发流程来优化业务流程管理。</p>
<p>由于其广泛的功能集，Tooljet和Appsmith已经成功地为许多开发人员带来了成功，并在短时间内持续开发数据驱动的应用程序。它们多次证明对于那些希望在几个步骤内创建高度数据驱动的应用程序，而无需编程技能的软件开发人员来说是不可或缺的工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet---适合想要更多控制的项目">Tooljet - 适合想要更多控制的项目<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#tooljet---%E9%80%82%E5%90%88%E6%83%B3%E8%A6%81%E6%9B%B4%E5%A4%9A%E6%8E%A7%E5%88%B6%E7%9A%84%E9%A1%B9%E7%9B%AE" class="hash-link" aria-label="Direct link to Tooljet - 适合想要更多控制的项目" title="Direct link to Tooljet - 适合想要更多控制的项目">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/tooljet.png" alt="tooljet" class="img_CfaS"></p>
<p>Tooljet和Appsmith都是强大的工具，可用于快速开发应用程序的市民开发者。Tooljet提供了更实用的方法，使业务用户能够具备创建具有自定义UI组件的完整管理面板所需的控制权。</p>
<p>这个直观的用户界面为用户提供了使用拖放工具、可视元素和数据源来设计、开发和管理应用程序的方式，使创建应用程序变得简单。除易用的用户界面外，Tooljet还提供了实时协作、全面的项目管理功能以及集成组件等强大功能。</p>
<p>借助这个丰富的功能集，开发人员可以在不担心编码的情况下快速创建应用程序。Tooljet支持多种编程语言，包括Java、JavaScript、Python、Ruby等，为创建自定义应用程序提供了更大的灵活性。此外，Tooljet还提供丰富的文档，以满足需要在项目中工作时获得额外支持的用户的需求。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet的优点">Tooljet的优点：<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#tooljet%E7%9A%84%E4%BC%98%E7%82%B9" class="hash-link" aria-label="Direct link to Tooljet的优点：" title="Direct link to Tooljet的优点：">​</a></h3>
<ul>
<li>使用拖放工具快速创建应用程序的直观易用用户界面</li>
<li>强大的管理功能，实时协作和监控项目进展</li>
<li>集成分析和报告工具，用于衡量应用程序性能、使用情况和可靠性</li>
<li>支持Webhooks、API集成以及处理额外复杂性的自定义代码的功能丰富平台</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet的缺点">Tooljet的缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#tooljet%E7%9A%84%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to Tooljet的缺点：" title="Direct link to Tooljet的缺点：">​</a></h3>
<ul>
<li>仅凭视觉方法解决问题可能需要对基本代码有一定了解</li>
<li>视觉元素受到限制，可能不提供足够的灵活性用于更复杂的项目</li>
<li>对第三方集成的支持有限，可能限制特定应用程序的用例</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith---用户友好型">Appsmith - 用户友好型<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#appsmith---%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E5%9E%8B" class="hash-link" aria-label="Direct link to Appsmith - 用户友好型" title="Direct link to Appsmith - 用户友好型">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/appsmith.png" alt="appsmith" class="img_CfaS"></p>
<p>Appsmith适合那些希望创建应用程序但无需编程经验的人。它是一款直观且易于使用的低代码平台，可使无需技术知识的用户快速创建数据驱动的应用程序。使用简单的拖放用户界面，您可以轻松创建自定义UI组件，并使用全面的项目管理功能来管理项目。</p>
<p>Appsmith还提供高级的安全功能，如基于角色的访问控制，确保只有授权的人员才能访问机密信息。此外，Appsmith可以无缝集成第三方服务，支持Webhooks、API集成和自定义代码，是创建坚固应用程序的出色选择，无需编程。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith的优点">Appsmith的优点：<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#appsmith%E7%9A%84%E4%BC%98%E7%82%B9" class="hash-link" aria-label="Direct link to Appsmith的优点：" title="Direct link to Appsmith的优点：">​</a></h3>
<ul>
<li>具备高级自定义功能，允许开发人员轻松添加复杂功能到应用程序中</li>
<li>直观的代码编辑器，可轻松编写自定义代码</li>
<li>支持多种编程语言，如JavaScript、HTML5、CSS3、TypeScript等</li>
<li>灵活的API集成，可以快速安全地集成各种服务</li>
<li>提供各种预定义模板和组件，可轻松从头开始创建新应用程序</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith的缺点">Appsmith的缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#appsmith%E7%9A%84%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to Appsmith的缺点：" title="Direct link to Appsmith的缺点：">​</a></h3>
<ul>
<li>相对于其他低代码平台，用户友好性不如其他平台，可能对某些用户的实用性有限</li>
<li>对代码的更改可能需要一些工作，每次更改都需要手动调整</li>
<li>价格相对较高，可能不适合某些预算</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud提供了两者的优势">ILLA Cloud提供了两者的优势<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#illa-cloud%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%A4%E8%80%85%E7%9A%84%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="Direct link to ILLA Cloud提供了两者的优势" title="Direct link to ILLA Cloud提供了两者的优势">​</a></h2>
<p>ILLA是内部工具开发中最快速的平台之一。 ILLA可以节省开发人员宝贵的时间，而无需创建新项目或编写大量代码，可用于Web设计和其他任务。开发人员选择ILLA的一个主要原因是其库。该平台拥有丰富的代码组件集合，可以轻松拖放并在几分钟内创建复杂的应用程序。</p>
<p>此外，您还可以使用API连接所选数据库与ILLA。该平台可以优秀地集成后端和前端数据，使开发人员能够以出色的方式提供简单的数据调用。</p>
<p>每个开发人员都有两个原因喜欢ILLA：自由和与其他开发人员同时工作的机会。首先，开发人员可以在任何地方编写JavaScript，从而提高了工作的灵活性并实现了多样化的结果。</p>
<p>其次，在ILLA Builder内，开发人员可以与其他专业人员实时共享链接。这使得他们可以在进行工作时编辑和评论项目。这意味着开发人员可以在有趣的共同工作空间中快乐地合作。当然，这将带来更快速和更好的结果。</p>
<p>最后，开发人员可以在使用ILLA Cloud时随时工作。只需点击一下，即可从任何设备访问云，并进入ILLA的用户界面。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa的主要特点">ILLA的主要特点<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#illa%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9" class="hash-link" aria-label="Direct link to ILLA的主要特点" title="Direct link to ILLA的主要特点">​</a></h3>
<p>以下是ILLA的主要特点：</p>
<ul>
<li>ILLA具有立即可用的React组件库。</li>
<li>最令人惊讶的是，ILLA设计工具支持TypeScript的类型化功能和可预测的静态类型。</li>
<li>ILLA Design提供了一种迅速简单的导入功能，可提高开发人员的生产力。</li>
<li>提供了精美设计的强大主题和组件。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="更新的illa功能">更新的ILLA功能<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#%E6%9B%B4%E6%96%B0%E7%9A%84illa%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="Direct link to 更新的ILLA功能" title="Direct link to 更新的ILLA功能">​</a></h3>
<p>以下是一些更新的ILLA功能：</p>
<ul>
<li>快速与任何数据源集成</li>
<li>您可以使用ILLA轻松快速连接到常见数据库或其他数据源。使用此工具，您可以从后端获取数据并使用前端组件。</li>
<li>实时协作以提高效率</li>
<li>使用ILLA Builder，开发人员可以协作于项目中。通过创建和共享链接到不同开发人员，可以共同编辑工具，并实时与其他团队成员进行通信。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="响应式ui库满足您的需求">响应式UI库，满足您的需求<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#%E5%93%8D%E5%BA%94%E5%BC%8Fui%E5%BA%93%E6%BB%A1%E8%B6%B3%E6%82%A8%E7%9A%84%E9%9C%80%E6%B1%82" class="hash-link" aria-label="Direct link to 响应式UI库，满足您的需求" title="Direct link to 响应式UI库，满足您的需求">​</a></h3>
<p>ILLA Builder拥有多种组件，可以高效满足各种开发人员的需求。因此，开发人员可以轻松使用拖放构建器访问所需的内部工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-appsmith#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>总之，Tooljet和Appsmith都是出色的低代码平台，可以帮助您快速高效地创建应用程序。但是，由于它们各自具有独特的优势和不足，因此在选择之前考虑自己的需求至关重要。如果您希望更具实用性和强大的管理功能，那么Tooljet可能更适合您。另一方面，如果您希望使用无需编程技能的用户友好型平台，那么Appsmith可能更适合您。最终，选择取决于您是什么样的开发人员以及您想创建什么样的应用程序。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="tooljet" term="tooljet"/>
        <category label="appsmith" term="appsmith"/>
        <category label="retool" term="retool"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tooljet vs Retool：哪个开源低代码平台更好？]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool"/>
        <updated>2024-01-23T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[对高效易用的内部工具的需求不断增长，低代码平台已成为企业简化内部流程的首选解决方案。]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_dXVO" id="介绍">介绍<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="Direct link to 介绍" title="Direct link to 介绍">​</a></h2>
<p>对高效易用的内部工具的需求不断增长，低代码平台已成为企业简化内部流程的首选解决方案。Retool 和 Tooljet 是两个受欢迎的低代码平台，因其轻松构建内部工具的能力而备受关注。在本博客中，我们将比较 Retool 和 Tooljet，探讨它们的关键功能、用例和性能，并介绍 ILLA Cloud 作为应用开发和部署的支持平台。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud最佳软件开发工具">ILLA Cloud：最佳软件开发工具<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#illa-cloud%E6%9C%80%E4%BD%B3%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to ILLA Cloud：最佳软件开发工具" title="Direct link to ILLA Cloud：最佳软件开发工具">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a> 是一个开箱即用的低代码工具，允许使用简单的 JavaScript 快速构建内部工具，无需创建新项目。</p>
<ul>
<li>网页和应用管理面板</li>
<li>数据仪表盘</li>
<li>定制的 B2B 工具</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/illa.png" alt="illa" class="img_CfaS"></p>
<p>与使用组件库构建相比，ILLA Cloud 可以实现 10 倍更快的工具构建，并支持团队内的协作编辑。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#retool" class="hash-link" aria-label="Direct link to Retool" title="Direct link to Retool">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/retool.png" alt="retool" class="img_CfaS"></p>
<p>Retool 是一个广泛使用的低代码平台，可以轻松构建自定义的内部工具，包括 SQL GUI 和 Airtable 仪表板。借助其广泛的集成能力，Retool 允许用户连接各种数据库和 API，使其成为开发 Redis UI 和 Airtable 管理面板的热门选择。Retool 提供自托管和云端解决方案，适用于各种规模的企业，但一些用户可能会觉得 Retool 的定价有点高，这导致了对开源 Retool 替代方案的搜索。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool-的关键功能和用例">Retool 的关键功能和用例：<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#retool-%E7%9A%84%E5%85%B3%E9%94%AE%E5%8A%9F%E8%83%BD%E5%92%8C%E7%94%A8%E4%BE%8B" class="hash-link" aria-label="Direct link to Retool 的关键功能和用例：" title="Direct link to Retool 的关键功能和用例：">​</a></h3>
<ul>
<li>广泛的集成能力：Retool 支持各种数据库和 API，如 SQL、Redis 和 Airtable，使其成为开发 Redis UI、SQL GUI 和 Airtable 管理面板的热门选择。</li>
<li>用户界面和体验：Retool 提供拖放界面，使用户无需深入的编码知识即可构建内部工具。该平台还提供一系列预构建组件，如表格、表单和图表，以加快开发过程。</li>
<li>可定制性：通过 Retool 自定义组件，用户可以创建符合其特定需求的定制解决方案。这个功能允许更灵活地控制内部工具的外观和功能。</li>
<li>安全性和合规性：Retool 提供强大的安全功能，包括基于角色的访问控制、审计日志和单一登录 (SSO)。除了云端解决方案外，Retool 的自托管和本地部署选项还能提供更多对数据和基础设施的控制。</li>
<li>定价：Retool 提供多种定价计划，但其相对较高的成本可能会导致一些用户寻找更经济实惠的开源 Retool 替代方案。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet">Tooljet<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#tooljet" class="hash-link" aria-label="Direct link to Tooljet" title="Direct link to Tooljet">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/tooljet.png" alt="tooljet" class="img_CfaS"></p>
<p>Tooljet 是另一个强大的低代码平台，允许用户快速构建和部署内部工具和软件。与 Retool 类似，Tooljet 提供了广泛的集成功能，使创建 Redis 和 MySQL 的 GUI，以及处理 Redis 查询变得容易。Tooljet 的开源性质使其成为寻找 Retool 替代方案的企业的吸引选择。除了易用性和可定制性外，Tooljet 还提供了一个安全和合规的开发内部工具环境，具有 SSO 和 Docker 支持等功能。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet-的关键功能和用例">Tooljet 的关键功能和用例：<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#tooljet-%E7%9A%84%E5%85%B3%E9%94%AE%E5%8A%9F%E8%83%BD%E5%92%8C%E7%94%A8%E4%BE%8B" class="hash-link" aria-label="Direct link to Tooljet 的关键功能和用例：" title="Direct link to Tooljet 的关键功能和用例：">​</a></h3>
<ul>
<li>集成能力：与 Retool 类似，Tooljet 提供广泛的集成功能，允许用户连接各种数据库和 API，如 SQL、Redis 和 Airtable。这使得创建 Redis 和 MySQL 的 GUI 以及处理 Redis 查询变得容易。</li>
<li>用户界面和体验：Tooljet 提供直观的界面，具有拖放构建器，使用户可以轻松创建和定制其内部工具。它还包括丰富的预构建组件库，以促进快速开发。</li>
<li>可定制性：Tooljet 的开源性质允许比 Retool 更大的定制和灵活性。用户可以修改源代码并为平台的开发做出贡献，确保其内部工具符合其独特的需求。</li>
<li>安全性和合规性：Tooljet 优先考虑安全性，提供了单一登录 (SSO)、Docker 支持和基于角色的访问控制等功能。这确保在使用 Tooljet 时您的内部工具保持安全和合规。</li>
<li>定价：Tooljet 的开源模式是免费使用和修改的，使其成为对 Retool 的更具吸引力和经济实惠的替代方案，特别是对于较小的企业或预算有限的企业。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="比较-retool-和-tooljet">比较 Retool 和 Tooljet<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#%E6%AF%94%E8%BE%83-retool-%E5%92%8C-tooljet" class="hash-link" aria-label="Direct link to 比较 Retool 和 Tooljet" title="Direct link to 比较 Retool 和 Tooljet">​</a></h2>
<p>在比较 Retool 和 Tooljet 时，涉及到几个关键因素：</p>
<ul>
<li>集成能力：两个平台都提供广泛的集成功能，允许用户连接各种数据库和 API，包括 SQL、Redis 和 Airtable。虽然两个平台在这个领域都表现出色，但您的选择可能取决于特定的集成需求或偏好。</li>
<li>用户界面和体验：Retool 和 Tooljet 都提供直观的拖放界面和预构建组件库，使用户能够轻松构建内部工具，如 Google 内部工具和 Airtable 仪表盘。个人偏好和易用性将在确定最适合您需求的选项时发挥作用。</li>
<li>可定制性：Retool 提供自定义组件，而 Tooljet 的开源性质允许更大的定制。在选择两者之间的平台时，考虑对内部工具所需的定制程度。</li>
<li>安全性和合规性：两个平台都优先考虑安全性，Retool 提供自托管和本地部署选项，而 Tooljet 提供单一登录 (SSO) 和 Docker 支持。在做出决策时，评估您组织特定的安全性和合规性要求。</li>
<li>定价：Retool 的定价可能对一些用户构成障碍，而 Tooljet 的开源模式可能比 Retool 的定价结构更具吸引力。考虑每个平台的长期成本，包括潜在的更新和维护费用。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="选择适合您需求的低代码平台">选择适合您需求的低代码平台<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E6%82%A8%E9%9C%80%E6%B1%82%E7%9A%84%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0" class="hash-link" aria-label="Direct link to ��选择适合您需求的低代码平台" title="Direct link to 选择适合您需求的低代码平台">​</a></h2>
<p>要在 Retool 和 Tooljet 之间进行选择，考虑以下因素：</p>
<ul>
<li>集成需求：两个平台都提供广泛的集成选项，因此您的选择可能取决于特定需求或偏好。评估哪个平台最好支持对您的内部工具至关重要的数据库和 API。</li>
<li>可定制性：如果自定义组件是首要考虑的因素，那么 Retool 可能是更好的选择。然而，如果您更喜欢具有更大灵活性的开源平台，那么 Tooljet 可能更适合。</li>
<li>安全性和合规性：Retool 和 Tooljet 都提供强大的安全功能，因此在做决定时请考虑您特定的合规性要求。评估哪个平台更符合您组织的安全政策和标准。</li>
<li>预算：如果您正在寻找经济实惠的解决方案，Tooljet 的开源模式可能比 Retool 的定价结构更吸引人。考虑每个平台的长期成本，包括潜在的更新和维护费用。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud-提供最佳的两全其美">ILLA Cloud 提供最佳的两全其美<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#illa-cloud-%E6%8F%90%E4%BE%9B%E6%9C%80%E4%BD%B3%E7%9A%84%E4%B8%A4%E5%85%A8%E5%85%B6%E7%BE%8E" class="hash-link" aria-label="Direct link to ILLA Cloud 提供最佳的两全其美" title="Direct link to ILLA Cloud 提供最佳的两全其美">​</a></h2>
<p>ILLA 是内部工具开发的最快平台之一。它可以为开发人员节省在网页设计和工作的其他方面的宝贵时间。开发人员越来越倾向选择 ILLA 的主要原因之一是其库。该平台提供了丰富的代码组件集合，您只需拖放即可在几分钟内构建复杂的应用程序。</p>
<p>您还可以使用应用程序编程接口将 ILLA 与您选择的数据库连接起来。该平台可以出色地将后端和前端数据集成在一起。因此，开发人员可以使用基本的数据调用实现广泛的信息交互。</p>
<p>任何开发人员都会喜欢 ILLA 的两个原因：自由和与其他开发人员同时工作的机会。首先，开发人员可以随心所欲地编写 JavaScript。这使他们在工作中更具灵活性，并获得更多的结果多样性。</p>
<p>其次，开发人员可以在 ILLA Builder 中与其他专业人员实时共享链接。因此，他们可以在一起编辑和评论对方的工作。换句话说，开发人员可以在一个有趣和协作的工作空间中工作。自然地，这将带来更快和更好的结果。</p>
<p>最后，使用 ILLA 云时，开发人员可以随时随地携带工作。从任何设备点击一次，即可访问云端并进入 ILLA 的用户界面。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa-的关键功能">ILLA 的关键功能<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#illa-%E7%9A%84%E5%85%B3%E9%94%AE%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="Direct link to ILLA 的关键功能" title="Direct link to ILLA 的关键功能">​</a></h3>
<p>以下是您必须了解的 ILLA 的关键功能：</p>
<ul>
<li>ILLA 拥有用于 React 组件的即用型库。</li>
<li>最令人惊讶的是，ILLA 设计工具具有 TypeScript 类型功能，并支持可预测的静态类型。</li>
<li>ILLA Design 提供了快速且简便的导入，有助于提高开发人员的生产力。</li>
<li>您可以访问精美设计和功能强大的主题和组件。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="升级后的illa功能">升级后的ILLA功能<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#%E5%8D%87%E7%BA%A7%E5%90%8E%E7%9A%84illa%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="Direct link to 升级后的ILLA功能" title="Direct link to 升级后的ILLA功能">​</a></h3>
<p>以下是你必须了解的ILLA的一些升级功能：</p>
<ul>
<li>快速与任何数据源集成</li>
<li>你可以将ILLA连接到任何主流数据库或任何其他数据源。这个工具允许你使用前端组件从后端获取数据。</li>
<li>实时协作以提高效率</li>
<li>ILLA Builder允许开发人员协作进行项目工作。他们可以创建和分享链接给不同的开发人员，共同编辑他们的工具并与其他团队成员实时沟通。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="响应式ui库以满足你的需求">响应式UI库以满足你的需求<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#%E5%93%8D%E5%BA%94%E5%BC%8Fui%E5%BA%93%E4%BB%A5%E6%BB%A1%E8%B6%B3%E4%BD%A0%E7%9A%84%E9%9C%80%E6%B1%82" class="hash-link" aria-label="Direct link to 响应式UI库以满足你的需求" title="Direct link to 响应式UI库以满足你的需求">​</a></h3>
<p>ILLA Builder还拥有众多组件，以高效满足每位开发人员的需求。因此，开发人员可以访问拖放构建器，快速开发他们所需的内部工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/tooljet-vs-retool#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>总之，Tooljet和Appsmith都是出色的低代码平台，可以帮助你快速高效地构建应用程序。然而，它们各自都有优点和缺点，因此在决定哪一个适合你之前，考虑清楚你的需求很重要。如果你寻求更具管理功能且需要更多实际操作的方式，那么Tooljet可能更适合你。另一方面，如果你想要一个不需要任何编程经验的用户友好平台，那么Appsmith可能是更好的选择。最终，一切都取决于你是什么类型的开发人员以及你想要构建什么类型的应用程序。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="tooljet" term="tooljet"/>
        <category label="appsmith" term="appsmith"/>
        <category label="retool" term="retool"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[像搭积木一样创建AI工具]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/build-ai-tools</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/build-ai-tools"/>
        <updated>2024-01-19T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[今天的AI开发已经不再是一项新奇的技术，而是广泛应用于各个领域。]]></summary>
        <content type="html"><![CDATA[<p>今天的AI开发已经不再是一项新奇的技术，而是广泛应用于各个领域。然而，对于大多数人来说，AI仍然是一项高门槛的技术，需要大量的时间和精力才能在实际工作中有效应用。</p>
<p>每个人都有自己独特的需求，比如构建文本到图像的工具或编写特定于工作流程的工具。HuggingFace上有许多有趣的模型，让我们可以基于这些模型快速创建自己的AI工具，从而使我们的工作更加智能化！</p>
<p>以下是一个推荐的工具，允许用户像搭积木一样构建AI工具：</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/build-ai-tools#illa-cloud" class="hash-link" aria-label="Direct link to ILLA Cloud" title="Direct link to ILLA Cloud">​</a></h2>
<p>官方网站：<a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">https://illacloud.com</a></p>
<p>Github：<a href="https://github.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">https://github.com/illacloud/illa-builder</a></p>
<p>这个开源的低代码工具的口号是：<strong>构建AI驱动的业务工具</strong>。它专注于帮助用户快速构建AI驱动的工具。用户可以通过拖放方式构建页面，然后使用三个主要功能连接到AI：</p>
<ul>
<li>ILLA AI代理</li>
<li>来自HuggingFace的模型</li>
<li>RestAPI调用OpenAI的接口</li>
</ul>
<p>这允许快速创建个性化的AI工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="构建智能应用程序">构建智能应用程序<a href="https://illacloud.github.io/illa-website/zh/blog/build-ai-tools#%E6%9E%84%E5%BB%BA%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" class="hash-link" aria-label="Direct link to 构建智能应用程序" title="Direct link to 构建智能应用程序">​</a></h2>
<p>在这里，我们使用OpenAI的文本到图像接口来构建我们自己的文本到图像面板，使用ILLA Cloud构建的工具，它具有某些优势：</p>
<p>示例在这里：<a href="https://illacloud.com/image-generator" target="_blank" rel="noopener noreferrer">https://illacloud.com/image-generator</a></p>
<ul>
<li>生成的图像可以通过ILLA Flow功能发送到任何系统或SaaS。</li>
<li>后续使用的模型可以通过RestAPI或HuggingFace的模型进行调用。</li>
<li>可以添加内置提示以确保生成的内容足够定制。</li>
<li>ILLA AI代理功能可以丰富内容的提示，因为不是每个人都熟悉编写提示。</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/build-ai-tools/image_generate_content.webp" alt="image_generate_content" class="img_CfaS"></p>
<p>我在这里使用了几个组件，通过快速拖放创建了自己的Web面板，然后通过JavaScript连接了逻辑，使其可以供我的团队使用。</p>
<p>我构建了两个示例；另一个是AI语音处理面板。</p>
<p>示例在这里：<a href="https://illacloud.com/ai-voice-generator" target="_blank" rel="noopener noreferrer">https://illacloud.com/ai-voice-generator</a></p>
<p>该面板具有以下功能：</p>
<ul>
<li>会议记录转录</li>
<li>会议记录生成</li>
<li>会议记录的翻译和配音</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/build-ai-tools/mix_ai_voice.webp" alt="mix_ai_voice" class="img_CfaS"></p>
<p>它主要使用了OpenAI的Whisper能力。有成千上万种AI功能，但最重要的是找到适合您的功能。使用ILLA Cloud，您可以快速构建像搭积木一样的AI应用程序。立即开始使用吧！</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/build-ai-tools#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>从上面的介绍中，我们可以看到，使用ILLA Cloud，您可以快速构建自己的AI工具，而ILLA Cloud具有丰富的组件库，基本上可以满足大量日常业务需求。</p>
<p>ILLA自己开发的组件库使上述功能足够灵活。快来使用ILLA Cloud构建自己的AI工具吧！</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="ai" term="ai"/>
        <category label="工具" term="工具"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[自动发送消息到Slack的最佳开发者友好工具]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/automate-send-to-slack</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/automate-send-to-slack"/>
        <updated>2024-01-17T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Slack作为许多人工作中的主要沟通工具，已成为必须每天打开的基本工具之一。支持强大的文本和媒体格式，Slack允许我们发送各种消息。作为开发者，我们有许多需要自动化的任务。]]></summary>
        <content type="html"><![CDATA[<p>Slack作为许多人工作中的主要沟通工具，已成为必须每天打开的基本工具之一。支持强大的文本和媒体格式，Slack允许我们发送各种消息。作为开发者，我们有许多需要自动化的任务，例如：</p>
<ul>
<li><strong>代码编译和构建</strong>：自动化代码编译过程，特别是在大型项目中，可以显著提高效率。</li>
<li><strong>测试执行</strong>：自动运行单元测试、集成测试和性能测试以确保代码质量。</li>
<li><strong>代码部署</strong>：自动化代码部署到生产环境或测试环境，这是持续集成/持续部署（CI/CD）流程中的常见做法。</li>
<li><strong>数据备份和恢复</strong>：定期自动备份数据库和应用程序数据，并在需要时进行恢复。</li>
<li><strong>监控和警报</strong>：自动监控系统和应用程序性能，并在出现问题时发送警报。</li>
<li><strong>日志文件管理</strong>：自动收集、分析和存档日志。</li>
<li><strong>环境配置</strong>：使用配置管理工具自动设置和维护开发、测试和生产环境。</li>
<li><strong>文档生成</strong>：从代码注释或数据库结构自动生成文档。</li>
<li><strong>批量数据或文件处理</strong>：自动执行数据转换、迁移或其他批量处理任务。</li>
<li><strong>依赖管理</strong>：自动管理项目依赖项，以确保使用最新和兼容的库和框架版本。</li>
</ul>
<p>这些任务通常通过各种工具和脚本自动化完成，例如使用Jenkins或GitHub Actions进行CI/CD流程，或使用Ansible、Puppet进行环境配置和管理。开发者使用许多工具来完成这些任务，但这些工具通常是独立的。完成任务后，我相信每个人都会欣赏综合性的更新通知。</p>
<p>研究表明，如果在问题创建时通过Slack通知，解决时间可以缩短50%。因此，我们需要一个工具来帮助我们自动发送消息到Slack，允许我们在一个地方查看所有消息，而不是检查各种工具。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/connector.png" alt="连接器" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="解决方法">解决方法<a href="https://illacloud.github.io/illa-website/zh/blog/automate-send-to-slack#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="hash-link" aria-label="Direct link to 解决方法" title="Direct link to 解决方法">​</a></h2>
<p>在这里，我们选择了一个名为ILLA Flow的工具来解决这个问题。它是一个针对开发者的连接工具，帮助他们快速构建各种自动化任务，包括自动发送消息到Slack。</p>
<p>ILLA Flow提供各种集成，包括但不限于最常用的RestAPI、GraphQL以及大量的数据库连接和各种SaaS平台功能，允许您快速将您的产品与客户使用的产品连接起来。ILLA Flow还支持定期任务、Webhook和参数传递。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/resource.png" alt="资源" class="img_CfaS"></p>
<p>ILLA Flow最独特的功能是将AI代理集成到工作流中的能力。这使您可以在发送通知之前使用由OpenAI模型创建的AI代理来处理通知，使通知变得更加智能和有趣。您还可以使用AI代理进行复杂的分析，简化以前具有挑战性的摘要。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/agent.png" alt="代理" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="取得的结果">取得的结果<a href="https://illacloud.github.io/illa-website/zh/blog/automate-send-to-slack#%E5%8F%96%E5%BE%97%E7%9A%84%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="Direct link to 取得的结果" title="Direct link to 取得的结果">​</a></h2>
<p>我们可以在ILLA Flow中创建一个工作流，然后在工作流中调用Slack的Webhook来实现自动发送消息到Slack。</p>
<p>在完成CI/CD工具或每日计划任务后，我们可以在Slack中看到消息。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/connector.png" alt="连接器" class="img_CfaS"></p>
<p>我们还可以将ILLA Flow连接到GitHub，允许我们在GitHub Issues中看到由ILLA Flow发送的消息。</p>
<p>我们还可以将ILLA Flow连接到警报监控系统，因此当发生警报或异常时，我们可以在Slack中看到消息。</p>
<p>最后，ILLA的另一款产品ILLA Builder支持构建自定义面板，允许我们通过Slack发送的链接直接跳转到ILLA Builder，以通过这些链接查看更多信息，使通知变得非常智能和详细。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/automate-send-to-slack#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>在日常工作中，存在许多自动化场景，而ILLA Flow是一个面向开发者的工具。大多数其他自动连接工具面向一般用户，这可能会使开发者的配置变得更加复杂。</p>
<p>使用ILLA Flow，您可以一键集成AI代理和各种SaaS，使内部团队的流程更加自动化，并使通知更加智能。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="工作流程" term="工作流程"/>
        <category label="Slack" term="Slack"/>
        <category label="自动化" term="自动化"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[帮助自由职业者创建管理面板的最佳产品]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/boost-freelancer</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/boost-freelancer"/>
        <updated>2024-01-15T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[我目前是一名自由职业者，曾在一个自由职业平台上承接了一个网页开发项目。]]></summary>
        <content type="html"><![CDATA[<p>大家好，我是Owen，一名曾在TikTok工作的全栈工程师。我在那里的工作内容包括开发这个平台，并确保提供愉悦的用户体验，该平台以其吸引人的短视频内容而闻名。</p>
<p>我目前是一名自由职业者，曾在一个自由职业平台上承接了一个网页开发项目。这个项目的前端部分并没有花费我太多时间，但对管理面板的广泛需求却消耗了很多时间。</p>
<p>我的所有数据都存储在Supabase上，我为后端管理开发了一整套REST API。我意识到大部分工作涉及到在Supabase上进行CRUD操作。我需要一个工具来帮助我快速开发这些管理面板。</p>
<p>因此，我创建了一个开源项目，以协助快速开发管理面板。这个项目名为ILLA Cloud。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="什么是illa-cloud">什么是ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/boost-freelancer#%E4%BB%80%E4%B9%88%E6%98%AFilla-cloud" class="hash-link" aria-label="Direct link to 什么是ILLA Cloud" title="Direct link to 什么是ILLA Cloud">​</a></h2>
<p>ILLA是一个为开发者设计的低代码工具，允许你通过拖放界面快速开发管理面板和仪表板。ILLA Cloud与众多常见的数据库和数据源集成，包括REST API和GraphQL。</p>
<p>官方网站：<a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">https://illacloud.com</a></p>
<p>使用ILLA，你可以快速构建各种工具，如：</p>
<ul>
<li>网页和应用管理面板</li>
<li>数据仪表板</li>
<li>定制化B2B工具</li>
</ul>
<p>这些可以通过拖放轻松创建，只需要少量JavaScript来进行逻辑连接。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/boost-freelancer/dashboard.png" alt="dashboard" class="img_CfaS"></p>
<p>ILLA还包含一套全面的连接器工具，能够整合AI、数据库和各种SaaS平台。这使得你的客户能够快速将你构建的产品与他们使用的产品连接起来。它支持计划任务、Webhooks，并允许参数传递。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/boost-freelancer/connector.png" alt="connector" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="我为什么创建illa-cloud">我为什么创建ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/boost-freelancer#%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%9B%E5%BB%BAilla-cloud" class="hash-link" aria-label="Direct link to 我为什么创建ILLA Cloud" title="Direct link to 我为什么创建ILLA Cloud">​</a></h2>
<p>对于自由职业者来说，最重要的无疑是时间，因为时间就是金钱。我不想在管理面板上花费太多时间；我需要一个帮助我快速开发管理面板的工具。此外，对于我的客户来说，易用性和审美吸引力至关重要。因此，使用低代码工具进行开发提供了非常用户友好的体验。</p>
<p>通过拖放，我可以迅速构建一个直接与Supabase交互的管理面板，而无需编写任何代码。这个工具帮助我快速开发管理面板，使我能够专注于开发业务逻辑。</p>
<p>我使用Supabase的原因是它是一个非常用户友好的开源项目，有助于迅速建立后端服务。此外，它的文档非常易于上手，使我容易开始。</p>
<p>ILLA Cloud与Supabase有集成。使用SQL，我可以快速查询和修改Supabase中的数据，从而快速开发仪表板和管理面板。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="我为什么推荐illa-cloud">我为什么推荐ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/boost-freelancer#%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90illa-cloud" class="hash-link" aria-label="Direct link to 我为什么推荐ILLA Cloud" title="Direct link to 我为什么推荐ILLA Cloud">​</a></h2>
<p>你只需每月支付20美元</p>
<p>即可使用ILLA，这个费用仅用于ILLA编辑器的使用，这对自由职业者非常友好。你可能需要与众多客户互动，但你不必为用户支付费用；你只需为自己支付。</p>
<p>此外，ILLA附带一个即用型的驱动器服务。在开发过程中，对于文件存储需求，你可以直接使用驱动器服务，这有助于快速开发。此外，如果你的客户有高使用量，你可以让他们自己为账户充值，或者他们可以回到你这里获得更多。这对于达成后续交易非常有利。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="自由职业者" term="自由职业者"/>
        <category label="自由职业" term="自由职业"/>
        <category label="upwork" term="upwork"/>
        <category label="fiverr" term="fiverr"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL数据库的前7个数据库GUI工具]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases"/>
        <updated>2024-01-09T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[数据库GUI工具使开发人员更轻松、更高效地处理SQL数据库。有许多出色的数据库GUI工具可供选择。]]></summary>
        <content type="html"><![CDATA[<p>数据库GUI工具使开发人员更轻松、更高效地处理SQL数据库。有许多出色的数据库GUI工具可供选择，每个工具都具有不同的功能和能力。在本博客文章中，我们将介绍七种最佳的数据库GUI工具，以帮助您选择合适的工具。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="数据库gui工具及其重要性">数据库GUI工具及其重要性<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#%E6%95%B0%E6%8D%AE%E5%BA%93gui%E5%B7%A5%E5%85%B7%E5%8F%8A%E5%85%B6%E9%87%8D%E8%A6%81%E6%80%A7" class="hash-link" aria-label="Direct link to 数据库GUI工具及其重要性" title="Direct link to 数据库GUI工具及其重要性">​</a></h2>
<p>数据库GUI工具是数据库开发人员、数据库管理员和数据库管理系统用户的重要工具。数据库管理工具使数据库开发人员能够在Windows、Linux和macOS操作系统上编辑和管理MySQL和PostgreSQL数据库，并浏览数据库模式。</p>
<p>流行的数据库，如Microsoft SQL Server、Oracle MySQL数据库和Oracle MySQL服务器，也通过全面的跨平台GUI数据库管理工具从这一技术中受益。GUI数据库管理工具允许用户仅需鼠标点击而不是手动输入复杂的SQL语句即可构建其数据库的复杂查询生成器。</p>
<p>基于Web的GUI界面越来越受欢迎，因为它们允许具有Web浏览器访问权限的用户轻松地从任何系统管理他们的数据库，包括Windows、Linux和Mac。使用数据库GUI是管理数据库的更快速的方式，与手动输入SQL语句相比，它也更全面。使开发人员轻松访问任何数据库系统的功能可以显著提高数据库管理的可访问性。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#illa-cloud" class="hash-link" aria-label="Direct link to ILLA Cloud" title="Direct link to ILLA Cloud">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/illa.png" alt="illa" class="img_CfaS"></p>
<p>ILLA是一款一流的低代码解决方案，允许开发人员在短时间内创建功能丰富的内部工具。此外，使用ILLA云的开发人员将不必花费太多精力和时间进行Web设计和其他集成。</p>
<p>ILLA的创建者为该工具开发了众多插件，因此该工具可以迅速满足开发人员在任何场景中的需求。此外，开发人员可以使用ILLA的拖放构建器以最佳方式提高其工作效率。您还可以通过API将此工具连接到任何数据源。</p>
<p>ILLA Cloud也是最受欢迎的用于管理SQL数据库的图形用户界面（GUI）之一。它提供了用户友好且直观的界面，允许开发人员在不手动输入复杂的SQL语句的情况下快速更改其数据库。ILLA Cloud还提供全面的跨平台支持，可从任何系统访问，包括Windows、Linux和Mac。</p>
<p>使用ILLA Cloud，用户可以通过鼠标点击快速构建复杂的查询生成器。除了其出色的功能外，ILLA Cloud还提供企业级安全协议，保护用户的数据。此外，用户可以轻松通过ILLA的REST API平台扩展其数据库。ILLA Cloud是寻找管理数据库的简便方式的完美选择。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="dbeaver">DBeaver<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#dbeaver" class="hash-link" aria-label="Direct link to DBeaver" title="Direct link to DBeaver">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/dbeaver.avif" alt="dbeaver" class="img_CfaS"></p>
<p>DBeaver是SQL数据库GUI的优秀选择，特别适合那些不想使用订阅模型的人。它是一款免费且开源的数据库管理工具，提供跨平台支持，允许用户从任何系统，包括Windows、Linux和Mac，访问其数据库。</p>
<p>使用DBeaver，用户可以通过鼠标点击快速创建复杂的查询并编辑数据库模式。它还具备一套强大的工具，使管理大型SQL数据库变得更加容易。这些工具包括ER图生成器、数据导入/导出功能和强大的查询生成器，帮助用户构建复杂的查询。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#retool" class="hash-link" aria-label="Direct link to Retool" title="Direct link to Retool">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/retool.avif" alt="retool" class="img_CfaS"></p>
<p>Retool是用于管理SQL数据库的直观图形用户界面（GUI），提供多种功能和优势。它提供了一个干净的界面，带有拖放功能，可构建复杂的查询，无需手动输入SQL语句。Retool使开发人员更容易与其数据库交互，使他们能够快速、高效地进行更改。</p>
<p>此外，Retool的高级安全协议有助于保护用户的数据免受未经授权的访问。它还提供跨平台支持，可从任何系统访问，包括Windows、Linux和Mac。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet">Tooljet<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#tooljet" class="hash-link" aria-label="Direct link to Tooljet" title="Direct link to Tooljet">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/tooljet.avif" alt="tooljet" class="img_CfaS"></p>
<p>Tooljet是用于管理SQL数据库的高级图形用户界面（GUI），为用户提供了一套全面的功能和工具，以高效管理其数据库。它具有直观的拖放界面，允许开发人员快速更改其数据库，无需手动输入复杂的SQL语句。</p>
<p>Tooljet还提供强大的查询生成器，使用户能够轻松构建复杂的查询，并具备内置的报告生成功能，可快速而容</p>
<p>易地生成报告。此外，用户可以利用Tooljet提供的广泛跨平台支持，从任何系统访问其数据库。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="dbvisualizer">DbVisualizer<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#dbvisualizer" class="hash-link" aria-label="Direct link to DbVisualizer" title="Direct link to DbVisualizer">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/dbvisualizer.avif" alt="DbVisualizer" class="img_CfaS"></p>
<p>DbVisualizer是一款功能强大且全面的GUI工具，用于管理SQL数据库。它为用户提供了易于使用的拖放界面，可对其数据库进行更改，并具备用于构建复杂查询的强大查询生成器，无需手动输入SQL语句。DbVisualizer提供广泛的跨平台支持，允许用户从任何系统访问其数据库，包括Windows、Linux和Mac。</p>
<p>它还具备先进的安全协议，有助于保护用户的数据免受未经授权的访问。总的来说，DbVisualizer是一个出色的选择。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith">Appsmith<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#appsmith" class="hash-link" aria-label="Direct link to Appsmith" title="Direct link to Appsmith">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/appsmith.avif" alt="appsmith" class="img_CfaS"></p>
<p>Appsmith是一款非常强大的图形用户界面（GUI），可轻松管理大型SQL数据库。它具备一套全面的工具，使管理此类数据库变得比以往更简单和更直观。拖放界面允许开发人员快速构建复杂查询，无需手动输入长串SQL语句。</p>
<p>Appsmith还提供许多高级安全协议，如用户身份验证和安全连接加密。此外，Appsmith的跨平台支持使用户可以从任何系统访问其数据，包括Windows、Linux和Mac。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="dronahq">Dronahq<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#dronahq" class="hash-link" aria-label="Direct link to Dronahq" title="Direct link to Dronahq">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/dronahq.avif" alt="dronahq" class="img_CfaS"></p>
<p>Dronahq是用于管理SQL数据库的强大且功能丰富的图形用户界面（GUI）。它提供了一个直观的拖放界面，使创建复杂查询变得简单，无需手动输入SQL语句。</p>
<p>Dronahq提供广泛的跨平台支持，使用户可以从任何系统访问其数据库，包括Windows、Linux和Mac。它还具备高级安全协议，如基于角色的身份验证和安全连接加密。此外，Dronahq具有强大的查询生成器，允许用户使用内置的报告功能快速创建自定义报告。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="找到最适合您的工具">找到最适合您的工具<a href="https://illacloud.github.io/illa-website/zh/blog/top-7-database-guis-for-sql-databases#%E6%89%BE%E5%88%B0%E6%9C%80%E9%80%82%E5%90%88%E6%82%A8%E7%9A%84%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to 找到最适合您的工具" title="Direct link to 找到最适合您的工具">​</a></h2>
<p>由于有各种各样的图形用户界面（GUI）可供选择，因此尝试不同的选项以找到最适合您的工具非常重要。每个GUI都具有独特的功能，因此用户应花时间进行研究，权衡其优缺点。</p>
<p>最终，选择合适的GUI是一项长期投资，可以显著改善个人的计算体验。为什么不今天就试试ILLA Cloud呢？它出色的功能、用户友好的界面和优化的性能可能正是您需要的解决方案！</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="数据库" term="数据库"/>
        <category label="GUI" term="GUI"/>
        <category label="工具" term="工具"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年构建CRUD应用的最佳工具]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications"/>
        <updated>2024-01-08T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[CRUD应用是一种允许用户使用各种界面（如网页或移动应用程序）创建、读取、更新和删除数据的软件类型。]]></summary>
        <content type="html"><![CDATA[<p>CRUD应用是一种类型的软件，允许用户使用各种界面（如网页或移动应用程序）创建、读取、更新和删除数据。CRUD代表创建（Create）、读取（Read）、更新（Update）和删除（Delete），这是模型应能够对数据执行的四个基本操作。CRUD应用在Web开发中非常常见，因为它们允许用户在不编写复杂代码的情况下执行数据的基本操作。</p>
<p>CRUD应用由三个主要组件组成：数据库、用户界面和API。数据库是数据存储和检索的地方。用户界面是用户与之交互的前端。API包含与数据库通信的代码和方法。每个组件可以使用不同的技术和框架，这取决于开发人员的需求和偏好。</p>
<p>在本博客文章中，我们将分别介绍构建CRUD应用的一些最佳工具，涵盖每个组件。我们还将提供一些如何有效使用它们的示例和提示。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="数据库">数据库<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E6%95%B0%E6%8D%AE%E5%BA%93" class="hash-link" aria-label="Direct link to 数据库" title="Direct link to 数据库">​</a></h2>
<p>数据库是任何CRUD应用的核心，因为它存储用户可以创建、读取、更新和删除的数据。有许多类型的数据库可用，但它们可以大致分为两组：关系型（SQL）和非关系型（NoSQL）。</p>
<p>关系型数据库使用表来存储数据；每个表都有一个预定义的模式，每行表示一条记录。关系型数据库适用于需要复杂查询和事务的结构化和一致性数据。一些最流行的关系型数据库包括MySQL、PostgreSQL、Oracle和SQL Server。</p>
<p>非关系型数据库使用集合来存储数据，每个集合可以具有灵活的模式，每个文档表示一条记录。非关系型数据库适用于需要高可伸缩性和性能的非结构化和动态数据。一些最流行的非关系型数据库包括MongoDB、CouchDB、Firebase和DynamoDB。</p>
<p>选择适合您的CRUD应用的正确数据库取决于多个因素，如您需要存储的数据类型和量，您需要确保的一致性和可靠性水平，以及您需要执行的查询的复杂性和频率。您还应考虑您的数据库与用户界面和API工具的兼容性和集成性。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="用户界面">用户界面<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" class="hash-link" aria-label="Direct link to 用户界面" title="Direct link to 用户界面">​</a></h2>
<p>用户界面是您的CRUD应用的前端，用户可以在其中查看和操作存储在数据库中的数据。用户界面可以使用不同的技术和框架构建，这取决于您的应用类型和复杂性。</p>
<p>构建CRUD应用的用户界面的最常见方法之一是使用HTML、CSS和JavaScript。HTML定义了您的网页的结构和内容，CSS样式了网页的外观和布局，JavaScript为网页添加了交互性和功能性。您可以使用纯HTML、CSS和JavaScript，也可以使用简化和增强开发过程的库和框架。</p>
<p>用于构建用户界面的最受欢迎的库和框架之一包括React、Angular、Vue.js、Bootstrap、Tailwind CSS、jQuery等。这些工具为创建具有与API和数据库通信功能的动态和响应式网页提供了各种功能和好处。</p>
<p>构建CRUD应用的用户界面的另一种方法是使用低代码或无代码平台。这些平台允许您使用拖放组件和可视化编辑器创建网页，而无需编写太多或任何代码。一些最受欢迎的低代码或无代码平台包括Budibase、Appsmith、Bubble.io、Webflow等。这些工具非常适合初学者或非开发人员，他们希望创建简单且快速的CRUD应用，而无需学习复杂的技术。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="api">API<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#api" class="hash-link" aria-label="Direct link to API" title="Direct link to API">​</a></h2>
<p>API是您的用户界面和数据库之间的桥梁。它定义了您的用户界面如何使用HTTP方法（如GET（读取）、POST（创建）、PUT（更新）或DELETE（删除））请求数据从数据库或将数据发送到数据库。API还处理身份验证、授权、验证、错误处理等。</p>
<p>有许多构建CRUD应用的API的方法，但其中一种最常见的方法是使用REST（表述性状态转移）。REST是一种架构风格，定义了如何使用标准HTTP方法和格式（如JSON或XML）访问和操作资源（数据）。REST API易于理解和使用，既适合人类，也适合机器。</p>
<p>用于构建REST API的一些最受欢迎的工具包括Node.js、Express.js、Flask、Django、Ruby on Rails、Laravel等。这些工具是框架，提供了创建和管理Web服务器和API的各种功能和库。</p>
<p>另一种构建CRUD应用的API的方法是使用GraphQL。GraphQL是一种查询语言和运行时，允许您使用单个端点定义和执行查询和变异（操作）以操作您的数据。GraphQL API比REST API更灵活和高效，因为它允许您仅请求或发送您需要的数据，避免了过多或不</p>
<p>足的情况。</p>
<p>用于构建GraphQL API的一些最受欢迎的工具包括Apollo Server、Prisma、Hasura、Graphene等。这些工具是帮助您创建和管理GraphQL服务器和模式的库或平台。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="用于构建crud应用的工具">用于构建CRUD应用的工具<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BAcrud%E5%BA%94%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to 用于构建CRUD应用的工具" title="Direct link to 用于构建CRUD应用的工具">​</a></h2>
<p>您会发现许多声称提供构建有用的CRUD应用的便利的软件，但您需要谨慎选择那些有助于创建最兼容CRUD应用的软件。让我们讨论一下可以帮助您的前7种软件。我们根据客户的偏好和可行性列出了这七种工具。我们将提到它们的特点和缺点，以便您可以明智地根据自己的需求选择。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#illa-cloud" class="hash-link" aria-label="Direct link to ILLA Cloud" title="Direct link to ILLA Cloud">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/illa.png" alt="illa" class="img_CfaS"></p>
<p>ILLA Cloud是一个用于构建内部工具的开源低代码平台。它的主要目标是帮助程序员开发用于监视数据的模块，这是开发人员最烦人的工作之一。这个开源低代码应用的另一个新功能是，您可以创建自己定制的代码块，然后在市场上出售。</p>
<p>它可以连接到主流数据库，或者通过API连接到任何数据库。它甚至可以在用户事件链中添加操作。它的后端和前端数据组件紧密集成，因此开发人员可以为大规模信息交互编写数据调用。</p>
<p>对开发人员来说，这是双重有用，因为它为他们提供了实施更丰富功能的自由。他们可以使用<code>{{template syntax}}</code>来创建更丰富的内容。</p>
<p>它允许实时协作，使开发人员能够在世界各地的不同地点同时工作，以提高开发效率。他们可以使用ILLA Builder通过共享链接、共同编辑和交流来改进开发效率。</p>
<p>ILLA Builder具有全面的UI库。它有许多有用的组件，开发人员可以使用拖放来构建引人注目的界面，而不需要浪费太多时间。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>它可以轻松集成到任何数据库中。</li>
<li>您可以在这些操作系统中下载ILLA CLI：Windows、Linux和MAC。</li>
<li>它提供了实时协作，使开发人员能够进行更好的开发交流。</li>
<li>它提供了灵活的部署选项。您可以使用ILLA Cloud、ILLA CLI、Kubernetes和Docker。</li>
<li>您可以轻松集成第三方API。</li>
<li>它可以免费共享、使用、复制和更新。</li>
<li>它正在不断通过新的更新和功能进行改进。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<ul>
<li>ILLA Cloud基本上是为程序员的便利而开发的。</li>
<li>您需要精通其中的四种语言之一，以充分利用它。JavaScript、RUST和Forlang是其主要语言。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith">AppSmith<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#appsmith" class="hash-link" aria-label="Direct link to AppSmith" title="Direct link to AppSmith">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/appsmith.png" alt="appsmith" class="img_CfaS"></p>
<p>AppSmith是第一个开源低代码工具。它向开发人员介绍了全新的拖放式编程世界。标准计划包括无限的应用程序和小部件，非常适用于构建实时仪表板。标准计划是免费的。它具有许多功能，以下是这些功能的摘要：</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点-1">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9-1" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>它可以轻松连接到您支持的数据库。</li>
<li>直观的拖放小部件非常有帮助，使编码变得更加容易。</li>
<li>提供了包括文档和视频在内的完整指南，以供指导。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-1">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9-1" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<ul>
<li>要充分利用这个应用程序，您需要了解JavaScript。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="knack">Knack<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#knack" class="hash-link" aria-label="Direct link to Knack" title="Direct link to Knack">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/knack.png" alt="knack" class="img_CfaS"></p>
<p>Knack是另一个通常用于自动化手动流程的无代码应用程序。如果您尝试将其与现有数据库连接，可能会出现问题。它具有一定的限制，因此最好仅用于内部流程。它允许您查看、管理、更新、分析和共享数据。不同情况下的应用程序模板可以快速启动。以下是此应用程序的一些特点。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点-2">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9-2" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>它支持内置数据库以及用户管理、身份验证、电子邮件和通知自动化工作流程。</li>
<li>开发人员可以使用JavaScript和CSS轻松自定义它。</li>
<li>提供完整的指南，包括文档和视频，以供参考。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-2">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9-2" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<p>最严重的缺点是它无法与其他数据库互动。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="budibase">Budibase<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#budibase" class="hash-link" aria-label="Direct link to Budibase" title="Direct link to Budibase">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/budibase.png" alt="budibase" class="img_CfaS"></p>
<p>Budibase是另一个广泛用于CRUD应用程序的流行低代码工具。您可以轻松集成它与主要数据库。以下是该工具的一些突出特点。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点-3">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9-3" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>它具有大量小部件和其他功能，可以美化您的页面。</li>
<li>它支持内部数据库，但也支持连接到外部数据库。</li>
<li>详细文档和指南也可供参考。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-3">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9-3" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<ul>
<li>需要JavaScript和技术技能。</li>
<li>没有可用的模板。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="bubble">Bubble<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#bubble" class="hash-link" aria-label="Direct link to Bubble" title="Direct link to Bubble">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/bubble.png" alt="bubble" class="img_CfaS"></p>
<p>这个更加复杂的工具不建议用于较小的内部应用程序。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点-4">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9-4" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>提供小部件和设计。</li>
<li>完全能够部署。</li>
<li>流量、用户和数据的容量是无限的。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-4">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9-4" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<ul>
<li>学习起来比较复杂。</li>
<li>无法托管在您自己的基础架构上。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ui-bakery">UI Bakery<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#ui-bakery" class="hash-link" aria-label="Direct link to UI Bakery" title="Direct link to UI Bakery">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/uibakery.png" alt="bakery" class="img_CfaS"></p>
<p>这个应用程序是一个相对较新的产品，但由于预定义的小部件和现成的模板，仍然是构建内部工具和CRUD应用程序的完美无代码工具。它可以轻松连接到SQL数据库，如MySQL、Google数据表和Postgres。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点-5">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9-5" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>它通过Google、Twitter和Facebook支持用户管理。</li>
<li>开发人员可以在独特的URL上进行应用程序托管。</li>
<li>您可以自定义小部件和模板。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-5">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9-5" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<ul>
<li>不适用于公共应用程序、面向客户的网站和移动应用程序。</li>
<li>您需要技术人员处理此问题，因为它需要一定的JavaScript知识水平。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#retool" class="hash-link" aria-label="Direct link to Retool" title="Direct link to Retool">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/retool.png" alt="retool" class="img_CfaS"></p>
<p>虽然是列表中的最后一个，但Retool也是作为CRUD应用程序的一个出色选择。它是一个拖放构建块平台。您需要自定义JavaScript以从外部数据库获取数据。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点-6">特点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E7%82%B9-6" class="hash-link" aria-label="Direct link to 特点：" title="Direct link to 特点：">​</a></h3>
<ul>
<li>它支持内置授权和身份验证。</li>
<li>您可以使用JavaScript自定义它。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-6">缺点：<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BC%BA%E7%82%B9-6" class="hash-link" aria-label="Direct link to 缺点：" title="Direct link to 缺点：">​</a></h3>
<ul>
<li>免费计划有限，按每个终端用户收费。</li>
<li>不能用于公共应用程序。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/the-best-tools-for-build-crud-applications#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>CRUD应用程序是一种允许用户使用各种界面创建、读取、更新和删除数据的软件类型。CRUD应用程序由三个主要组件组成：数据库、用户界面和API。每个组件可以使用不同的技术和框架，取决于开发人员的需求和偏好。</p>
<p>在本博文中，我们分别介绍了一些构建CRUD应用程序的最佳工具，涵盖了每个组件。我们还提供了一些示例和有关如何有效使用它们的提示。我们希望这篇文章能帮助您更多地了解CRUD应用程序以及如何构建它们。</p>
<p>如果您正在寻找一个可以帮助您快速轻松地构建CRUD应用程序的工具，我们建议您查看ILLA Cloud。ILLA Cloud是一个基于云的平台，可以让您无需编码即可创建CRUD应用程序。您可以连接到任何数据库或API，使用拖放组件设计用户界面，并通过单击部署您的应用程序。ILLA Cloud还提供身份验证、授权、验证、错误处理等功能。ILLA Cloud是构建CRUD应用程序的最佳工具，只需几分钟即可完成。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="crud" term="crud"/>
        <category label="工具" term="工具"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[构建内部工具的最佳开源低代码平台]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/internal-tool</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/internal-tool"/>
        <updated>2024-01-05T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[开源工具很常见，但很少见到有1万颗星的。我要分享一个在海外获得1万颗星的产品。有很多低代码工具，但真正有用的很少。这个工具主要被北美的开发人员使用，他们的Discord社区非常活跃。]]></summary>
        <content type="html"><![CDATA[<p>开源工具很常见，但很少见到有1万颗星的。我要分享一个在海外获得1万颗星的产品。有很多低代码工具，但真正有用的很少。这个工具主要被北美的开发人员使用，他们的Discord社区非常活跃。</p>
<p>这个社区确实有一些好的评价。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/good.png" alt="好评" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud-能做什么">ILLA Cloud 能做什么<a href="https://illacloud.github.io/illa-website/zh/blog/internal-tool#illa-cloud-%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88" class="hash-link" aria-label="Direct link to ILLA Cloud 能做什么" title="Direct link to ILLA Cloud 能做什么">​</a></h2>
<p>Github: <a href="https://illacloud.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">https://illacloud.com/illacloud/illa-builder</a></p>
<p>官方网站: <a href="https://illa.cloud/" target="_blank" rel="noopener noreferrer">https://illa.cloud</a></p>
<p>ILLA Cloud的主要用户是后端工程师，这可能与大多数人的想法不同。许多后端工程师已经使用ILLA Cloud构建了许多数据面板和管理后端。毕竟，网站开发一直是后端工程师的头疼事。使用ILLA Cloud构建的工具确实相当美观且快速。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/dashboard.png" alt="仪表板" class="img_CfaS"></p>
<p>ILLA还支持协作，允许多人共同编辑项目。后端工程师不再需要担心构建各种内部后端。我们都知道依赖前端工程师的痛苦和眼泪。</p>
<p>官方网站还提供了一些解决方案，目前似乎主要侧重于管理后端、数据面板等。</p>
<ul>
<li>AI文本到图像面板</li>
<li>AI语音处理面板</li>
<li>数据分析面板</li>
<li>内容管理CMS</li>
<li>自定义CRM</li>
<li>管理后端</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/solution.png" alt="解决方案" class="img_CfaS"></p>
<p>他们还支持构建工作流程，似乎在低代码领域做了很多工作，看起来是一个很全面的产品。它基本上满足了各种常见情况。</p>
<p>例如：</p>
<ul>
<li>当新用户注册时向Slack发送消息</li>
<li>每日报告GitHub上的星星数量</li>
<li>每日预订会议室</li>
</ul>
<p>工程师使用ILLA Flow自动执行许多任务，例如：</p>
<ul>
<li>每天从数据库读取业务数据并发送到Slack</li>
<li>构建CI/CD报告系统</li>
<li>在发生特定警告时发送电子邮件</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/flow.jpeg" alt="工作流" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="用户体验">用户体验<a href="https://illacloud.github.io/illa-website/zh/blog/internal-tool#%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C" class="hash-link" aria-label="Direct link to 用户体验" title="Direct link to 用户体验">​</a></h2>
<p>我简要体验了一下，他们确实在编辑器的流畅性和整体体验上投入了很多心血。整体的编辑体验相当不错。它包括流畅的拖放功能，并支持协作。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/team.gif" alt="协作" class="img_CfaS"></p>
<p>他们还支持各种数据库集成功能，允许从各种数据源和数据库快速读取和写入数据。对于后端工程师来说，集成各种服务实际上是一场噩梦。在这种情况下，ILLA已经完成了这项工作。他们还支持与Huggingface的集成，似乎是官方合作。这允许快速利用Huggingface上的模型功能，确实很有趣。您可以快速创建一些AI驱动的工具。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/resource.png" alt="资源" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/internal-tool#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>有很多低代码工具，但只有很少可以实际使用和实施。ILLA似乎已经维护了两年，他们的公司目前完全致力于这一事业。与某些为特定目的制造的低代码工具不同，他们直接满足了开发人员的需求。每个人都可以试试看！"</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="nvm" term="nvm"/>
        <category label="nodejs" term="nodejs"/>
        <category label="mac" term="mac"/>
        <category label="javascript" term="javascript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ILLA Flow：一个由JavaScript驱动、面向开发者友好的产品，用于创建自动化工作流程]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/launch-flow</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/launch-flow"/>
        <updated>2024-01-05T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[ILLA Flow是一个工作流产品，允许您以类似思维导图的方式构建完整的工作流程，从而实现与各种数据库和API的连接和调度。]]></summary>
        <content type="html"><![CDATA[<p>大家好，我是Owen，我们是一家专注于低代码解决方案的初创公司。我们的团队非常小，只有7个人。</p>
<p>今天，我们推出了我们的新产品：ILLA Flow。</p>
<p>网站：<a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">https://illacloud.com</a>（登录后，在仪表板左侧-&gt; Flow 中找到）</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-flow">ILLA Flow<a href="https://illacloud.github.io/illa-website/zh/blog/launch-flow#illa-flow" class="hash-link" aria-label="Direct link to ILLA Flow" title="Direct link to ILLA Flow">​</a></h2>
<p>ILLA Flow是一个工作流产品，允许您以类似思维导图的方式构建完整的工作流程，从而实现与各种数据库和API的连接和调度。</p>
<p>您可以通过拖放界面构建自己的工作流程，然后通过调度触发器或Webhook触发器执行工作流程。</p>
<p>流畅的拖放体验使您能够快速构建工作流程，而无需担心任何集成问题。整个系统由JavaScript驱动，确保了灵活性，同时也非常适合开发者使用。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/launch-flow/flow.jpeg" alt="流程" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="整合一切">整合一切<a href="https://illacloud.github.io/illa-website/zh/blog/launch-flow#%E6%95%B4%E5%90%88%E4%B8%80%E5%88%87" class="hash-link" aria-label="Direct link to 整合一切" title="Direct link to 整合一切">​</a></h2>
<p>ILLA Flow可以连接到任何</p>
<ul>
<li>RestAPI</li>
<li>MySQL</li>
<li>MariaDB，</li>
<li>PostgreSQL</li>
<li>...</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/launch-flow/resource.jpeg" alt="资源" class="img_CfaS"></p>
<p>我们将努力扩展更多连接功能的支持。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="一些示例">一些示例<a href="https://illacloud.github.io/illa-website/zh/blog/launch-flow#%E4%B8%80%E4%BA%9B%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="Direct link to 一些示例" title="Direct link to 一些示例">​</a></h2>
<p>ILLA Flow支持多种触发器类型，包括定时触发器和Webhook触发器。</p>
<p>我们使用ILLA Flow来做很多事情，例如：</p>
<ul>
<li>当新用户注册时向Slack发送消息</li>
<li>每天报告GitHub上的星星数量</li>
<li>每天预订会议室</li>
<li>...</li>
</ul>
<p>我们的工程师使用ILLA Flow来自动化许多任务，例如：</p>
<ul>
<li>从数据库中读取一些业务数据并每天发送到Slack</li>
<li>构建CI/CD报告系统</li>
<li>当发生警告时发送电子邮件</li>
<li>...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/launch-flow#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>ILLA Flow支持定时触发器和Webhook触发器的使用。作为低代码工具，ILLA还支持构建面板以驱动多个工作流程，形成完整的业务流程。目前，该产品完全免费，无需费用。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/launch-flow/dashboard.jpeg" alt="仪表板" class="img_CfaS"></p>
<p>我们创建这个产品的初衷是解决市场上缺乏开发者友好的工作流产品。我们的目标是构建一个完整的低代码矩阵产品，以提供更好的体验。此外，我们已经实现了多人实时协作，类似于在Figma中进行编辑的体验，确保团队可以一起编辑工作流程。</p>
<p>作为一个初期产品，仍然有许多功能不完善，我们希望每个人都能提供宝贵的反馈，帮助我们进行优化。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="工作流程" term="工作流程"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024年5大最佳低代码平台]]></title>
        <id>https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform</id>
        <link href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform"/>
        <updated>2024-01-04T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[随着软件行业的发展，低代码工具越来越受欢迎。实施正确的低代码工具]]></summary>
        <content type="html"><![CDATA[<p>随着软件行业的发展，低代码工具正越来越受欢迎。在各种商业场景中实施正确的低代码工具，可以带来显著的效率和生产力提升。本文深入探讨了2024年最受欢迎的低代码工具产品，提供了洞察力和可靠的建议，帮助您做出明智的选择。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="为什么选择低代码工具">为什么选择低代码工具<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="Direct link to 为什么选择低代码工具" title="Direct link to 为什么选择低代码工具">​</a></h2>
<p>低代码工具提供了几个引人注目的优势，包括：</p>
<ul>
<li>零运营维护成本</li>
<li>超快的开发速度</li>
<li>减少对大型开发团队的需求</li>
<li>加快新应用上市时间</li>
</ul>
<p>通常，低代码工具特别适合于开发内部工具和门户场景。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="选择范围">选择范围<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E9%80%89%E6%8B%A9%E8%8C%83%E5%9B%B4" class="hash-link" aria-label="Direct link to 选择范围" title="Direct link to 选择范围">​</a></h2>
<p>我们已经为您编制了目前流行的低代码平台列表，随后将提供详细介绍。</p>
<ul>
<li>ILLA Cloud：开源</li>
<li>Budibase：开源</li>
<li>Tooljet：开源</li>
<li>SuperBlocks：专有</li>
<li>Retool：专有</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#illa-cloud" class="hash-link" aria-label="Direct link to ILLA Cloud" title="Direct link to ILLA Cloud">​</a></h2>
<p>GitHub链接：<a href="https://github.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">https://github.com/illacloud/illa-builder</a></p>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a> 是一个创新的低代码工具，它通过简单的JavaScript，帮助快速创建内部工具，无需从头开始新项目。</p>
<p>主要提供：</p>
<ul>
<li>Web和App管理面板</li>
<li>数据仪表板</li>
<li>定制化B2B工具</li>
</ul>
<p>ILLA Cloud的开发速度比传统组件库构建快达10倍，它还支持协作编辑，提升团队工作效率。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/crm.webp" alt="crm" class="img_CfaS"></p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="最佳选择">最佳选择<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E6%9C%80%E4%BD%B3%E9%80%89%E6%8B%A9" class="hash-link" aria-label="Direct link to 最佳选择" title="Direct link to 最佳选择">​</a></h3>
<p>ILLA Cloud相比其他低代码工具的独特优势：</p>
<ul>
<li>多用户协作支持</li>
<li>全面的工作流能力</li>
<li>开源产品，提供私有部署选项</li>
<li>与各种主流集成兼容，快速连接多样化数据源</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/team.gif" alt="team" class="img_CfaS"></p>
<p>此外，ILLA Cloud还包括AI Agent功能。这种独特的功能允许快速的AI驱动写作，无缝集成到使用低代码工具开发的任何产品中。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="budibase">Budibase<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#budibase" class="hash-link" aria-label="Direct link to Budibase" title="Direct link to Budibase">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/budibase.png" alt="budibase" class="img_CfaS"></p>
<p>在快速应用开发领域，Budibase作为一个强大的低代码平台崭露头角，旨在为开发者提供快速打造定制应用所需的工具。Budibase的核心是一个用户友好的可视化开发环境，简化了创建过程。这个环境提供了多种预制组件，满足各种应用需求，从数据输入表单到交互式仪表板。除了预制产品，Budibase还提供自定义CSS样式的独特灵活性。这使开发者能够为他们的应用注入独特的视觉身份，反映他们项目的本质。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="开源">开源<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E5%BC%80%E6%BA%90" class="hash-link" aria-label="Direct link to 开源" title="Direct link to 开源">​</a></h3>
<p>尽管Budibase没有明确宣传自己为开源，</p>
<p>但它的基础中有一个重要提示。该平台自豪地宣称其使用开源技术，培育了社区驱动创新的感觉。没有明确的开源声明并不削弱其对协作开发的承诺，利用共享知识和专长的力量。然而，渴望一个成熟的开源生态系统的潜在用户可能需要深入探索Budibase的架构，以评估其与他们的偏好是否一致。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势">优势<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>Budibase在集成方面的功力是其不可否认的亮点。该平台认识到应用与多样化外部服务的无缝通信是当代的需求。插件机制使Budibase能够与多种第三方服务集成。这一功能提升了平台的实用性，使开发者能够在Budibase环境中利用外部工具和服务的功能，提高效率，并释放出复杂、多功能应用的潜力。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点">缺点<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E7%BC%BA%E7%82%B9" class="hash-link" aria-label="Direct link to 缺点" title="Direct link to 缺点">​</a></h3>
<p>像任何强大的工具一样，Budibase也有学习曲线要克服，它也不例外。虽然它承诺加速应用开发，但一些用户，特别是那些刚接触低代码开发的用户，最初可能会觉得学习曲线有点陡峭。该平台的一系列功能和能力需要一定的时间和精力才能完全掌握。然而，对于那些坚持度过这个初始阶段的人来说，Budibase打开了一个创意可能的世界之门，使创新的应用想法以惊人的效率实现。</p>
<p>在低代码平台的竞争格局中，Budibase作为一个有前途的竞争者闪耀，它提供了用户友好的可视化开发、灵活性、集成能力和一系列定价计划之间的平衡。无论你是一个经验丰富的开发者寻求加速你的工作流程，还是一个探索应用开发领域的新手，Budibase呈现为你创意的画布，使你能够敏捷和精致地将应用带入生活。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet">Tooljet<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#tooljet" class="hash-link" aria-label="Direct link to Tooljet" title="Direct link to Tooljet">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/tooljet.png" alt="tooljet" class="img_CfaS"></p>
<p>在不断发展的低代码开发领域，Tooljet作为一款动态的竞争者崭露头角，提供了一个平台，使用户能够在不深入编码的复杂性的情况下创建复杂的Web应用程序。在其核心，Tooljet引入了一个多功能工具包，配备了一系列旨在简化应用程序开发过程的功能。其主要特点之一是无缝的拖放界面，使用户能够直观地组装组件并设计复杂的布局。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特点">特点<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E7%89%B9%E7%82%B9" class="hash-link" aria-label="Direct link to 特点" title="Direct link to 特点">​</a></h3>
<p>数据库建模是现代应用程序开发的基石，在Tooljet的武器库中找到了它的位置。用户可以轻松地塑造和调整其数据结构，使其与特定的用例和业务需求相匹配。该平台对API集成的重视扩展了可实现的边界，允许应用程序与外部服务和数据源无缝连接。这种集成能力为动态、数据丰富的应用程序敞开了大门，使其能够无缝地应对现实世界的情况。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="开源-1">开源<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E5%BC%80%E6%BA%90-1" class="hash-link" aria-label="Direct link to 开源" title="Direct link to 开源">​</a></h3>
<p>虽然Tooljet没有明确将自己标记为开源，但有一个显著的特点是用户可以导出他们生成的代码。这个独特的属性赋予开发者完全拥有他们的创作的能力，可以将应用程序托管在他们的服务器上。这种方法将低代码开发的效率与传统编码实践通常所具有的自由和控制权相结合。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="优势-1">优势<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E4%BC%98%E5%8A%BF-1" class="hash-link" aria-label="Direct link to 优势" title="Direct link to 优势">​</a></h3>
<p>用户的反馈突出了Tooljet用户友好的界面作为一个重要的优势。该平台的直观性加速了学习曲线，使即使是那些技术知识有限的人也能将他们的应用程序愿景变为现实。此外，Tooljet促进了复杂工作流程的创建，增强了其效用，使用户能够在其应用程序内协调复杂的操作序列。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="缺点-1">缺点<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E7%BC%BA%E7%82%B9-1" class="hash-link" aria-label="Direct link to 缺点" title="Direct link to 缺点">​</a></h3>
<p>然而，没有任何工具是没有局限性的。尽管Tooljet赋予用户一系列功能，但有些人可能会渴望高级定制选项。该平台侧重于用户友好性和效率，可能会偶尔对寻求高度专业功能或复杂设计细微差别的用户产生限制。与任何技术一样，用户必须在使用的便捷性和根据其具体项目要求进行定制的程度之间取得平衡。</p>
<p>在低代码开发领域，Tooljet崭露头角，提供了直观设计、数据建模能力、API集成功能和灵活的价格模型的混合，堪称一位强有力的竞争者。该平台独特的代码导出和在个人服务器上托管应用程序的方法增加了灵活性，弥合了低代码便利性与编码控制之间的差距。无论您是探索应用程序开发领域的个人，还是一家寻求精简解决方案的企业，Tooljet都邀请您浏览其功能丰富的工具包，踏上创造和创新的旅程。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="superblocks">SuperBlocks<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#superblocks" class="hash-link" aria-label="Direct link to SuperBlocks" title="Direct link to SuperBlocks">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/superblocks.png" alt="superblocks" class="img_CfaS"></p>
<p>Superblocks是一款领先的低代码开发平台，使企业能够轻松创建强大和定制的内部工具。凭借其直观的界面和强大的功能，Superblocks为寻求高效灵活解决方案的组织提供了一系列好处。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="superblocks的关键特点">Superblocks的关键特点<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#superblocks%E7%9A%84%E5%85%B3%E9%94%AE%E7%89%B9%E7%82%B9" class="hash-link" aria-label="Direct link to Superblocks的关键特点" title="Direct link to Superblocks的关键特点">​</a></h3>
<ul>
<li>拖放界面：Superblocks提供了一个用户友好的拖放界面，允许用户以可视化方式设计和构建他们的应用程序，无需广泛的编码知识。这个特性简化了开发过程，使非技术用户甚至能够创建复杂的内部工具。</li>
<li>大量组件库：Superblocks提供了一个庞大的预构建组件和模板库，用户可以轻松定制并集成到应用程序中。这通过提供常见功能的现成解决方案，如数据可视化、表单输入和工作流自动化，节省了时间和精力。</li>
<li>无缝集成：Superblocks无缝集成了各种第三方服务和API，使用户能够将外部工具和数据源整合到他们的应用程序中。这确保了与现有系统的兼容性，增强了开发工具的功能和多样性。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="superblocks的好处">Superblocks的好处<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#superblocks%E7%9A%84%E5%A5%BD%E5%A4%84" class="hash-link" aria-label="Direct link to Superblocks的好处" title="Direct link to Superblocks的好处">​</a></h3>
<ul>
<li>快速开发：凭借其直观的界面和丰富的组件库，Superblocks加速了开发过程。视觉方法和现成的组件减少了手工编码的需求，使内部工具的原型设计和部署更加快速。</li>
<li>可定制性：Superblocks允许用户根据特定要求定制其应用程序。该平台在设计用户界面、工作流程和数据集成方面提供了灵活性，确保开发的工具与组织的独特需求和品牌指南相一致。</li>
<li>成本效益：通过提供低代码解决方案，Superblocks减少了对传统开发</li>
</ul>
<p>资源和昂贵编码工作的依赖。这意味着组织可以创建和维护内部工具，而无需大量的开发团队或专业技术知识，从而实现了重大的成本节省。</p>
<ul>
<li>可扩展性：Superblocks旨在与不断增长的企业一起发展。无论组织需要构建简单的内部工具还是复杂的企业级应用程序，Superblocks都可以满足可扩展性要求，确保开发的工具可以处理增加的数据量和用户需求。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#retool" class="hash-link" aria-label="Direct link to Retool" title="Direct link to Retool">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/retool.png" alt="retool" class="img_CfaS"></p>
<p>Retool是一款受欢迎的低代码开发平台，使组织能够以高效和高效的方式构建内部工具。凭借其直观的界面和强大的功能，Retool使企业能够创建定制的应用程序，无需广泛的编码知识。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool的关键特点">Retool的关键特点<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#retool%E7%9A%84%E5%85%B3%E9%94%AE%E7%89%B9%E7%82%B9" class="hash-link" aria-label="Direct link to Retool的关键特点" title="Direct link to Retool的关键特点">​</a></h3>
<ul>
<li>拖放界面：Retool提供了一个用户友好的拖放界面，允许用户以视觉方式设计和组装他们的应用程序。这简化了开发过程，使技术和非技术用户都能够快速构建功能性的内部工具。</li>
<li>广泛的集成能力：Retool无缝集成了各种数据源和API，包括数据库、REST API和第三方服务。这允许用户在其应用程序中利用现有的数据和系统，简化工作流程并增强功能。</li>
<li>预构建的组件和模板：Retool提供了一个庞大的预构建组件和模板库，用户可以利用这些组件来加速开发。这些组件涵盖了常见功能，如数据表、表单、图表和身份验证，从而节省了从头开始构建这些功能的时间和精力。</li>
<li>实时协作：Retool提供了实时协作功能，使团队成员能够同时在项目上共同工作。这促进了协作，促进了知识共享，并通过消除版本控制问题和瓶颈来简化开发过程。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool的优势">Retool的优势：<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#retool%E7%9A%84%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="Direct link to Retool的优势：" title="Direct link to Retool的优势：">​</a></h3>
<ul>
<li>速度和效率：Retool的直观界面和预构建组件允许快速开发，缩短了内部工具的上市时间。该平台消除了从头开始构建的需要，使开发人员能够专注于定制和微调应用程序，而不是构建基本功能。</li>
<li>可定制性：尽管采用了低代码方法，但Retool提供了广泛的定制选项。用户可以根据特定的业务需求和品牌指南定制其应用程序的外观、行为和工作流程。</li>
<li>集成灵活性：Retool的强大集成能力使其适用于拥有各种技术堆栈的组织。该平台可以与各种数据源和API无缝连接，确保与现有系统的兼容性，并允许应用程序之间无缝传输数据。</li>
</ul>
<p>尽管在列表中排名最后，Retool也是作为CRUD应用程序的一个出色选择。它是一个拖放构建块平台。为了从外部数据库中提取数据，您需要定制JavaScript。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="结论">结论<a href="https://illacloud.github.io/illa-website/zh/blog/best-low-code-platform#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="Direct link to 结论" title="Direct link to 结论">​</a></h2>
<p>这些都是2024年最有前景的低代码工具，每个工具都具有其自身的特点。不同的情况需要不同的问题解决方法，我们希望读者能够在适当的情况下选择最有效的解决方案来进行开发。利用低代码工具，加速您的工作，提早回家。</p>]]></content>
        <author>
            <name>Owen Chen</name>
            <uri>https://github.com/smallSohoSolo</uri>
        </author>
        <category label="低代码" term="低代码"/>
    </entry>
</feed>