<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ILLA Cloud Blog</title>
        <link>https://illacloud.com/ja/blog</link>
        <description>ILLA Cloud Blog</description>
        <lastBuildDate>Tue, 27 Feb 2024 10:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>ja</language>
        <copyright>Copyright © 2025 ILLA.</copyright>
        <item>
            <title><![CDATA[React エラー境界: React エラーをより強力に処理する方法]]></title>
            <link>https://illacloud.com/ja/blog/react-error-boundary</link>
            <guid>https://illacloud.com/ja/blog/react-error-boundary</guid>
            <pubDate>Tue, 27 Feb 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[Reactアプリケーションでreact-error-boundaryを使用することにより、より強力なエラー処理とより簡単なデバッグが可能になります。このライブラリを利用することで、エラー管理に費やす時間を減らし、杰出な製品機能の構築に集中できます。]]></description>
            <content:encoded><![CDATA[<p>アプリケーションを構築する際、エラーは避けられません。最高のコーディングプラクティスを採用しても、予期しないランタイムエラーが発生し、アプリケーションがクラッシュすることがあります。そのため、エラー処理は非常に重要です。この記事では、Reactでエラーをキャッチし処理する方法を探求し、Reactエラーを処理するためのより強力な方法を紹介します！</p>
<p>Reactでエラーをキャッチする理由は？React 16以降、ライフサイクル中にエラーが発生し、キャッチされなければ、アプリケーション全体がアンマウントされ、クラッシュすることになります。以前は、コンポーネント内の小さなエラーが画面に残っていたが、現在はUIの一部やコントロールできないサードパーティライブラリからの未キャッチエラーがページをクラッシュさせ、白い画面にし、ユーザーエクスペリエンスに影響を与えることがあります。そのため、Reactでエラーをキャッチし処理することが必要です。</p>
<p>JavaScriptでは、<code>try...catch</code>を使用してエラーをキャッチできます。例えば：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">fetchData</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"https://some-url-that-might-fail.com"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>try...catch</code>は、データ取得などの命令型コードに適していますが、コンポーネント内で書かれたJSXなどの宣言型コードには適していません。では、Reactでエラーをキャッチする方法は？幸運なことに、React 16では新しい概念であるReactエラー境界（Error Boundary）が導入されました。それとは何か、どのように使用するかを見てみましょう。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="reactエラー境界とは">Reactエラー境界とは？<a href="https://illacloud.com/ja/blog/react-error-boundary#react%E3%82%A8%E3%83%A9%E3%83%BC%E5%A2%83%E7%95%8C%E3%81%A8%E3%81%AF" class="hash-link" aria-label="Reactエラー境界とは？ への直接リンク" title="Reactエラー境界とは？ への直接リンク">​</a></h2>
<p>Reactエラー境界（Error Boundary）は、Reactアプリケーションでのエラー処理を扱う方法です。それは、子コンポーネントツリーのどこかでJavaScriptエラーをキャッチし、これらのエラーをログに記録し、クラッシュしたコンポーネントツリー（白い画面）ではなく、フォールバックUIを表示するReactコンポーネントです。彼らは、コンポーネントにのみ適用されるJavaScriptの<code>catch {}</code>ブロックのようなものです。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="基本的な使用方法">基本的な使用方法<a href="https://illacloud.com/ja/blog/react-error-boundary#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" class="hash-link" aria-label="基本的な使用方法 への直接リンク" title="基本的な使用方法 への直接リンク">​</a></h2>
<p>エラー境界の導入前に、コンポーネント内のエラーは伝播し、最終的には白い画面や誤ったUIにつながり、ユーザーエクスペリエンスに影響を与えることになります。しかし、エラー境界を使用すると、これらの未処理のエラーを効果的にコンテインメントと管理できます。</p>
<p>アプリケーション全体にエラー境界を設定するか、個々のコンポーネントにより細かい制御をすることができます。エラー境界は、レンダリング、ライフサイクルメソッド、コンストラクターの間で発生したエラーのみをキャッチし、以下はキャッチしません：</p>
<ul>
<li>イベント処理（これには、通常の<code>try/catch</code>ブロックを使用する必要があります）</li>
<li>非同期コード（例えば、<code>setTimeout</code>や<code>requestAnimationFrame</code>のコールバック）</li>
<li>サーバーサイドレンダリング</li>
<li>エラー境界自体内で発生するエラー、子コンポーネントではなく</li>
</ul>
<p>React v16でエラー境界を使用するには、クラスコンポーネントを定義し、以下の1つまたは両方のライフサイクルメソッドを追加する必要があります：</p>
<ul>
<li><code>getDerivedStateFromError()</code>：エラーがスローされた後にフォールバックUIをレンダリングするために呼び出されるライフサイクルメソッド。レンダリングフェーズ中に呼び出されるため、副作用は許可されていません。</li>
<li><code>componentDidCatch()</code>：エラー情報をログに記録するために使用されるメソッド。コミットフェーズ中に呼び出されるため、副作用を実行できます。</li>
</ul>
<p>以下は、<code>getDerivedStateFromError()</code>と<code>componentDidCatch()</code>の両方のライフサイクルメソッドを実装した<code>ErrorBoundary</code>クラスコンポーネントの例です：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">ErrorBoundary</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name">React</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">super</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">state</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hasError</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">static</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getDerivedStateFromError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// 次のレンダリングでフォールバックUIを表示するために状態を更新します。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hasError</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">componentDidCatch</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> errorInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> errorInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">render</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">hasError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// カスタムフォールバックUIをレンダリングします</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain">h1</span><span class="token operator">&gt;</span><span class="token maybe-class-name">Oops</span><span class="token operator">!</span><span class="token plain"> 何かがうまくいきませんでした。</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">h1</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">props</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// コンポーネントでの使用</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">App</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name">React</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">render</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ここでは、<code>ErrorBoundary</code>エラー境界コンポーネントが定義されています。コンストラクターは状態オブジェクトを初期化し、<code>hasError</code>プロパティを<code>false</code>に設定しています。これにより、エラーが発生していないことを示しています。</p>
<ul>
<li><code>getDerivedStateFromError()</code>メソッドは、エラーがキャッチされたときに呼び出され、<code>error</code>オブジェクトをパラメータとして受け取り、新しい状態オブジェクトを返します。これにより、次のレンダリングでフォールバックUIが表示されます。</li>
<li><code>componentDidCatch()</code>メソッドは、エラーがキャッチされた後に呼び出され、エラーとエラー情報をコンソールにログに記録します。</li>
</ul>
<p><code>render()</code>メソッドでは、<code>hasError</code>の値に基づいて、元の子コンポーネントのレンダリングまたはフォールバックUIのレンダリングを決定します。<code>hasError</code>がtrueの場合は、<code>&lt;h1&gt;Oops! 何かがうまくいきませんでした。&lt;/h1&gt;</code>をレンダリングします。そうでない場合は、元の子コンポーネントをレンダリングします。Reactコンポーネントでエラー境界を使用する際は、エラー境界保護が必要な任意のコンポーネントを<code>&lt;ErrorBoundary&gt;</code>でラップします。これにより、小さなコンポーネントのクラッシュが全体アプリケーションのクラッシュにつながらず、白い画面になります。エラーがあるコンポーネントのみが正常にレンダリングされず、フォールバックUIが表示され、問題のあるコンポーネントを迅速に特定するのが容易になります。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="エラー境界の実装一般的なデザインパターン">エラー境界の実装：一般的なデザインパターン<a href="https://illacloud.com/ja/blog/react-error-boundary#%E3%82%A8%E3%83%A9%E3%83%BC%E5%A2%83%E7%95%8C%E3%81%AE%E5%AE%9F%E8%A3%85%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AA%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" class="hash-link" aria-label="エラー境界の実装：一般的なデザインパターン への直接リンク" title="エラー境界の実装：一般的なデザインパターン への直接リンク">​</a></h3>
<p>Reactエラー境界を実装する際には、以下の3つのデザインパターンのうちの1つを使用できます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="コンポーネントレベルのエラー境界">コンポーネントレベルのエラー境界<a href="https://illacloud.com/ja/blog/react-error-boundary#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%AC%E3%83%99%E3%83%AB%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E5%A2%83%E7%95%8C" class="hash-link" aria-label="コンポーネントレベルのエラー境界 への直接リンク" title="コンポーネントレベルのエラー境界 への直接リンク">​</a></h3>
<p>このアプローチでは、エラー境界で個々のコンポーネントをラップします。これにより、各コンポーネント内のエラーを分離して処理できる高い粒度が提供されます。コンポーネントがクラッシュすると、エラー境界はエラーをキャッチし、コンポーネントツリーに伝播するのを防ぎます。これは、クラッシュしたコンポーネントのみが影響を受け、残りのアプリケーションが正常に実行されることを意味します。</p>
<p>コンポーネントレベルのエラー境界は、相互に分離され、状態を共有しないコンポーネントがある場合に特に役立ちます。1つのコンポーネントがレンダリングに失敗しても、他のコンポーネントには影響しません。しかし、多くのコンポーネントが独自のエラー境界を必要とする場合、この方法は大量の重複コードを招く可能性があります。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="トップレベルエラー境界">トップレベルエラー境界<a href="https://illacloud.com/ja/blog/react-error-boundary#%E3%83%88%E3%83%83%E3%83%97%E3%83%AC%E3%83%99%E3%83%AB%E3%82%A8%E3%83%A9%E3%83%BC%E5%A2%83%E7%95%8C" class="hash-link" aria-label="トップレベルエラー境界 への直接リンク" title="トップレベルエラー境界 への直接リンク">​</a></h3>
<p>トップレベルエラー境界は、コンポーネントツリーの最上位に配置されます。アプリケーション内でのあらゆるエラーを処理できる一般的な解決策です。このアプローチは、アプリケーションのどこかでエラーが発生した場合でも、それをキャッチして優雅に処理できることを保証します。</p>
<p>これにより、エラーが発生した場合にアプリケーション全体がクラッシュするのを防ぐことができます。ただし、トップレベルエラー境界は最も粗い方法です。エラーは、エラーが発生したコンポーネントやコンポーネントグループだけでなく、アプリケーション全体に影響を与えることができます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="react-error-boundary-ライブラリの使用"><code>react-error-boundary</code> ライブラリの使用<a href="https://illacloud.com/ja/blog/react-error-boundary#react-error-boundary-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%BD%BF%E7%94%A8" class="hash-link" aria-label="react-error-boundary-ライブラリの使用 への直接リンク" title="react-error-boundary-ライブラリの使用 への直接リンク">​</a></h2>
<p>前述したように、Reactエラー境界にはいくつかの制限があり、特定の特殊なケースを処理できないことがあります。以下は、Reactでエラーを処理するためのより強力な方法です：<code>react-error-boundary</code> ライブラリ。これは、Reactアプリケーションでのエラーを処理するための強化された機能とより柔軟な方法を提供する小さなReactエラー処理ライブラリであり、開発者がより強力でユーザーフレンドリーなエラー処理メカニズムを作成することを可能にします。</p>
<p><code>react-error-boundary</code>は、React Hooksと関数コンポーネントを採用するより現代的なアプローチを取り、React開発の現在のトレンドに合わせています。それは、潜在的なエラーをラップするシンプルなコンポーネント <code>ErrorBoundary</code> を使用します。</p>
<p><code>react-error-boundary</code>が提供するpropsは以下の通りです：</p>
<ul>
<li><code>FallbackComponent</code>：エラー境界内でエラーが発生した場合にレンダリングするカスタムコンポーネントを指定するために使用されます。エラーを表示し、必要なアクションを提供するための視覚的に魅力的で情報豊富なユーザーインターフェースを作成する柔軟性を提供します。</li>
<li><code>fallbackRender</code>：<code>FallbackComponent</code>と似ていますが、このpropsはエラーフォールバックインターフェースをレンダリングするためのカスタムレンダリング関数を定義するために使用されます。レンダリングプロセスをより制御でき、より高度なエラー処理ロジックを可能にします。</li>
<li><code>onError</code>：エラー境界がエラーをキャッチしたときに呼び出されるコールバック関数を受け入れます。エラーオブジェクトとコンポーネントスタックトレース情報を渡します。エラーをログに記録したり、エラーレポートを外部サービスに送信するなどの追加のアクションを実行できます。</li>
<li><code>onReset</code>：エラー境界が正常にリセットされた後にトリガーされるコールバック関数を受け入れます。エラーが回復された後にコンポーネントの状態を更新したり、クリーンアップ操作を実行したりするために使用できます。</li>
<li><code>fallbackProps</code>：<code>FallbackComponent</code>または<code>fallbackRender</code>関数に追加の<code>props</code>を渡すことができます。エラーフォールバックインターフェースにコンテキストや追加のデータを提供するために使用できます。</li>
<li><code>retry</code>：エラー境界がエラーを引き起こした操作を再試行することを許可するかどうかを決定するブール値。trueに設定すると、エラーフォールバックインターフェースから<code>resetErrorBoundary</code>関数を呼び出して操作を再試行できます。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="errorboundary-コンポーネント">ErrorBoundary コンポーネント<a href="https://illacloud.com/ja/blog/react-error-boundary#errorboundary-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88" class="hash-link" aria-label="ErrorBoundary コンポーネント への直接リンク" title="ErrorBoundary コンポーネント への直接リンク">​</a></h2>
<p><code>react-error-boundary</code>が提供する<code>ErrorBoundary</code>コンポーネントには、エラーがキャッチされたときに表示する関数またはReact要素を受け入れる<code>fallbackRender</code>というpropsがあります。また、特定のpropsが変更されたときにコンポーネントの状態をリセットできる<code>resetKeys</code>というpropsも提供します。</p>
<p><code>react-error-boundary</code>の魅力は、クラスコンポーネントを手動で書くことや状態を管理する必要がないことです。すべてがバックグラウンドで行われ、開発者がアプリケーションの構築に集中できるようにします。以下は、コンポーネントで<code>react-error-boundary</code>を使用する例です：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ErrorBoundary</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyFallbackComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> resetErrorBoundary </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token plain">div role</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"alert"</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Oops</span><span class="token operator">!</span><span class="token plain"> 何かがうまくいきませんでした：</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">resetErrorBoundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"> 再試行 </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">div</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// JavaScriptエラーを投げる可能性のあるコンポーネントロジック</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">MyFallbackComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      onReset</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// アプリケーションの状態をクリーンアップします</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      resetKeys</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'someKey'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この例では、<code>ErrorBoundary</code>がエラーをキャッチすると、<code>MyFallbackComponent</code>をレンダリングします。エラーメッセージを表示し、エラー状態をリセットしてコンポーネントを再レンダリングを試行するボタンを提供します。<code>onReset</code> propsは、エラーが投げられた前の副作用をクリーンアップするために使用され、<code>resetKeys</code> propsは、コンポーネントの状態がリセットされるタイミングを制御するために使用されます。</p>
<p><code>ErrorBoundary</code>の<code>onError</code> propsは、エラーがキャッチされるたびに呼び出される関数です。このプロパティはエラーを報告するために使用できます：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// エラー報告関数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">logErrorToService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// エラー報告ロジック...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"エラーをキャッチしました："</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      onError</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">logErrorToService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>react-error-boundary</code>の最も強力な機能の1つは、エラー境界の状態をリセットする能力です。これにより、エラーをクリアしてコンポーネントツリーを再レンダリングを試みることができます。これは、一時的なネットワークエラーなど、エラーが一時的である可能性がある場合に非常に便利です。</p>
<p>フォールバックコンポーネントに提供される<code>resetErrorBoundary</code>関数は、エラー境界をリセットするために使用できます。例えば、この関数は、ボタンクリックで呼び出され、ユーザーが失敗した操作を手動で再試行することを可能にします。</p>
<p><code>ErrorBoundary</code>は、エラー状態がリセットされる前に呼び出される<code>onReset</code> propsを受け入れることができます。この関数は、エラー後にコンポーネントが再レンダリングされる前にクリーンアップや状態リセット操作を実行するために役立ちます。</p>
<p><code>resetKeys</code> propsは、変更が特定の<code>props</code>または状態値を変更したときにエラー境界をリセットする値の配列です。これは、特定の<code>props</code>または状態値の変更がエラーを解決する場合に便利です。これらのプロパティの使用方法の例は以下の通りです：</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">ErrorBoundary</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> error</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> resetErrorBoundary </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token plain">div role</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"alert"</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Oops</span><span class="token operator">!</span><span class="token plain"> 何かがうまくいきませんでした：</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">p</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">pre</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">resetErrorBoundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"> 再試行 </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">div</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> someKey </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// JavaScriptエラーを投げる可能性のあるコンポーネントロジック</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setSomeKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      onReset</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setSomeKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ここでアプリケーションの状態をリセットします</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      resetKeys</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// someKeyが変更されたときにエラー境界をリセットします</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> someKey</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この例では、<code>MyComponent</code>内でエラーがキャッチされた場合、<code>ErrorFallback</code>コンポーネントがレンダリングされ、エラーメッセージを表示し、「再試行」ボタンを提供します。このボタンがクリックされると、<code>resetErrorBoundary</code>を呼び出して、<code>onReset</code>関数をトリガーし、エラー状態をクリアして<code>MyComponent</code>を再レンダリングします。<code>someKey</code>が変更されると、エラー境界もリセットされ、アプリケーションの状態の変更に基づいてエラーから回復する柔軟な方法を提供します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="useerrorhandler-フック">useErrorHandler フック<a href="https://illacloud.com/ja/blog/react-error-boundary#useerrorhandler-%E3%83%95%E3%83%83%E3%82%AF" class="hash-link" aria-label="useErrorHandler フック への直接リンク" title="useErrorHandler フック への直接リンク">​</a></h3>
<p><code>react-error-boundary</code>は、関数コンポーネントのどこからでもエラーをスローできるカスタムReactフックである<code>useErrorHandler</code>も提供しています。スローされたエラーは、最近のエラー境界によってキャッチされます。これは、クラスコンポーネントのライフサイクルメソッドやレンダリング関数からスローされたエラーがエラー境界によってキャッチされるのと同様です。</p>
<p><code>useErrorHandler</code>フックは、非同期コードを扱う際に特に便利です。なぜなら、この方法でスローされたエラーはコンポーネントエラー境界によってキャッチされないからです。以下は<code>useErrorHandler</code>を使用する例です。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> useErrorHandler </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> handleError </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useErrorHandler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetchData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// データの取得</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token function" style="color:rgb(80, 250, 123)">handleError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token spread operator">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token plain"> </span><span class="token maybe-class-name">FallbackComponent</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ErrorBoundary</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この例では、<code>MyComponent</code>は<code>useErrorHandler</code>を使用してエラー処理用の関数を取得します。この関数は、データを取得し、エラーをキャッチするための非同期関数です。エラーが発生すると、エラーを<code>handleError</code>関数に渡し、エラーをスローして<code>ErrorBoundary</code>によってキャッチされるようにします。</p>
<p><code>useErrorHandler</code>は、関数コンポーネントでのエラー処理の強力な方法を提供します。<code>react-error-boundary</code>の<code>ErrorBoundary</code>コンポーネントとシームレスに連携し、Reactでのエラー処理をより直感的で明確にします。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="witherrorboundary-hoc">withErrorBoundary HOC<a href="https://illacloud.com/ja/blog/react-error-boundary#witherrorboundary-hoc" class="hash-link" aria-label="withErrorBoundary HOC への直接リンク" title="withErrorBoundary HOC への直接リンク">​</a></h2>
<p><code>react-error-boundary</code>パッケージは、<code>withErrorBoundary HOC</code>（Higher-Order Component）というソリューションも提供しています。これは、指定されたコンポーネント内でエラーをキャッチするためにラップするHOCです。このアプローチの利点は、コンポーネントのオリジナル実装を変更せず、コンポーネントツリーに追加のJSXを追加することなく、エラー境界をコンポーネントに追加できることです。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> withErrorBoundary </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'react-error-boundary'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// コンポーネントロジック</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token maybe-class-name">MyComponentWithErrorBoundary</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">withErrorBoundary</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token maybe-class-name">MyComponent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">FallbackComponent</span><span class="token operator">:</span><span class="token plain"> </span><span class="token maybe-class-name">ErrorFallback</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">onError</span><span class="token operator">:</span><span class="token plain"> logErrorToService</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">onReset</span><span class="token operator">:</span><span class="token plain"> handleReset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token literal-property property">resetKeys</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'someKey'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">App</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token maybe-class-name">MyComponentWithErrorBoundary</span><span class="token plain"> someKey</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">someKey</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この例では、<code>MyComponent</code>は<code>withErrorBoundary</code>を使用してエラー境界でラップされます。<code>withErrorBoundary</code>の2番目の引数は、<code>ErrorBoundary</code>コンポーネントと同じ<code>props</code>を提供できるオプションオブジェクトです：<code>FallbackComponent</code>、<code>onError</code>、<code>onReset</code>、<code>resetKeys</code>。</p>
<p>このHOCアプローチは、実装を変更せずにコンポーネントにエラー境界を追加するための優雅な解決策です。特に<code>Hooks</code>を使用できないクラスコンポーネントには便利です。<code>react-error-boundary</code>が異なるコーディングスタイルやReact開発パラダイムに適応する柔軟性を示しています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="利点">利点<a href="https://illacloud.com/ja/blog/react-error-boundary#%E5%88%A9%E7%82%B9" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h2>
<p><code>react-error-boundary</code>の基本的な使用方法を見てみましたが、<code>react-error-boundary</code>を使用する利点を要約しましょう。</p>
<ul>
<li>使いやすい：ライブラリはシンプルで直感的なAPIを提供し、エラー処理の複雑性を抽象化して、開発者がエラーを管理するための明確で直截了な方法を提示します。</li>
<li>関数コンポーネントに優しい：従来のReactエラー境界がクラスコンポーネントを要求するのに対し、react-error-boundaryは関数コンポーネントに特化した設計です。Hooksを使用し、React開発の現在のトレンドに合わせています。</li>
<li>柔軟性：ライブラリは、コンポーネント、高階コンポーネント（HOCs）、カスタムフックなど、エラー境界を使用する複数の方法を提供します。この柔軟性により、開発者はニーズとコーディングスタイルに基づいて最適な方法を選択できます。</li>
<li>カスタマイズ可能なフォールバックUI：ライブラリは、エラーがキャッチされたときに表示されるカスタマイズ可能なフォールバックUIを許可します。これにより、アプリケーションのクラッシュや空白画面よりもユーザーエクスペリエンスが向上します。</li>
<li>リセット機能：ライブラリはエラー状態をリセットでき、アプリケーションがエラーから回復できます。この機能は、完全なページリロードなしで解決できる一時的なエラーに特に役立ちます。</li>
<li>エラー報告：<code>onError</code>プロパティを介してエラーをエラー報告サービスにログに記録でき、デバッグと問題解決のための貴重な情報を提供します。</li>
<li>コミュニティとメンテナンス：ライブラリはReactコミュニティで広く使用されており、積極的にメンテナンスされています。そのため、定期的なアップデートと改善が期待できます。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/react-error-boundary#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>クラスコンポーネントを使用している場合でも、関数コンポーネントを使用している場合でも、<code>react-error-boundary</code>はカバーしています。その柔軟なAPIには、コンポーネント、高階コンポーネント、カスタムフックが含まれており、エラー処理をコンポーネントに統合する複数の方法を提供しています。さらに、カスタマイズ可能なフォールバックUI、エラーリセット機能、エラー報告をサポートし、問題が発生した場合でも滑らかなユーザーエクスペリエンスを確保します。</p>
<p>Reactアプリケーションで<code>react-error-boundary</code>を使用することにより、より強力なエラー処理とより簡単なデバッグが可能になります。このライブラリを利用することで、エラー管理に費やす時間を減らし、杰出な製品機能の構築に集中できます。</p>]]></content:encoded>
            <category>react</category>
            <category>コンポーネント</category>
            <category>ライブラリ</category>
        </item>
        <item>
            <title><![CDATA[Remarkを使用してNext.jsブログにインタラクティブな目次を作成する]]></title>
            <link>https://illacloud.com/ja/blog/react-markdown</link>
            <guid>https://illacloud.com/ja/blog/react-markdown</guid>
            <pubDate>Mon, 26 Feb 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[目次には多くの利点があり、特にブログなどのWebサイトにとって価値のある追加機能です。整理されたナビゲーションしやすい目次は、必要な情報を見つけるプロセスを読者にとって容易にすることでユーザーエクスペリエンスを大幅に向上させます。目次を追加することで、読者にシンプルなナビゲーションを提供するだけでなく、コンテンツの全体的なアクセシビリティと使いやすさを向上させることができます。]]></description>
            <content:encoded><![CDATA[<p>目次には多くの利点があり、特にブログなどのWebサイトにとって価値のある追加機能です。整理されたナビゲーションしやすい目次は、必要な情報を見つけるプロセスを読者にとって容易にすることでユーザーエクスペリエンスを大幅に向上させます。目次を追加することで、読者にシンプルなナビゲーションを提供するだけでなく、コンテンツの全体的なアクセシビリティと使いやすさを向上させることができます。</p>
<p>この記事では、強力なMarkdownプロセッサであるRemarkを使用して、Next.jsブログにインタラクティブな目次を作成するために必要な手順を説明します。 一部のRemarkプラグイン(remark-tocなど)はこの機能を提供していますが、生成された目次はコンテンツ自体の内部にあり、その可能な用途が制限されます。 たとえば、このブログの目次はブログコンテンツの外側にレンダリングされているため、ナビゲーション中に表示されたままです。 これは、このチュートリアルで構築する目次のタイプです。 Remarkの基本、そのプラグイン、Next.jsとの統合についての簡単な説明から始めます。 次に、カスタム目次を実装する実際の手順を詳しく調べ、最後に目次のアイテムをクリックするとページが対応するセクションにスクロールするインタラクティブなものにします。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="remarkとそのプラグイン">Remarkとそのプラグイン<a href="https://illacloud.com/ja/blog/react-markdown#remark%E3%81%A8%E3%81%9D%E3%81%AE%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3" class="hash-link" aria-label="Remarkとそのプラグイン への直接リンク" title="Remarkとそのプラグイン への直接リンク">​</a></h2>
<p>Remarkは、MarkdownファイルをHTMLやその他の形式に変換するプロセスを簡略化する拡張可能なMarkdownプロセッサです。 Remarkの重要な点は、開発者が機能を拡張およびカスタマイズできるようにするプラグインベースのアーキテクチャです。 これらのプラグインは、構文のハイライト表示、目次の追加、カスタムMarkdown構文の解析などのタスクを処理できます。 RemarkをNext.jsと統合することは非常に簡単です。通常、ビルドプロセス中にMarkdownファイルを処理するためにgetStaticProps関数とともに使用されます。 MDXファイルも処理できるため、新しい「アプリ」ディレクトリを使用するNext.js Webサイトの実行可能な選択肢です。 Remarkの強力な処理機能とNext.jsとのシームレスな統合により、Next.jsブログとWebサイトのコンテンツとユーザーエクスペリエンスを向上させるのに理想的な選択肢です。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="はじめに">はじめに<a href="https://illacloud.com/ja/blog/react-markdown#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB" class="hash-link" aria-label="はじめに への直接リンク" title="はじめに への直接リンク">​</a></h2>
<p>カスタム目次を構築していますが、すべてをゼロから記述する必要はありません。 Markdown/MDXコンテンツをフロントマターから分離するために、Gray-matterパッケージを使用します。 Markdownファイルにフロントマターがない場合はオプションです。 Markdown自体を処理するために、Remarkパッケージを使用します。 ノードツリーを走査するunist-util-visitパッケージと、ノードのテキストコンテンツを取得するmdast-util-to-stringパッケージも必要です。</p>
<p>これらのパッケージをすべてインストールしましょう。</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm i remark mdast-util-to-string gray-matter unist-util-visit</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="コンテンツから見出しを抽出するためのカスタムremarkプラグイン">コンテンツから見出しを抽出するためのカスタムRemarkプラグイン<a href="https://illacloud.com/ja/blog/react-markdown#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%8B%E3%82%89%E8%A6%8B%E5%87%BA%E3%81%97%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0remark%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3" class="hash-link" aria-label="コンテンツから見出しを抽出するためのカスタムRemarkプラグイン への直接リンク" title="コンテンツから見出しを抽出するためのカスタムRemarkプラグイン への直接リンク">​</a></h2>
<p>目次をレンダリングする前に、すべての見出しをMarkdownファイルから抽出し、ノード配列として編成する必要があります。 このプロセスは次の手順に分けることができます。</p>
<ol>
<li>ファイルコンテンツを解析して、フロントマターとコンテンツを区別する。</li>
<li>各見出し要素にIDを生成します。 これは、後で「部分にスクロール」機能を実装するために必要です。</li>
<li>コンテンツを解析し、見出しとその属性を抽出する。</li>
</ol>
<p>第2ステップの場合、 <code>##見出し1 {#heading-id}</code> のようなカスタムMarkdown属性としてIDを手動で追加し、<code>Remark-heading-id</code> のようなライブラリを使用してHTMLとしてレンダリングできます。 ただし、この方法では見出しの手動追加とメンテナンスが必要で、効率が悪くなります。 より効率的な方法は、HTMLにレンダリングされたときに、見出し <code>Heading 1</code> が自動的に <code>heading-1</code> というIDを取得するように、見出しテキストに基づいてIDを自動生成することです。</p>
<p>さらに、カスタムRemarkプラグインを作成することにより、ステップ2と3を組み合わせることができます。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">headingTree</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> file</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    file</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">headings</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getHeadings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getHeadings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">root</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> nodes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> output </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> indexMap </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">visit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">root</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">addID</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">transformNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ここでは、ドキュメントから見出しを抽出して処理済みコンテンツに <code>headings</code> プロパティとして追加するカスタム Remark プラグイン <code>headingTree</code> があります。</p>
<p>プラグインの主なコンポーネントは、ノードツリーを走査し操作するアクセサー関数である <code>getHeadings</code> 関数です。 読みやすさのために、この関数は2つの部分に分割されています。</p>
<p><code>addID</code>関数は、ドキュメント内の見出しノードを巡回し、すべての特殊文字を置き換え、スペースをダッシュに置き換えた小文字の文字列として出力します。 これらのIDは見出しの <code>hProperties</code> 属性に保存されます。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">addID</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">id</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">nodes</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string interpolation">id</span><span class="token template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation operator">&gt;</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation number">1</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation operator">?</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation template-string string" style="color:rgb(255, 121, 198)"> </span><span class="token template-string interpolation template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation template-string interpolation">nodes</span><span class="token template-string interpolation template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token template-string interpolation template-string interpolation">id</span><span class="token template-string interpolation template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token template-string interpolation template-string interpolation"> </span><span class="token template-string interpolation template-string interpolation operator">-</span><span class="token template-string interpolation template-string interpolation"> </span><span class="token template-string interpolation template-string interpolation number">1</span><span class="token template-string interpolation template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string interpolation template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation operator">:</span><span class="token template-string interpolation"> </span><span class="token template-string interpolation string" style="color:rgb(255, 121, 198)">""</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">replace</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token regex regex-delimiter">/</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token regex regex-source language-regex char-class char-class-negation operator">^</span><span class="token regex regex-source language-regex char-class range">a</span><span class="token regex regex-source language-regex char-class range range-punctuation operator">-</span><span class="token regex regex-source language-regex char-class range">z</span><span class="token regex regex-source language-regex char-class range">A</span><span class="token regex regex-source language-regex char-class range range-punctuation operator">-</span><span class="token regex regex-source language-regex char-class range">Z</span><span class="token regex regex-source language-regex char-class char-set class-name">\d</span><span class="token regex regex-source language-regex char-class char-set class-name">\s</span><span class="token regex regex-source language-regex char-class">-</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token regex regex-delimiter">/</span><span class="token regex regex-flags">g</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">split</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">" "</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"-"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">toLowerCase</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>各見出しがドキュメントで発生する回数を追跡するために <code>nodes</code> 変数を使用していることに注意してください。 これは、ドキュメントで複数回発生する見出し(たとえば、一部のセクションには同じテキストのサブ見出しがある場合があります)に数値のプレフィックスを付けるためです。 <code>transformNode</code> 関数は、解析された Markdown 抽象構文木(AST)から取得したノードを受け取り、目次の構築に適した形式に変換します。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> toString </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"mdast-util-to-string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">transformNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> output</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> transformedNode </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">toString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token plain"> </span><span class="token operator">===</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> parent </span><span class="token operator">=</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">parent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      parent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">push</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      indexMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">depth</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> transformedNode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この関数は、ノードが深さ2(Markdownの##要素)を持っているかどうかをチェックします。 はいの場合、変換されたノードが出力配列に追加され、<code>indexMap</code> の対応する深さの位置に保存されます。 これは、変換されたノードがディレクトリのトップレベルにあることを意味します。 ここで、深さ2をトップレベルの深さとして指定しています。これにより、HTML出力で <code>&lt;h2&gt;</code> タグが生成されます。 深さ1は使用しません。ページ上に複数の <code>&lt;h1&gt;</code> 要素があると、そのページのアクセシビリティとSEOの点で望ましくありません。</p>
<p>ノードの深さが大きい場合(たとえば、###または####要素)、この関数は <code>indexMap</code> で現在のノードの1つ上の深さの位置(つまり、 <code>node.depth - 1</code>)を調べて親ノードを特定します。 親ノードが見つかった場合、変換されたノードが親ノードの <code>children</code> 配列に追加され、 <code>indexMap</code> が適切に更新されます。 これは、下位レベルのノードが上位レベルノードの子ノードになる目次の入れ子構造の構築に役立ちます。</p>
<p>この関数が適切に機能するには、ディレクトリに有効な構造が必要です。つまり、ノードの深さがレベル2から直接レベル4に飛ぶべきではありません。</p>
<p>これで、<code>getHeadings</code>関数を実装するために必要なすべてが揃いました。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports">matter</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"gray-matter"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> remark </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"remark"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> headingTree </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"./headings"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> postsDirectory </span><span class="token operator">=</span><span class="token plain"> path</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">process</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">cwd</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"posts"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">getHeadings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fullPath </span><span class="token operator">=</span><span class="token plain"> path</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">postsDirectory</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">id</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)">.mdx</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fileContents </span><span class="token operator">=</span><span class="token plain"> fs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">readFileSync</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">fullPath</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"utf8"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Use gray-matter to parse the post metadata section</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> matterResult </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">matter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">fileContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// Use remark to convert Markdown into HTML string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> processedContent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">remark</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">use</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">headingTree</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">process</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">matterResult</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> processedContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">headings</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>これで、ドキュメントからの見出し配列とそのデータ属性が得られました。 配列の構造は次のとおりです。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-1"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-2"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 3"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-3"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Heading 4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">depth</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">hProperties</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"heading-4"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="目次のレンダリング">目次のレンダリング<a href="https://illacloud.com/ja/blog/react-markdown#%E7%9B%AE%E6%AC%A1%E3%81%AE%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0" class="hash-link" aria-label="目次のレンダリング への直接リンク" title="目次のレンダリング への直接リンク">​</a></h2>
<p>これでタイトルデータが得られたので、目次をレンダリングするために使用できます。 まず、目次のレンダリングロジックのラッパーとなる <code>TableOfContents</code> コンポーネントを作成します。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token string" style="color:rgb(255, 121, 198)">"use client"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">TableOfContents</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> nodes </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token plain">nodes</span><span class="token operator">?.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword null nil" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"toc"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">h3</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"secondary-text"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">目次</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">h3</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next.jsの「アプリ」ディレクトリを使用している場合は、 <code>"use client"</code>ディレクティブを使用してこのコンポーネントをクライアントコンポーネントとしてマークする必要があることに注意してください。</p>
<p>目次自体のレンダリングは、<code>renderNodes</code>関数によって管理されます。 レンダリングロジックは再帰的であるため、コンポーネント内で定義するのではなく、個別の関数を使用します。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">data</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">hProperties</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">#</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">data</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">hProperties</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token operator">?.</span><span class="token plain">length </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>目次の各要素は、<code>href</code>属性を介して対応する見出しIDを指すリンクです。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="目次リンクをクリックしたときにスムーススクロールエフェクトを追加する">目次リンクをクリックしたときにスムーススクロールエフェクトを追加する<a href="https://illacloud.com/ja/blog/react-markdown#%E7%9B%AE%E6%AC%A1%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E3%82%B9%E3%83%A0%E3%83%BC%E3%82%B9%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B" class="hash-link" aria-label="目次リンクをクリックしたときにスムーススクロールエフェクトを追加する への直接リンク" title="目次リンクをク�リックしたときにスムーススクロールエフェクトを追加する への直接リンク">​</a></h2>
<p>基本的な目次が完成しました。記事をレンダリングするページで、<code>await getHeadings(postId)</code> を呼び出すか、「ページ」ディレクトリを使用している場合は <code>getStaticProps</code> 内でこの操作を実行することによって見出しを取得し、そのデータを TableOfContents コンポーネントに渡すことができます。記事ページ上で目次リンクをクリックしたとき、ページの対応する部分に移動する必要があります。ただし、見出しに突然ジャンプする代わりに、スムーススクロールを有効にできます。追加の強化として、深さに基づいて子リンクのフォントサイズを徐々に縮小できます。</p>
<p>これを実現するために、スムーススクロールと個々のリンクスタイルを担当する <code>TOCLink</code> コンポーネントを導入し、 <code>renderNodes</code> 内でそれを使用します。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">data</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">hProperties</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">TOCLink</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">node</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token operator">?.</span><span class="token plain">length </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">renderNodes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">children</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">TOCLink</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> node </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fontSizes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token number">2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"base"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"sm"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xs"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">hProperties</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">#</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">block text-</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">fontSizes</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">depth</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)"> hover:accent-color py-1</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 121, 198)">e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(255, 121, 198)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">preventDefault</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        </span><span class="token tag script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">getElementById</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">scrollIntoView</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">behavior</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"smooth"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">block</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"start"</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">      </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Web ページ上の特定の要素にスムーススクロールするために、最初に ID を使用して要素を特定し、 <code>behavior: "smooth"</code> オプションを使用した <code>scrollIntoView</code> メソッドを使用します。このメソッドの詳細については、 <code>MDN</code>  Webサイトをご覧ください。このメソッドはブラウザのサポートが広範囲に渡っていますが、 <code>smooth</code> オプションは一部の古いブラウザと互換性がない場合があります。この方法を採用することで、今では目次リンクをクリックすると以前の突然の遷移ではなくきれいなスクロールアニメーションが発生します。</p>
<p>見出し要素にスクロールするときにオフセットを追加する必要がある場合(ページに固定ナビゲーションバーがある場合など)は、見出し要素に <code>scroll-margin-top</code> CSSプロパティを適用できます。</p>
<p>加えて、<code>TailwindCSS</code> とその <code>text</code> ユーティリティクラスを使用して、深さに基づいて目次リンクのフォントサイズを徐々に縮小できます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="アクティブリンクの強調表示">アクティブリンクの強調表示<a href="https://illacloud.com/ja/blog/react-markdown#%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E5%BC%B7%E8%AA%BF%E8%A1%A8%E7%A4%BA" class="hash-link" aria-label="アクティブリンクの強調表示 への直接リンク" title="アクティブリンクの強調表示 への直接リンク">​</a></h2>
<p>目次ナビゲーションを強化するための最後のポイントは、対応する見出しがページ上に表示されているときに目次リンクを強調表示することです。</p>
<p>ページ上の要素の可視性を検出するために、 <code>Intersection Observer API</code> を使用します。この API はブラウザのサポートが広範囲に渡っていますが、いくつかの小さな問題があります。 加えて、この機能をカスタムフックに移し替えます。このフックは、リンクが強調表示されているかどうかを示すブール値を返し、強調表示状態を手動で設定するコールバックを提供します。 このフックは、 <code>TOCLink</code> コンポーネントで使用されます。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> useEffect</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> useRef</span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token imports"> useState </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"react"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useHighlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> observer </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">activeId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setActiveId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">useEffect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">handleObserver</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">entries</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      entries</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">forEach</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">entry</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">entry</span><span class="token operator">?.</span><span class="token plain">isIntersecting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token function" style="color:rgb(80, 250, 123)">setActiveId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">target</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    observer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">IntersectionObserver</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">handleObserver</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token literal-property property">rootMargin</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"0% 0% -35% 0px"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> elements </span><span class="token operator">=</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">querySelectorAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"h2, h3, h4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    elements</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">forEach</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">elem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> observer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">observe</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">elem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> observer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token operator">?.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">disconnect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">activeId </span><span class="token operator">===</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setActiveId</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(80, 250, 123)">TOCLink</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token parameter"> node </span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> fontSizes </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token number">2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"base"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"sm"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xs"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">hProperties</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">highlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> setHighlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">useHighlighted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">href</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">#</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">block text-</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">fontSizes</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">node</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation property-access" style="color:rgb(255, 121, 198)">depth</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)"> hover:accent-color py-1 </span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">        highlighted </span><span class="token tag script language-javascript template-string interpolation operator" style="color:rgb(255, 121, 198)">&amp;&amp;</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript template-string interpolation string" style="color:rgb(255, 121, 198)">"accent-color"</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">      </span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">      </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 121, 198)">e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(255, 121, 198)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        e</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">preventDefault</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        </span><span class="token tag script language-javascript function" style="color:rgb(80, 250, 123)">setHighlighted</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">        </span><span class="token tag script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">getElementById</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript method function property-access" style="color:rgb(80, 250, 123)">scrollIntoView</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">behavior</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"smooth"</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 121, 198)">block</span><span class="token tag script language-javascript operator" style="color:rgb(255, 121, 198)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript string" style="color:rgb(255, 121, 198)">"start"</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">      </span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag" style="color:rgb(255, 121, 198)"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token tag" style="color:rgb(255, 121, 198)">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">a</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>このフックの <code>handleObserver</code> 関数は、<code>Intersection Observer</code> のコールバック関数として機能し、観察対象の要素の可視性の変更を処理し、エントリー配列をパラメータとして受け取ります。 <code>handleObserver</code> 関数は、h2、h3、h4要素を含むエントリーを反復処理し、 <code>isIntersecting</code> プロパティが <code>true</code> であるかどうかをチェックします。つまり、要素がビューポート内で可視であるかどうかを示します。可視の場合は、 <code>setActiveId</code> を使用して目次内のアクティブなセクションを更新します。リンクがクリックされると、 <code>setHighlighted</code> コールバックを使用してそれを強調表示に設定します。</p>
<p>加えて、新しい <code>Intersection Observer</code> インスタンスを <code>ref</code> に格納して、コンポーネントのレンダリング中にそのアイデンティティを保持します。</p>
<p>ページをスクロールすると、ページが対応するセクションに到達したときに目次内のアクティブなセクションがどのように更新されるかを、このページでこの目次の実際の効果を確認できます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/react-markdown#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>全体として、Remarkとカスタムプラグインを使用してNext.jsブログ用の目次を作成することで、Webサイトのユーザーエクスペリエンスとアクセシビリティが大幅に向上します。 Remarkという強力なマークダウン・プロセッサと、その豊富なプラグインの範囲により、マークダウンファイルから見出しを簡単に抽出し、インタラクティブでナビゲーションが容易な目次に変換することができます。</p>
<p>目次を導入することで、Next.jsブログ上のユーザーエクスペリエンスを向上させ、読者が必要な情報をより簡単に見つけられるようになります。 加えて、Remarkを使用してカスタム目次プラグインを作成することで、コンテンツから目次を分離してコンテンツの可用性とアクセシビリティを向上させることができます。 <code>mdast-util-to-string</code> や <code>unist-util-visit</code> などのプラグインを使用することで、コンテンツから見出しを抽出し、一意のIDを生成し、目次の構築に適した形式に解析できます。</p>
<p>このチュートリアルでは、入れ子構造、スムーススクロール、アクティブリンクの強調表示を備えたカスタム目次を作成することで、このプロセスを案内しました。 したがって、読者は今や関心のあるコンテンツをすばやく見つけてナビゲートできるようになり、ブログの全体的な可用性と価値が向上しました。</p>]]></content:encoded>
            <category>postgresql</category>
            <category>select</category>
        </item>
        <item>
            <title><![CDATA[PostgreSQL SELECT ステートメント]]></title>
            <link>https://illacloud.com/ja/blog/postgresql-select</link>
            <guid>https://illacloud.com/ja/blog/postgresql-select</guid>
            <pubDate>Wed, 21 Feb 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[この記事では、`PostgreSQL` の `SELECT` ステートメントの基本的な形式と、`SELECT` ステートメントを使用してテーブルからデータをクエリする方法について説明します。 `PostgreSQL` では、`SELECT` ステートメントは1つまたは複数のテーブルからデータを取得するために使用される可能性が最も高いステートメントです。]]></description>
            <content:encoded><![CDATA[<p>この記事では、<code>PostgreSQL</code> の <code>SELECT</code> ステートメントの基本的な形式と、<code>SELECT</code> ステートメントを使用してテーブルからデータをクエリする方法について説明します。</p>
<p><code>PostgreSQL</code> では、<code>SELECT</code> ステートメントは1つまたは複数のテーブルからデータを取得するために使用される可能性が最も高いステートメントです。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-構文">PostgreSQL SELECT 構文<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E6%A7%8B%E6%96%87" class="hash-link" aria-label="PostgreSQL SELECT 構文 への直接リンク" title="PostgreSQL SELECT 構文 への直接リンク">​</a></h2>
<p>単一のテーブルからデータを取得する <code>SELECT</code> ステートメントの基本的な形式から始めましょう。</p>
<p><code>SELECT</code> ステートメントの構文は次のとおりです。</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    expr_list</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    table_name</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">other_clauses</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この構文では:</p>
<ul>
<li><code>SELECT</code> と <code>FROM</code> はキーワードです。</li>
<li><code>expr_list</code> は選択する列または式のリストです。複数の列または式はコンマで区切る必要があります。</li>
<li><code>table_name</code> はクエリ対象のデータテーブルです。</li>
<li><code>FROM table_name</code> はオプションです。テーブルから行をクエリしていない場合は、<code>FROM</code> 句を省略できます。</li>
<li><code>other_clauses</code> は <code>SELECT</code> ステートメントでサポートされている句です。 <code>SELECT</code> ステートメントは、次のような多くの句をサポートしています。<!-- -->
<ul>
<li><code>DISTINCT</code> 演算子を使用して、重複のない行を選択します。</li>
<li><code>ORDER BY</code> 句を使用して行を並べ替えます。</li>
<li><code>WHERE</code> 句を使用して行をフィルタリングします。</li>
<li><code>LIMIT</code> または <code>FETCH</code> 句を使用して、テーブルから行のサブセットを選択します。</li>
<li><code>GROUP BY</code> 句を使用して行をグループ化します。</li>
<li><code>HAVING</code> 句を使用してグループをフィルタリングします。</li>
<li><code>INNER JOIN</code>、<code>LEFT JOIN</code>、<code>FULL OUTER JOIN</code>、<code>CROSS JOIN</code>などの結合を使用して、他のテーブルと結合します。</li>
<li><code>UNION</code>、<code>INTERSECT</code>、<code>EXCEPT</code>を使用して集合演算を実行します。</li>
</ul>
</li>
</ul>
<p>SQLキーワードは大文字と小文字を区別しません。ただし、SQLコードの読みやすさのために、SQLキーワードを大文字で書くことをお勧めします。</p>
<p>このチュートリアルでは、<code>SELECT</code> ステートメントの基本的な使用方法に焦点を当てます。関連する他の句の使用方法は、後続のチュートリアルで説明します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-の例">PostgreSQL SELECT の例<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E3%81%AE%E4%BE%8B" class="hash-link" aria-label="PostgreSQL SELECT の例 への直接リンク" title="PostgreSQL SELECT の例 への直接リンク">​</a></h2>
<p>PostgreSQLの <code>SELECT</code> ステートメントの使用例を見ていきましょう。</p>
<p>デモンストレーションには、<code>PostgreSQL Sakila</code> サンプルデータベースの <code>customer</code> テーブルを使用します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-を使用して1列のデ�ータをクエリする">PostgreSQL SELECT を使用して1列のデータをクエリする<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A61%E5%88%97%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%99%E3%82%8B" class="hash-link" aria-label="PostgreSQL SELECT を使用して1列のデータをクエリする への直接リンク" title="PostgreSQL SELECT を使用して1列のデータをクエリする への直接リンク">​</a></h3>
<p>次の <code>SELECT</code> ステートメントは、<code>customer</code> テーブルからすべての顧客の名前を見つけます。</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> first_name </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>出力の一部は次のとおりです。</p>
<div class="codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-text codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">first_name</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARY  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PATRICIA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LINDA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BARBARA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ELIZABETH</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">JENNIFER</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARIA</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">SUSAN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARGARET</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">DOROTHY</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>SELECT</code> ステートメントの末尾にセミコロン(;)を追加したことに注意してください。セミコロンはSQLステートメントの一部ではありません。これは、SQLステートメントの終了をPostgreSQLに通知するために使用されます。セミコロンは、2つのSQLステートメントも区切るために使用されます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-を使用して複数列のデータをクエリする">PostgreSQL SELECT を使用して複数列のデータをクエリする<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E8%A4%87%E6%95%B0%E5%88%97%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%99%E3%82%8B" class="hash-link" aria-label="PostgreSQL SELECT を使用して複数列のデータをクエリする への直接リンク" title="PostgreSQL SELECT を使用して複数列のデータをクエリする への直接リンク">​</a></h3>
<p>顧客の名前、姓、メールアドレスが必要な場合は、次のクエリで示すように、<code>SELECT</code> 句でこれらの列名を指定できます。</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    first_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    last_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    email</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>出力の一部は次のとおりです。</p>
<div class="codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-text codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">first_name | last_name |                email                </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------+-----------+-------------------------------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARY       | SMITH     | MARY.SMITH@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PATRICIA   | JOHNSON   | PATRICIA.JOHNSON@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">LINDA      | WILLIAMS  | LINDA.WILLIAMS@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BARBARA    | JONES     | BARBARA.JONES@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ELIZABETH  | BROWN     | ELIZABETH.BROWN@sakilacustomer.org  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">JENNIFER   | DAVIS     | JENNIFER.DAVIS@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARIA      | MILLER    | MARIA.MILLER@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">SUSAN      | WILSON    | SUSAN.WILSON@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MARGARET   | MOORE     | MARGARET.MOORE@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">DOROTHY    | TAYLOR    | DOROTHY.TAYLOR@sakilacustomer.org</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-を使用してテーブルのすべての列のデータをクエリする">PostgreSQL SELECT を使用してテーブルのすべての列のデータをクエリする<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AE%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E5%88%97%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%99%E3%82%8B" class="hash-link" aria-label="PostgreSQL SELECT を使用してテーブルのすべての列のデータをクエリする への直接リンク" title="PostgreSQL SELECT を使用してテーブルのすべての列のデータをクエリする への直接リンク">​</a></h3>
<p><code>SELECT</code> ステートメントを使用して <code>customer</code> テーブルからすべての列を見つけるには、次のステートメントを使用します。</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>出力の一部は次のとおりです。</p>
<div class="codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-text codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> customer_id | store_id | first_name | last_name |                email                 | address_id | activebool | create_date |     last_update     | active</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------+----------+------------+-----------+-------------------------------------+------------+------------+-------------+---------------------+--------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           1 |        1 | MARY       | SMITH     | MARY.SMITH@sakilacustomer.org        |          5 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           2 |        1 | PATRICIA   | JOHNSON   | PATRICIA.JOHNSON@sakilacustomer.org |          6 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           3 |        1 | LINDA      | WILLIAMS  | LINDA.WILLIAMS@sakilacustomer.org   |          7 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           4 |        2 | BARBARA    | JONES     | BARBARA.JONES@sakilacustomer.org    |          8 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           5 |        1 | ELIZABETH  | BROWN     | ELIZABETH.BROWN@sakilacustomer.org  |          9 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           6 |        2 | JENNIFER   | DAVIS     | JENNIFER.DAVIS@sakilacustomer.org   |         10 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           7 |        1 | MARIA      | MILLER    | MARIA.MILLER@sakilacustomer.org     |         11 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           8 |        2 | SUSAN      | WILSON    | SUSAN.WILSON@sakilacustomer.org     |         12 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           9 |        2 | MARGARET   | MOORE     | MARGARET.MOORE@sakilacustomer.org   |         13 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          10 |        1 | DOROTHY    | TAYLOR    | DOROTHY.TAYLOR@sakilacustomer.org   |         14 | t          | 2006-02-14  | 2006-02-15 04:57:20 |      1</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この例では、<code>SELECT</code> 句でアスタリスク(<em>)を使用しています。これはすべての列の省略形です。アスタリスク(</em>)を使用すると、 <code>customer</code> テーブルのすべての列名をリストする代わりに、より少ない入力で済みます。</p>
<p>ただし、<code>SELECT</code> ステートメントでアスタリスク(*)を使用することはあまり良い習慣ではありません。理由は次のとおりです。</p>
<ol>
<li>
<p>データベースのパフォーマンス。多くの列と大量のデータを含むテーブルがあるとします。アスタリスク(*)の省略形を持つ <code>SELECT</code> ステートメントは、アプリケーションにとって必要ない可能性があるテーブルのすべての列からデータを選択します。</p>
</li>
<li>
<p>アプリケーションのパフォーマンス。データベースから不要なデータを取得すると、データベースサーバーとアプリケーションサーバー間のトラフィックが増加します。したがって、アプリケーションの応答時間が遅くなり、スケーラビリティが低下する可能性があります。</p>
</li>
</ol>
<p>これらの理由から、<code>SELECT</code> 句で列名を明示的に指定し、データベースから必要なデータのみを取得することをお勧めします。</p>
<p>アスタリスク(*)の省略形は、データベースデータを点検するためのアドホッククエリでのみ使用する必要があります。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-で式を使用する">PostgreSQL SELECT で式を使用する<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E3%81%A7%E5%BC%8F%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B" class="hash-link" aria-label="PostgreSQL SELECT で式を使用する への直接リンク" title="PostgreSQL SELECT で式を使用する への直接リンク">​</a></h3>
<p>列名に加えて、<code>SELECT</code> ステートメントで式を使用することもできます。次の例では、<code>SELECT</code> ステートメントを使用して、すべての顧客のフルネームとメールアドレスを返します。</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    first_name </span><span class="token operator">||</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">' '</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> last_name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    email</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    customer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>出力の一部は次のとおりです。</p>
<div class="codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-text codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">     ?column?      |                email                 </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------------+-------------------------------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> MARY SMITH        | MARY.SMITH@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> PATRICIA JOHNSON  | PATRICIA.JOHNSON@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> LINDA WILLIAMS    | LINDA.WILLIAMS@sakilacustomer.org  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> BARBARA JONES     | BARBARA.JONES@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> ELIZABETH BROWN   | ELIZABETH.BROWN@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> JENNIFER DAVIS    | JENNIFER.DAVIS@sakilacustomer.org </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> MARIA MILLER      | MARIA.MILLER@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> SUSAN WILSON      | SUSAN.WILSON@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> MARGARET MOORE    | MARGARET.MOORE@sakilacustomer.org</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> DOROTHY TAYLOR    | DOROTHY.TAYLOR@sakilacustomer.org</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>この例では、文字列連結演算子 || を使用して、各顧客の名前、スペース、姓を連結しました。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="postgresql-select-で式を計算する">PostgreSQL SELECT で式を計算する<a href="https://illacloud.com/ja/blog/postgresql-select#postgresql-select-%E3%81%A7%E5%BC%8F%E3%82%92%E8%A8%88%E7%AE%97%E3%81%99%E3%82%8B" class="hash-link" aria-label="PostgreSQL SELECT で式を計算する への直接リンク" title="PostgreSQL SELECT で式を計算する への直接リンク">​</a></h3>
<p>式の結果だけが必要な場合は、<code>SELECT</code> ステートメントから <code>FROM</code> 句を省略できます。次の <code>SELECT</code> ステートメントは、 <code>5 * 3</code> の結果を計算するために使用されます。</p>
<div class="language-sql codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-sql codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>出力は次のとおりです。</p>
<div class="codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-text codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">?column?</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">----------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">       15</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="まとめ">まとめ<a href="https://illacloud.com/ja/blog/postgresql-select#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="まとめ への直接リンク" title="まとめ への直接リンク">​</a></h2>
<p>このチュートリアルでは、単一のテーブルからデータをクエリするための PostgreSQL <code>SELECT</code> ステートメントの基本的な形式の使用方法を学びました。テーブルからのデータのクエリが必要ない場合は、<code>SELECT</code> ステートメントから <code>FROM</code> 句を省略できます。</p>]]></content:encoded>
            <category>postgresql</category>
            <category>select</category>
        </item>
        <item>
            <title><![CDATA[PostgreSQLのISNULLおよびISNOTNULLのベストプラクティス]]></title>
            <link>https://illacloud.com/ja/blog/postgresql-isnull</link>
            <guid>https://illacloud.com/ja/blog/postgresql-isnull</guid>
            <pubDate>Sun, 04 Feb 2024 11:00:00 GMT</pubDate>
            <description><![CDATA[この記事では、PostgreSQLの `IS NULL` 演算子を使用して値が `NULL` かどうかを確認する方法について説明します。PostgreSQLの `IS NULL` は、値が `NULL` かどうかを確認するブール演算子です。`NULL` 値は何も示さない特殊な値であり、空の文字列でもなく、falseでもありません。]]></description>
            <content:encoded><![CDATA[<p>この記事では、PostgreSQLの <code>IS NULL</code> 演算子を使用して値が <code>NULL</code> かどうかを確認する方法について説明します。PostgreSQLの <code>IS NULL</code> は、値が <code>NULL</code> かどうかを確認するブール演算子です。<code>NULL</code> 値は何も示さない特殊な値であり、空の文字列でもなく、falseでもありません。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresqlのis-null構文">PostgreSQLのIS NULL構文<a href="https://illacloud.com/ja/blog/postgresql-isnull#postgresql%E3%81%AEis-null%E6%A7%8B%E6%96%87" class="hash-link" aria-label="PostgreSQLのIS NULL構文 への直接リンク" title="PostgreSQLのIS NULL構文 への直接リンク">​</a></h2>
<p>PostgreSQLの <code>IS NULL</code> は、単項比較演算子で、1つのオペランドだけが必要です。 <code>IS NULL</code> 演算子の構文は次のとおりです。</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">expr IS NULL</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">expr IS NOT NULL</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコード�をコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>分解:</strong></p>
<ul>
<li><code>expr</code> はフィールド名、値、または式になります。</li>
<li><code>IS NOT NULL</code> は <code>IS NULL</code> の否定です。</li>
<li><code>IS NULL</code> および <code>IS NOT NULL</code> は <code>SELECT</code> ステートメントまたは <code>WHERE</code> 句で使用できます。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresqlのis-null演算子の規則">PostgreSQLのIS NULL演算子の規則<a href="https://illacloud.com/ja/blog/postgresql-isnull#postgresql%E3%81%AEis-null%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E8%A6%8F%E5%89%87" class="hash-link" aria-label="PostgreSQLのIS NULL演算子の規則 への直接リンク" title="PostgreSQLのIS NULL演算子の規則 への直接リンク">​</a></h2>
<p>PostgreSQLの <code>IS NULL</code> 演算子の左側のオペランドが <code>NULL</code> の場合、<code>IS NULL</code> 演算子は <code>t</code> を返し、それ以外の場合は <code>f</code> を返します。</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    NULL IS NULL "NULL IS NULL",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0 IS NULL "0 IS NULL",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    1 IS NULL "1 IS NULL";</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> NULL IS NOT NULL | 0 IS NOT NULL | 1 IS NOT NULL</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------------+---------------+---------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> f                | t             | t</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="postgresqlのis-nullの例">PostgreSQLのIS NULLの例<a href="https://illacloud.com/ja/blog/postgresql-isnull#postgresql%E3%81%AEis-null%E3%81%AE%E4%BE%8B" class="hash-link" aria-label="PostgreSQLのIS NULLの例 への直接リンク" title="PostgreSQLのIS NULLの例 への直接リンク">​</a></h2>
<p>デモンストレーションには <code>Sakila</code> サンプルデータベースのテーブルを使用します。まず、PostgreSQLに <code>Sakila</code> サンプルデータベースをインストールしてください。</p>
<p><code>Sakila</code> サンプルデータベースは最も広く使用されているサンプルデータベースの1つです。<code>Sakila</code> サンプルデータベースは元々MySQL ABドキュメンテーションチームの元メンバーであるMike Hillyerによって開発されました。これは、本、チュートリアル、記事などでの例示に使用できる標準のスキーマを提供するように設計されています。</p>
<p><code>Sakila</code> データベースはDVDレンタル店のビジネスをモデル化しており、映画、俳優、映画俳優の関係、および映画、店舗、レンタルトランザクションを接続する中央の在庫テーブルを含んでいます。</p>
<p>最高のサンプルデータベースの1つとして、<code>Sakila</code> データベースはPostgreSQL、Oracle、DB2、およびSQLiteなどのプラットフォームに移植されています。</p>
<p><code>Sakila</code> サンプルデータベースでは、<code>staff</code> テーブルがDVDレンタル店の従業員情報を保存しています。</p>
<p><code>staff</code> テーブルでは、<code>picture</code> が従業員の写真ファイルを保存しています。<code>staff</code> テーブルから写真をアップロードしていない従業員をクエリするには、<code>picture</code> が <code>NULL</code> かどうかを確認する必要があります。次の <code>IS NULL</code> を使用したSQLステートメントを使用します。</p>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain">SELECT</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    first_name, last_name, picture</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">FROM</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    staff</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WHERE</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    picture IS NULL;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-shell codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-shell codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token plain"> first_name | last_name | picture</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------+-----------+---------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> Mike       | Hillyer   | &lt;null&gt;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"> Jon        | Stephens  | &lt;null&gt;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/postgresql-isnull#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>この記事では、PostgreSQLの <code>IS NULL</code> および <code>IS NOT NULL</code> 比較演算子の構文と使用方法を学びました。以下はこの記事の要点です。</p>
<ul>
<li><code>IS NULL</code> および <code>IS NOT NULL</code> は単項比較演算子です。</li>
<li><code>IS NULL</code> 演算子を使用して値が <code>NULL</code> かどうかを確認します。</li>
<li><code>IS NOT NULL</code> 演算子は <code>IS NULL</code> の否定形です。</li>
<li><code>NULL IS NULL</code> は true と評価されます。</li>
</ul>]]></content:encoded>
            <category>postgresql</category>
            <category>isnull</category>
            <category>isnotnull</category>
        </item>
        <item>
            <title><![CDATA[2024年に最も人気のある5つのReactコンポーネントライブラリ]]></title>
            <link>https://illacloud.com/ja/blog/react-component-library</link>
            <guid>https://illacloud.com/ja/blog/react-component-library</guid>
            <pubDate>Mon, 29 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[Reactは、ユーザーインターフェイスを構築するための人気のあるJavaScriptライブラリです。Facebook、Instagram、Netflix、Airbnb、Uberなど多くの企業が使用しています。また、WordPress、Drupal、Magentoなどの多くのオープンソースプロジェクトでも使用されています。]]></description>
            <content:encoded><![CDATA[<p>Reactは、ユーザーインターフェイスを構築するための人気のあるJavaScriptライブラリです。Facebook、Instagram、Netflix、Airbnb、Uberなど多くの企業が使用しています。また、WordPress、Drupal、Magentoなどの多くのオープンソースプロジェクトでも使用されています。</p>
<p>多くのインターフェイスを構築する際、適切なReactコンポーネントライブラリを選択する必要があります。これらのコンポーネントライブラリは、ユーザーインターフェイスを迅速に構築するのに役立ちます。また、ボタン、フォーム、チャート、テーブルなどの再利用可能なコンポーネントも提供しており、テーマ、アニメーション、ルーティング、状態管理など多くの機能も提供しています。</p>
<p>市場には多くのReactコンポーネントライブラリがあります。各ライブラリには独自の特徴、利点、欠点、価格があります。このブログ記事では、2024年に最も人気のある5つのReactコンポーネントライブラリを紹介し、その特徴、使いやすさ、互換性を比較します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="コンポーネントライブラリを選択する理由">コンポーネントライブラリを選択する理由<a href="https://illacloud.com/ja/blog/react-component-library#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B%E7%90%86%E7%94%B1" class="hash-link" aria-label="コンポーネントライ��ブラリを選択する理由 への直接リンク" title="コンポーネントライブラリを選択する理由 への直接リンク">​</a></h2>
<p>一般的に、企業はウェブアプリケーションを構築する際、コンポーネントライブラリを選択して重複作業を簡略化します。コンポーネントライブラリは、セレクトボックス、入力フィールド、チェックボックスなどの使用準備ができたコンポーネントセットを提供し、独自のスタイルをカスタマイズできるか、内蔵の魅力的なスタイルを備えており、ゼロからウェブサイトを迅速に開発できます。</p>
<p>要するに、通常、コンポーネントライブラリを使用する場合は2つのシナリオがあります：</p>
<ul>
<li>外部ツール：企業ユーザー向けで、通常、企業のスタイルに一致し、より魅力的な外観、レスポンスが高い外観を備えています。</li>
<li>内部ツール：企業の従業員向けに設計され、デザイン美学と迅速な機能実現を強調しています。</li>
</ul>
<p>次に、以下のいくつかの側面に基づいてコンポーネントライブラリを分析します：</p>
<ol>
<li>利点</li>
<li>欠点</li>
<li>選択の方法</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="内部ツールのシナリオでの最適な選択肢">内部ツールのシナリオでの最適な選択肢<a href="https://illacloud.com/ja/blog/react-component-library#%E5%86%85%E9%83%A8%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA%E3%81%A7%E3%81%AE%E6%9C%80%E9%81%A9%E3%81%AA%E9%81%B8%E6%8A%9E%E8%82%A2" class="hash-link" aria-label="内部ツールのシナリオでの最適な選択肢 への直接リンク" title="内部ツールのシナリオでの最適な選択肢 への直接リンク">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、簡単なJSを使用して内部ツールを迅速に構築することができるノーコードツールです。複雑なフロントエンドプロジェクトを作成する必要はありません。プラグアンドプレイで、ドラッグアンドドロップでUIを構築できます。</p>
<ul>
<li>ウェブおよびアプリ管理パネル</li>
<li>データダッシュボード</li>
<li>カスタムのB2Bツール</li>
</ul>
<p>コンポーネントライブラリを使用して構築するよりも、ILLA Cloudは10倍速くツールを構築でき、チーム内で協力して編集できます。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/dashboard.png" alt="dashboard" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="mui">MUI<a href="https://illacloud.com/ja/blog/react-component-library#mui" class="hash-link" aria-label="MUI への直接リンク" title="MUI への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/mui.png" alt="MUI" class="img_CfaS"></p>
<p>⭐ GitHubスターズ：90k</p>
<p>⏬ NPMダウンロード数：週間3,263,852回ダウンロード</p>
<p>💪🏼 初リリース日：2014年11月6日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点">利点<a href="https://illacloud.com/ja/blog/react-component-library#%E5%88%A9%E7%82%B9" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<p>MUIのコンポーネントは非常に包括的で、MUIのコンポーネントには次のような部分があります：</p>
<ul>
<li>MUI Core：ボタン、フォーム、アイコン、チャート、テーブルなどのコアコンポーネント。</li>
<li>MUI X：高度なコンポーネント、データテーブル、複雑なチャートなど。</li>
</ul>
<p>MUIを使用すると、ほぼすべてのシナリオをカバーでき、複雑なデータ処理や表示のために他のコンポ</p>
<p>ーネントライブラリを選択する必要はありません。</p>
<p>Material Designのスタイルが好きな場合、MUIを使用することをお勧めします。Googleスタイルの完全なアプリケーションを変更せずに構築できます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点">欠点<a href="https://illacloud.com/ja/blog/react-component-library#%E6%AC%A0%E7%82%B9" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<p>MUI Xの複雑なデータ処理コンポーネントは有料です。</p>
<p>MUIはMaterial Designの実装として、デザインスタイルが厳格で、カスタマイズが必要な場合、追加の作業が必要かもしれません。</p>
<p>MUIのカスタムスタイルシステムはEmotionJsを使用して全体的なレイアウトのスタイル調整を行いますが、これには学習コースが必要であり、直接開発に適していない場合があります。一部のスタイル変更を行うにはドキュメントを参照する必要があります。</p>
<p>CSS-IN-JSの方法が好きでない場合、MUIは最適な選択肢ではないかもしれません。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="shadcn-ui">Shadcn UI<a href="https://illacloud.com/ja/blog/react-component-library#shadcn-ui" class="hash-link" aria-label="Shadcn UI への直接リンク" title="Shadcn UI への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/shadcnui.png" alt="Shadcn UI" class="img_CfaS"></p>
<p>⭐ GitHubスターズ：37k</p>
<p>⏬ NPMダウンロード数：週間23,962回ダウンロード</p>
<p>💪🏼 初リリース日：2023年3月8日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点-1">利点<a href="https://illacloud.com/ja/blog/react-component-library#%E5%88%A9%E7%82%B9-1" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<p>比較的新しいプロジェクトとして、Shadcn UIはオープンソースコミュニティで急速に認識されています。また、Shadcnは新しいプロジェクトであるため、過去の遺産を持たず、新しいテクノロジースタックにより適応しやすくなっています。</p>
<p>Shadcn UIのデザインスタイルはビジネス寄りで、クリーンなユーザーインターフェイスを持っており、内部ツールや真面目なアプリケーションシナリオに適しています。Shadcn UIはカスタムテーマをサポートし、いくつかのプリセットスタイルも提供しており、カスタムデザインスタイルが不要なシナリオでは、素早くアプリケーションを構築できます。Shadcn UIの最大の利点は、ライブラリではなく、コードを直接使用して統合することであり、追加の作業は必要ありません。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-1">欠点<a href="https://illacloud.com/ja/blog/react-component-library#%E6%AC%A0%E7%82%B9-1" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<p>Shadcn UIのテーマはCSS変数に基づいており、IE11をサポートしていないことを意味します。IE11のサポートが必要な場合、Shadcn UIは最適な選択肢ではないかもしれません。</p>
<p>また、Shadcn UIのテーマ変更方法はCSS変数またはTailwind CSSユーティリティクラスに基づいており、CSS-IN-JSの方法を使用している場合、追加の作業が必要かもしれません。</p>
<p>Shadcn UIは他のコンポーネントライブラリと比較して保守時間が短く、DataGrid、Chartなどの複雑なコンポーネントをサポートしていないため、すべての作業をコンポーネントライブラリで実行できないことを意味します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="chakra-ui">Chakra UI<a href="https://illacloud.com/ja/blog/react-component-library#chakra-ui" class="hash-link" aria-label="Chakra UI への直接リンク" title="Chakra UI への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/chakraui.png" alt="chakra-ui" class="img_CfaS"></p>
<p>⭐ GitHub スター：35.8k</p>
<p>⏬ NPM ダウンロード数：週毎 534,188 回のダウンロード</p>
<p>💪🏼 初リリース日：2019年12月7日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="長所">長所<a href="https://illacloud.com/ja/blog/react-component-library#%E9%95%B7%E6%89%80" class="hash-link" aria-label="長所 への直接リンク" title="長所 への直接リンク">​</a></h3>
<p>Chakra UIは、商業的なスタイルのコンポーネントライブラリであり、特定のスタイルに縛られず、多くの人の美的感覚に適しています。</p>
<p>コンポーネントライブラリとして、Chakra UIには非常に大規模なテンプレートマーケットがあり、主要なシーンのほとんどに対応した完全なテンプレートをChakra UIのテンプレートマーケットで見つけることができます。これにより、テンプレートを直接使用したり、カスタマイズしたりすることができます。</p>
<p>Chakra UIのほとんどの機能は設定が必要ないため、迅速なプロトタイプの作成に非常に役立ちます。また、レスポンシブに対応しており、さまざまなデバイスでプレビューできます。</p>
<p>Chakra UIはSEO対応であり、SEO対応の製品を作成する際に必要です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="短所">短所<a href="https://illacloud.com/ja/blog/react-component-library#%E7%9F%AD%E6%89%80" class="hash-link" aria-label="短所 への直接リンク" title="短所 への直接リンク">​</a></h3>
<p>Chakra UIのコンポーネントの多様性は不十分であり、データ処理やチャートなどの複雑なシーンではサポートされておらず、他のソリューションを探すための追加の作業が必要です。</p>
<p>Chakra UIを使用して複雑なツール製品やSaaSを構築することはお勧めしません。また、Chakra UIはカスタマイズ性にも限界があるため、Landing Pageを作成するのに適しています。</p>
<p>Chakra UIには豊富なテンプレートマーケットがありますが、これらのテンプレートは無料ではありません。テンプレートを購入するには追加の費用がかかります。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ant-design">Ant Design<a href="https://illacloud.com/ja/blog/react-component-library#ant-design" class="hash-link" aria-label="Ant Design への直接リンク" title="Ant Design への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/antd.png" alt="ant-design" class="img_CfaS"></p>
<p>⭐ GitHub スター：89.1k</p>
<p>⏬ NPM ダウンロード数：週毎 1,264,151 回のダウンロード</p>
<p>💪🏼 初リリース日：2015年7月21日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="長所-1">長所<a href="https://illacloud.com/ja/blog/react-component-library#%E9%95%B7%E6%89%80-1" class="hash-link" aria-label="長所 への直接リンク" title="長所 への直接リンク">​</a></h3>
<p>成熟した上場企業がメンテナンスするコンポーネントライブラリであるAnt Designは、最も多様なコンポーネントを提供し、非常に安定しています。大規模な変更は発生しません。</p>
<p>ReactとVueのスタイルを統一したい場合、Ant Designは最適な選択肢です。Ant DesignはReactだけでなく、Vueもサポートしています。</p>
<p>Ant Designには基本コンポーネントのコレクションだけでなく、Web3のコンポーネントのコレクションも含まれており、Web3アプリケーションの構築に使用できます。</p>
<p>Ant Designはデータグラフ、ビッグデータシーン、マップなどに特化したカスタマイズされたコンポーネントライブラリを提供し、非常に複雑なデータダッシュボードシーンをサポートできます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="短所-1">短所<a href="https://illacloud.com/ja/blog/react-component-library#%E7%9F%AD%E6%89%80-1" class="hash-link" aria-label="短所 への直接リンク" title="短所 への直接リンク">​</a></h3>
<p>Ant Designには多くのサポートがあるため、Tableコンポーネントのパフォーマンスなど、一部の歴史的な問題があります。そのため、他のソリューションを探すための追加の作業が必要です。</p>
<p>Ant Designには他のライブラリの機能が多数含まれており、コンポーネントの幅は非常に広いですが、深さは不十分です。</p>
<p>Ant Designのすべての依存関係はAnt Design自体がメンテナンスしており、独自のビルドおよびCSSソリューションとの互換性を確保するための追加の作業が必要です。これは他のオープンソースライブラリを使用したい場合には友好的ではありません。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="fluent-ui">Fluent UI<a href="https://illacloud.com/ja/blog/react-component-library#fluent-ui" class="hash-link" aria-label="Fluent UI への直接リンク" title="Fluent UI への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/react-component-library/fluentui.png" alt="fluent-ui" class="img_CfaS"></p>
<p>⭐ GitHub スター：17.3k</p>
<p>⏬ NPM ダウンロード数：週毎 191,170 回のダウンロード</p>
<p>💪🏼 初リリース日：2020年9月17日</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="長所-2">長所<a href="https://illacloud.com/ja/blog/react-component-library#%E9%95%B7%E6%89%80-2" class="hash-link" aria-label="長所 への直接リンク" title="長所 への直接リンク">​</a></h3>
<p>Microsoftが公式にメンテナンスするコンポーネントライブラリで、Fluent UIのスタイルはMicrosoftのスタイルと完全に一致しています。Microsoftのスタイルに一致する必要がある場合、Fluent UIは非常に役立ちます。</p>
<p>Fluent UIはWeb、React Native、iOS、Android、macOS、Windowsなど、多くのプラットフォームをサポートしており、クロスプラットフォームアプリケーションの構築に使用できます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="短所-2">短所<a href="https://illacloud.com/ja/blog/react-component-library#%E7%9F%AD%E6%89%80-2" class="hash-link" aria-label="短所 への直接リンク" title="短所 への直接リンク">​</a></h3>
<p>Microsoftのスタイルはすべての人に好まれるわけではないため、Microsoftのスタイルが好きでない場合、Fluent UIは最適な選択肢ではないかもしれません。</p>
<p>Fluent UIのコンポーネントの多様性は不足しており、データ処理やチャートなどの複雑なシーンではサポートされておらず、他のソリューションを探すための追加の作業が必要です。</p>
<p>Fluent UIのドキュメンテーションが不十分であり、開発者にとっては重要ですが、この点で改善の余地があります。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="まとめ">まとめ<a href="https://illacloud.com/ja/blog/react-component-library#%E3%81%BE%E3%81%A8%E3%82%81" class="hash-link" aria-label="まとめ への直接リンク" title="まとめ への直接リンク">​</a></h2>
<p>大規模かつ包括的なコンポーネントライブラリが必要で、それに対して支払いを行うことができる場合、MUIをお勧めします。支払いを行いたくない場合、Ant Designをお勧めします。</p>
<p>Landing Pageを開発する場合は、Chakra UIをお勧めします。</p>
<p>Microsoftのスタイルを使用したい場合は、Fluent UIをお勧めします。</p>
<p>コンポーネントライブラリを導入したくない場合、ソースコードの統合のみを希望する場合は、Shadcn UIをお勧めします。</p>]]></content:encoded>
            <category>react</category>
            <category>component</category>
            <category>library</category>
        </item>
        <item>
            <title><![CDATA[ベストなWeb Workerチュートリアル]]></title>
            <link>https://illacloud.com/ja/blog/web-worker-tutorial</link>
            <guid>https://illacloud.com/ja/blog/web-worker-tutorial</guid>
            <pubDate>Mon, 29 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[Web Workerは、JavaScriptをバックグラウンドで実行できるJavaScript APIです。これは、メインスレッドをブロックせずに複雑な計算を実行するために設計されています。]]></description>
            <content:encoded><![CDATA[<p>Web Workerは、JavaScriptをバックグラウンドで実行できるJavaScript APIです。これは、メインスレッドをブロックせずに複雑な計算を実行するために設計されています。これはWeb開発者にとって非常に便利な機能です。ただし、広く使用されていません。この記事では、Web Workerの使用方法を説明します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="web-workerとは">Web Workerとは<a href="https://illacloud.com/ja/blog/web-worker-tutorial#web-worker%E3%81%A8%E3%81%AF" class="hash-link" aria-label="Web Workerとは への直接リンク" title="Web Workerとは への直接リンク">​</a></h2>
<p>よく知られているように、JavaScript言語の主要な特徴の1つは、シングルスレッド性であり、一度に1つのタスクしか同期的に処理できないことです。これは、この言語から派生したNode.jsの登場に対するバックエンド開発者の主要な批判点でもあります。</p>
<p>ただし、JavaScriptが最初に設計されたとき、当時の用途に合わせて意図的にシングルスレッドの言語として設計されました。</p>
<p>JavaScriptの元の目的は、Webページとユーザーとの対話を容易にし、DOMまたはBOM要素を操作することでした。この文脈で効率性を追求するために複数のスレッドを使用すると、リソース競合やデータ同期などの問題が発生する可能性があるため、任意のタイミングで1つのスレッドだけがページ要素を直接操作できると指定する必要があり、システムの安定性とセキュリティを確保する必要がありました。</p>
<p>しかし、JavaScriptは線形タスク処理に制約されているわけではありません。JavaScriptにはメッセージキューとイベントループメカニズムがあり、非同期メッセージ処理を通じて並行処理が可能です。高I/O同時トランザクション処理では、手動でスレッドを作成し破棄し、追加のスレッド管理スペースを占有する必要がないため、パフォーマンスが優れています。その結果、サーバーサイドでJavaScriptを探求するNode.jsは、高並行ネットワークリクエストの処理において著しい利点を示しています。</p>
<p>JavaScriptはその非同期メカニズムによって高I/O関連のパフォーマンス問題に効果的に対処していますが、シングルスレッドの実行の基本的な性質は変わりません。これは、CPU集積タスクを処理する際にその計算リソースを完全に活用できないため、問題が明白です。現代のマルチコア、マルチスレッドのマシンの計算リソースを十分に活用できないためです。</p>
<p>現代の大規模なフロントエンドプロジェクトでは、コードの複雑さが増すにつれて、ローカルの計算集約タスクも要求されるようになります。JavaScriptプロジェクトを単一のスレッドで実行すると、アプリケーションは計算に忙しくなり、頻繁なユーザーの相互作用を無視し、ユーザーエクスペリエンスが最適でないことがあります。より深刻な場合、計算集約タスクが多すぎる場合、リソースの飽和によりWebページが応答しなくなることがあります。そのため、Webプロジェクトでローカルのマルチスレッド計算能力が必要とされ、Web Workerが誕生しました。</p>
<p>Web WorkerはHTML5の標準として導入され、公式には以下のように定義されています。</p>
<blockquote>
<p>Web Workerは、Webアプリケーションのメイン実行スレッドとは別のバックグラウンドスレッドでスクリプト操作を実行できるようにします。</p>
</blockquote>
<p>これにより、JavaScriptスクリプトが複数のスレッドを作成でき、メインスレッド（通常はUIレンダリングスレッドと呼ばれます）をブロックせずにCPUのマルチコア計算能力を完全に活用できます。</p>
<p>Web WorkerはHTML5の標準の一部ですが、実際には2009年にW3Cのドラフトで提案されたものでした。そのため、互換性は優れており、ほとんどの主要なWebブラウザでサポートされています。</p>
<p>![web_worker](<a href="https://cdn.illacloud.com/illa-website/blog/web-worker-tutorial/" target="_blank" rel="noopener noreferrer">https://cdn.illacloud.com/illa-website/blog/web-worker-tutorial/</a></p>
<p>worker.png)</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="web-workerの制限事項">Web Workerの制限事項<a href="https://illacloud.com/ja/blog/web-worker-tutorial#web-worker%E3%81%AE%E5%88%B6%E9%99%90%E4%BA%8B%E9%A0%85" class="hash-link" aria-label="Web Workerの制限事項 への直接リンク" title="Web Workerの制限事項 への直接リンク">​</a></h2>
<p>Web Workerは基本的にJavaScriptのシングルスレッド性を崩しません。</p>
<p>実際、Web Workerスクリプト内のコードはDOMノードを直接操作できず、ほとんどのBOM（ブラウザオブジェクトモデル）APIを使用できません。そのグローバル環境はWindowではなくDedicatedWorkerGlobalScopeです。Workerはサンドボックス内で動作し、メインスレッドから完全に独立したJavaScriptファイルを実行します。</p>
<p>これらの制約は、この記事の冒頭で述べたリソース競合の問題を回避するためにWorkerに課せられたものです。主な使用例は、メインスレッドの補助として、高いCPU集積データ処理タスクを処理し、その実行結果をスレッド間通信を介してメインスレッドに戻すことです。このプロセスを通じて、メインスレッドはユーザーの相互作用に対して引き続き応答し、ページの遅延の問題を効果的に防ぎます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="web-workerの使用法">Web Workerの使用法<a href="https://illacloud.com/ja/blog/web-worker-tutorial#web-worker%E3%81%AE%E4%BD%BF%E7%94%A8%E6%B3%95" class="hash-link" aria-label="Web Workerの使用法 への直接リンク" title="Web Workerの使用法 への直接リンク">​</a></h2>
<p>現在、Web Workerのブラウザサポートは非常に包括的であり、単にWorkerスクリプトのURIを提供してインスタンス化することで使用できます。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> worker </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"./worker.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="通信">通信<a href="https://illacloud.com/ja/blog/web-worker-tutorial#%E9%80%9A%E4%BF%A1" class="hash-link" aria-label="通信 への直接リンク" title="通信 への直接リンク">​</a></h3>
<p>Workerとメインスレッドの間の通信には、受信用のメッセージを受け取るための<code>onmessage</code>または<code>addEventListener</code>と、メッセージを送信するための<code>postMessage</code>の2つのAPIだけが必要であり、メッセージベースのインタラクションをシームレスに実現できます。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> worker </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"./worker.js"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// メインスレッドからメッセージを送信</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'メインスレッドからデータを送信'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// メインスレッドはメッセージを受信</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method-variable function-variable method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> data </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Workerスレッドはメッセージを受信</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">addEventListener</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'message'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> data </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// Workerスレッドはメッセージを送信</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Workerがデータを受信しました'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意：Worker内では、<code>this.xx</code>、<code>self.xx</code>、および直接<code>xx</code>を使用することはすべて同じスコープであり、グローバル変数<code>DedicatedWorkerGlobalScope</code>を参照し、互換できます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="終了">終了<a href="https://illacloud.com/ja/blog/web-worker-tutorial#%E7%B5%82%E4%BA%86" class="hash-link" aria-label="終了 への直接リンク" title="終了 への直接リンク">​</a></h3>
<p>Workerを終了する方法は2つあります。内部で終了するか、メインスレッドから終了するように指示されます。</p>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">terminate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-javascript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-javascript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="上級者向け-通信をpromiseベースにする">上級者向け: 通信をPromiseベースにする<a href="https://illacloud.com/ja/blog/web-worker-tutorial#%E4%B8%8A%E7%B4%9A%E8%80%85%E5%90%91%E3%81%91-%E9%80%9A%E4%BF%A1%E3%82%92promise%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%99%E3%82%8B" class="hash-link" aria-label="上級者向け: 通信をPromiseベースにする への直接リンク" title="上級者向け: 通信をPromiseベースにする への直接リンク">​</a></h3>
<p>前のセクションに基づいて、既にブラウザのマルチスレッド機能を比較的簡単に活用する方法をWorkerのAPIを使用して実現できました。しかし、これにはエンジニアリングアプリケーションでよく必要とされる非同期応答などの使いやすさの機能が欠けています。次にそれを行いましょう。</p>
<p>まず最初に、<code>actionHandlerMap</code> という非同期コールバックのコレクションが必要です。これは、Workerからの応答を待つPromiseの解決メソッドを格納するために使用されます。キーは通信からの一意の識別子を使用して指定できます（一意性を確保することが十分です）。次に、ネイティブの <code>postMessage</code> および <code>onmessage</code> メソッドをカプセル化する必要があります。</p>
<p><code>postMessage</code> で送信されたメッセージには <code>id</code> を含め、現在のPromiseの解決メソッドを <code>actionHandlerMap</code> に配置してWorkerの応答を待ちます。</p>
<p><code>onmessage</code> リスナーに関しては、Workerからの応答を受信した後、それを対応するPromiseと一致させ、<code>.then()</code> メソッドを実行します。完了後、Promiseの解決関数をコレクションから削除します。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* main.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> fakeId </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MainThreadController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">workerUrl</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">workerName</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 非同期コールバックを待つためのコレクション</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">bind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">!</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 対応するPromiseの解決を実行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">delete</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 実際の使用では、キーとしてビジネスIDを指定または生成できます</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> id </span><span class="token operator">=</span><span class="token plain"> fakeId</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">resolve</span><span class="token parameter punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token parameter"> reject</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> message </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token spread operator">...</span><span class="token plain">action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token function" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> mainThreadController </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">MainThreadController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">workerUrl</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'./worker.js'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">workerName</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'test-worker'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mainThreadController</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">actionType</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'asyncCalc'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token literal-property property">payload</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'ワーカーにメッセージを送信'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">then</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'ワーカーからのメッセージを受信:'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ワーカーの部分の処理ははるかに簡単です。計算処理が完了したら、リクエストのIDを応答に含めます。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 非同期コールバックを待つためのコレクション</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">bind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> payload </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'print'</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'メッセージが印刷されました。'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'asyncCalc'</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 非同期処理シナリオを模倣</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setTimeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">params</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">計算された答えは </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">result</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)"> です。</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword module" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token operator">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> workerThreadController </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>もちろん、ワーカー側でさらなる改善ができます。ワーカーがさまざまな種類の計算を処理する必要がある場合、<code>onmessage</code> 関数内での <code>switch</code> ステートメントは長大になる可能性があります。文字列ベースのチェックも十分に信頼性がないかもしれません。Worker内のロジックを戦略パターンを使用してカプセル化することで、Worker内のロジックを簡素化できます。</p>
<div class="language-js codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-js codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/* worker.js */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// これは別のファイルに抽出してインポートできます</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> api </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">msg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'メッセージが印刷されました。'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">asyncCalc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">setTimeout</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">resolve</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">params</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">計算された答えは </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation">result</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string string" style="color:rgb(255, 121, 198)"> です。</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">constructor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 非同期コールバックを待つためのコレクション</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">actionHandlerMap</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">worker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">onmessage</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">bind</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">onmessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> payload </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> api</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">actionType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">call</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">this</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> payload</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">postMessage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token plain"> result </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> workerThreadController </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> </span><span class="token class-name">WorkerThreadController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>したがって、シンプルで便利なPromiseベースのワーカーが構築されました。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/web-worker-tutorial#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>要約すると、この記事</p>
<p>ではWebワーカーの概要、その機能と制限について簡単に説明し、読者にその使用事例について包括的な理解を提供しました。ネイティブのWorker APIをカプセル化してPromiseベースの呼び出しを可能にする解決策を提案し、最後に、チーム内で現在使用されている機能豊富で成熟した解決策を推奨しました。これにより、将来のワーカーの拡張に興味を持つフロントエンド開発者に役立つことを期待しています。</p>]]></content:encoded>
            <category>javascript</category>
            <category>webworker</category>
        </item>
        <item>
            <title><![CDATA[最も実用的なTypeScriptの一般的な機能]]></title>
            <link>https://illacloud.com/ja/blog/typescript-most-practical-features-compilation</link>
            <guid>https://illacloud.com/ja/blog/typescript-most-practical-features-compilation</guid>
            <pubDate>Thu, 25 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[プロジェクトでの型プログラミングの重要性は言うまでもありません。この記事では、TypeScriptの一般的な機能をまとめ、TypeScriptの使用を熟練させるのに役立ちます。]]></description>
            <content:encoded><![CDATA[<p>プロジェクトでの型プログラミングの重要性は言うまでもありません。この記事では、TypeScriptの一般的な機能をまとめ、TypeScriptの使用を熟練させるのに役立ちます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="アドバンストタイプ">アドバンスト・タイプ<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%A2%E3%83%89%E3%83%90%E3%83%B3%E3%82%B9%E3%83%88%E3%82%BF%E3%82%A4%E3%83%97" class="hash-link" aria-label="アドバンスト・タイプ への直接リンク" title="アドバンスト・タイプ への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="交差型">交差型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E4%BA%A4%E5%B7%AE%E5%9E%8B" class="hash-link" aria-label="交差型 への直接リンク" title="交差型 への直接リンク">​</a></h3>
<p>交差型は、&amp; 記号を使用して複数の型を1つの型に結合します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I2</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I1</span><span class="token plain"> </span><span class="token operator">&amp;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ユニオン型">ユニオン型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%83%A6%E3%83%8B%E3%82%AA%E3%83%B3%E5%9E%8B" class="hash-link" aria-label="ユニオン型 への直接リンク" title="ユニオン型 への直接リンク">​</a></h3>
<p>ユニオン型は、| 記号を使用して値がいくつかの型のうちのどれかであることを表します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="文字列リテラル型">文字列リテラル型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%96%87%E5%AD%97%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%9E%8B" class="hash-link" aria-label="文字列リテラル型 への直接リンク" title="文字列リテラル型 への直接リンク">​</a></h3>
<p>文字列リテラル型は、文字列型を変数の型として使用します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'number'</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'number'</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="数値リテラル型">数値リテラル型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%95%B0%E5%80%A4%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%9E%8B" class="hash-link" aria-label="数値リテラル型 への直接リンク" title="数値リテラル型 への直接リンク">​</a></h3>
<p>数値リテラル型は、数字を変数の型として使用します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ブールリテラル型">ブールリテラル型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%83%96%E3%83%BC%E3%83%AB%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%9E%8B" class="hash-link" aria-label="ブールリテラル型 への直接リンク" title="ブールリテラル型 への直接リンク">​</a></h3>
<p>ブールリテラル型は、真偽値を変数の型として使用します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">true</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="文字列テンプレート型">文字列テンプレート型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%96%87%E5%AD%97%E5%88%97%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E5%9E%8B" class="hash-link" aria-label="文字列テンプレート型 への直接リンク" title="文字列テンプレート型 への直接リンク">​</a></h3>
<p>文字列テンプレート型は、ES6のテンプレート文字列構文を使用して型を制約します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">https</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">https://</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token template-string interpolation builtin" style="color:rgb(189, 147, 249)">string</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> https </span><span class="token operator">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token template-string string" style="color:rgb(255, 121, 198)">https://jd.com</span><span class="token template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="演算子">演算子<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%BC%94%E7%AE%97%E5%AD%90" class="hash-link" aria-label="演算子 への直接リンク" title="演算子 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="keyof">keyof<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#keyof" class="hash-link" aria-label="keyof への直接リンク" title="keyof への直接リンク">​</a></h3>
<p>keyofは、特定の型のすべてのキーを取得するために使用され、その戻り値はユニオン型です。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// const a: 'name' | 'age' = 'name'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'name'</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="typeof">typeof<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#typeof" class="hash-link" aria-label="typeof への直接リンク" title="typeof への直接リンク">​</a></h3>
<p>typeofは、オブジェクトまたは関数の構造型を取得するために使用されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a2 </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'tj'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> a2 </span><span class="token comment" style="color:rgb(98, 114, 164)">// {name: string}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fn1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> x </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> fn1 </span><span class="token comment" style="color:rgb(98, 114, 164)">// (x: number) =&gt; number</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="in">in<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#in" class="hash-link" aria-label="in への直接リンク" title="in への直接リンク">​</a></h3>
<p>inは、ユニオン型を繰り返し処理するために使用されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> obj </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T5</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">  name: any,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">  age: any</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tk">T[K]<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#tk" class="hash-link" aria-label="T[K] への直接リンク" title="T[K] への直接リンク">​</a></h3>
<p>T[K]は、インデックスにアクセスし、そのインデックスに対応する値のユニオン型を取得するために使用されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I3</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T6</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string | number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="演算子-1">演算子<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%BC%94%E7%AE%97%E5%AD%90-1" class="hash-link" aria-label="演算子 への直接リンク" title="演算子 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="非nullアサーション演算子">非nullアサーション演算子<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E9%9D%9Enull%E3%82%A2%E3%82%B5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E6%BC%94%E7%AE%97%E5%AD%90" class="hash-link" aria-label="非nullアサーション演算子 への直接リンク" title="非nullアサーション演算子 への直接リンク">​</a></h3>
<p>非nullアサーション演算子 ! は、要素がnullまたはundefinedでないことを強調し、プロパティは明示的に値が割り当てられることをTypeScriptに伝えます。</p>
<div class="language-jsx codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-jsx codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(80, 250, 123)">Demo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">JSX</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access maybe-class-name" style="color:rgb(80, 250, 123)">Element</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> divRef </span><span class="token operator">=</span><span class="token plain"> useRef</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">HTMLDivElement</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">   useEffect(() =&gt; </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      divRef</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">current</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">scrollIntoView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// divRef.currentがnullまたはundefinedでないことをアサーション</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text">, [])</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">   return </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">ref</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">divRef</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text">divDemo</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">div</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="オプショナルチェイン演算子">オプショナルチェイン演算子<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%83%81%E3%82%A7%E3%82%A4%E3%83%B3%E6%BC%94%E7%AE%97%E5%AD%90" class="hash-link" aria-label="オプショナルチェイン演算子 への直接リンク" title="オプショナルチェイン演算子 への直接リンク">​</a></h3>
<p>オプショナルチェイン演算子 ?. は、左側の式の値がnullまたはundefinedかどうかを判断し、そうであれば式の実行を停止します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a </span><span class="token operator">=</span><span class="token plain"> b</span><span class="token operator">?.</span><span class="token plain">a</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="nullish合併演算子">nullish合併演算子<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#nullish%E5%90%88%E4%BD%B5%E6%BC%94%E7%AE%97%E5%AD%90" class="hash-link" aria-label="nullish合併演算子 への直接リンク" title="nullish合併演算子 への直接リンク">​</a></h3>
<p>nullish合併演算子 ?? は、左側の式の値がnullまたはundefinedかどうかを判断し、そうでない場合は右側の値を返します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a </span><span class="token operator">=</span><span class="token plain"> b </span><span class="token operator">??</span><span class="token plain"> </span><span class="token number">10</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="数値セパレータ">数値セパレータ<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%95%B0%E5%80%A4%E3%82%BB%E3%83%91%E3%83%AC%E3%83%BC%E3%82%BF" class="hash-link" aria-label="数値セパレータ への直接リンク" title="数値セパレータ への直接リンク">​</a></h3>
<p>数値セパレータ _ は、長い数字を区切り、数字を読みやすくするために使用されます。コンパイル結果では _ は自動的に削除されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> num</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1_111_111_111</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="型エイリアス">型エイリアス<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E5%9E%8B%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9" class="hash-link" aria-label="型エイリアス への直接リンク" title="型エイリアス への直接リンク">​</a></h2>
<p>型エイリアスは、型に新しい名前を付けるために使用されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Message</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">greet</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">message</span><span class="token operator">:</span><span class="token plain"> Message</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="型アサーション">型アサーション<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E5%9E%8B%E3%82%A2%E3%82%B5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3" class="hash-link" aria-label="型アサーション への直接リンク" title="型アサーション への直接リンク">​</a></h2>
<p>型アサーションは、ブラウザに対して型を明示的に指定することを意味します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// 尖括弧構文</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> someValue</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"this is a string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> strLength</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain">someValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// as</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">構文</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> someValue</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"this is a string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> strLength</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">someValue </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="型ガード">型ガード<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E5%9E%8B%E3%82%AC%E3%83%BC%E3%83%89" class="hash-link" aria-label="型ガード への直接リンク" title="型ガード への直接リンク">​</a></h2>
<p>型ガードは、実行時に特定のスコープ内の型を確認するためのいくつかの式です。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">B</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  sex</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  home</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">doSomething</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">B</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// エラー</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// `in`型ガードを使用する</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">doSomething</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">B</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"name"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// `typeof`型ガードを使用する</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> a </span><span class="token operator">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"string"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> a </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typeof</span><span class="token plain"> a </span><span class="token operator">===</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"number"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> a </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// `instanceof`型ガード</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Foo</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Bar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">input</span><span class="token operator">:</span><span class="token plain"> Foo </span><span class="token operator">|</span><span class="token plain"> Bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">input </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">instanceof</span><span class="token plain"> </span><span class="token class-name">Foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// ここで `input` の型が「狭まる」</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// ここで `input` の型が「狭まる」</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコ�ピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリック">ジェネリック<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF" class="hash-link" aria-label="ジェネリック への直接リンク" title="ジェネリック への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリックの紹介">ジェネリックの紹介<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%81%AE%E7%B4%B9%E4%BB%8B" class="hash-link" aria-label="ジェネリックの紹介 への直接リンク" title="ジェネリックの紹介 への直接リンク">​</a></h3>
<p>ジェネリックは、型に引数を渡してより汎用的な型を取得する方法です。関数に引数を渡すように、型にも引数を渡して新しい型を取得します。</p>
<p>以下の例では、ジェネリック型T1を取得し、引数を渡すことでT2型がstring[]、T3型がnumber[]になります。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string[]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// number[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Tは変数であり、任意の他の変数名で代用できます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T4</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">A</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">A</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T5</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T4</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string[]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T6</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T4</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// number[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="命名規則">命名規則<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E5%91%BD%E5%90%8D%E8%A6%8F%E5%89%87" class="hash-link" aria-label="命名規�則 への直接リンク" title="命名規則 への直接リンク">​</a></h3>
<p>TypeScriptのジェネリック変数の命名規則では、通常4つの一般的なジェネリック変数名がデフォルトで提供されており、可読性を向上させるために他の変数名を使用しないことが推奨されています。</p>
<p>T：最初の引数を表す
K：オブジェクトのキータイプを表す
V：オブジェクトの値の型を表す
E：要素の型を表す</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリックインターフェース">ジェネリックインターフェース<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9" class="hash-link" aria-label="ジェネリックインターフェース への直接リンク" title="ジェネリックインターフェース への直接リンク">​</a></h3>
<p>ジェネリックインターフェースは、前述の例と同様に、インターフェースに型引数を渡します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I1</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">U</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリック制約extends演算子">ジェネリック制約（extends演算子）<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E5%88%B6%E7%B4%84extends%E6%BC%94%E7%AE%97%E5%AD%90" class="hash-link" aria-label="ジェネリック制約（extends演算子） への直接リンク" title="ジェネリック制約（extends演算子） への直接リンク">​</a></h3>
<p>時折、ジェネリックパラメータを制約し、各変数の型を制限する必要があります。TypeScriptはextendsを使用して型制約を実現します。</p>
<p>ジェネリック制約の構文は次のとおりです。</p>
<p>ジェネリック名 extends 型
TをLengthとして指定し、Tの型がlengthプロパティを含み、その型がnumberである必要がある制約を設定しています。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name">Length</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  length</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(80, 250, 123)">fn1</span><span class="token generic-function generic class-name operator">&lt;</span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token generic-function generic class-name"> Length</span><span class="token generic-function generic class-name operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">arg</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> arg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">length</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>extendsを使用してKがTのキーであることを制約しています。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(80, 250, 123)">getProperty</span><span class="token generic-function generic class-name operator">&lt;</span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token generic-function generic class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token generic-function generic class-name operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">obj</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> key</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> tsInfo </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Typescript"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  supersetOf</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Javascript"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  difficulty</span><span class="token operator">:</span><span class="token plain"> Difficulty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Intermediate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> difficulty</span><span class="token operator">:</span><span class="token plain"> Difficulty </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">getProperty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tsInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"difficulty"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> supersetOf</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">getProperty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">tsInfo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"superset_of"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// エラー</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリックパラメータのデフォルト値">ジェネリックパラメータのデフォルト値<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AE%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%80%A4" class="hash-link" aria-label="ジェネリックパラメータのデフォルト値 への直接リンク" title="ジェネリックパラメータのデフォルト値 への直接リンク">​</a></h3>
<p>ジェネリックパラメータのデフォルト値は、関数パラメータのデフォルト値と同様に、パラメータが指定されていない場合にデフォルト値を提供します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">I4</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name"> </span><span class="token class-name operator">=</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">string</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">S1</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I4</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"123"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// デフォルトでname: string型</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">S2</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">I4</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">123</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリック条件">ジェネリック条件<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="ジェネリック条件 への直接リンク" title="ジェネリック条件 への直接リンク">​</a></h3>
<p>条件型は、JavaScriptの条件文と同じように、条件が満たされる場合はxx、そうでない場合はyyを意味します。</p>
<p>条件型の表現は次のとおりです。</p>
<p>T extends U ? X : Y</p>
<p>TがUに代入可能であれば、型はXであり、それ以外の場合は型はYです。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'string'</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'number'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 'string'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 'number'</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリック推論infer演算子">ジェネリック推論（infer演算子）<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E6%8E%A8%E8%AB%96infer%E6%BC%94%E7%AE%97%E5%AD%90" class="hash-link" aria-label="ジェネリック推論（infer演算子） への直接リンク" title="ジェネリック推論（infer演算子） への直接リンク">​</a></h3>
<p>ジェネリック推論のキーワードはinferであり、構文はinfer型です。</p>
<p>通常、ジェネリック条件と組み合わせて使用し、具体例を理解します。</p>
<p>ジェネリックパラメータTが型<code>{t: infer Test}</code>に代入可能である場合、型Testが推論され、それ以外の場合はstring型になります。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Foo</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">t</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">infer</span><span class="token plain"> Test</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> Test </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ジェネリックパラメータnumberにはtプロパティがないため、型はstringになります。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">One</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ジェネリックパラメータのtプロパティがbooleanであるため、型はbooleanに推論されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Two</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> t</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">boolean</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// boolean</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ジェネリックパラメータのtプロパティが() =&gt; voidであるため、型は() =&gt; voidに推論されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Three</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Foo</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(80, 250, 123)">t</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// () =&gt; void</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ジェネリックユーティリティ型">ジェネリックユーティリティ型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%83%83%E3%82%AF%E3%83%A6%E3%83%BC%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3%E5%9E%8B" class="hash-link" aria-label="ジェネリックユーティリティ型 への直接リンク" title="ジェネ�リックユーティリティ型 への直接リンク">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="マップ型">マップ型<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E3%83%9E%E3%83%83%E3%83%97%E5%9E%8B" class="hash-link" aria-label="マップ型 への直接リンク" title="マップ型 への直接リンク">​</a></h3>
<p>マップ型は、元のオブジェクト型を新しいオブジェクト型にマップするためのジェネリック型です。</p>
<p>一般的なマップ型の構文は次のとおりです。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">readonly</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">readonly</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token operator">-</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">readonly</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>例を示します。すべてのプロパティをオプションに変更するためのマップ型を作成します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Partial</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="partial">Partial<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#partial" class="hash-link" aria-label="Partial への直接リンク" title="Partial への直接リンク">​</a></h3>
<p>TypeScriptは、いくつかの一般的なマップ型を提供しており、Partialはジェネリックのすべてのプロパティをオプションにするために使用されます。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Partial</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Partial</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> a</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// nameプロパティがなくてもエラーにならない</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="required">Required<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#required" class="hash-link" aria-label="Required への直接リンク" title="Required への直接リンク">​</a></h3>
<p>Requiredは、ジェネリックのすべてのプロパティを必須にします。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Required</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Required</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">?</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> b</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// エラー、プロパティ "name" が欠けていますが、型 "Required&lt;{ name?: string | undefined; }&gt;" ではそのプロパティが必要です。ts(2741)</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>構文の-?は、?（オプション）プロパティを取り除く意味です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="readonly">Readonly<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#readonly" class="hash-link" aria-label="Readonly への直接リンク" title="Readonly への直接リンク">​</a></h3>
<p>Readonlyは、ジェネリックのすべてのプロパティを読み取り専用にします。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Readonly</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> c</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T3</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">name </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj1"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// エラー、読み取り専用のプロパティ "name" には代入できません。ts(2540)</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="pick">Pick<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#pick" class="hash-link" aria-label="Pick への直接リンク" title="Pick への直接リンク">​</a></h3>
<p>Pickは型から特定のプロパティを選択し、新しい型を生成します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Pick</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T4</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Pick</span><span class="token operator">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token string" style="color:rgb(255, 121, 198)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">これは新しい型で、T4={name: string}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> d</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T4</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"tj"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="record">Record<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#record" class="hash-link" aria-label="Record への直接リンク" title="Record への直接リンク">​</a></h3>
<p>Recordはキーと値をT型に変換します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Record</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">key </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> e</span><span class="token operator">:</span><span class="token plain"> Record</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'tj'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> f</span><span class="token operator">:</span><span class="token plain"> Record</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  age</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>keyof anyはnumber | string | symbolに対応し、オブジェクトのキーの型セットを表します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="returntype">ReturnType<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#returntype" class="hash-link" aria-label="ReturnType への直接リンク" title="ReturnType への直接リンク">​</a></h3>
<p>ReturnTypeはT型に対応する関数の戻り値の型を取得します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">ReturnType</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name operator">...</span><span class="token class-name">args</span><span class="token class-name operator">:</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token class-name"> </span><span class="token class-name operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">...</span><span class="token plain">args</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">infer</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="exclude">Exclude<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#exclude" class="hash-link" aria-label="Exclude への直接リンク" title="Exclude への直接リンク">​</a></h3>
<p>ExcludeはT型からU型に属する型を削除します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Exclude</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T0</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// "b" | "c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// "c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T2</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">Function</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string | number</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="extract">Extract<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#extract" class="hash-link" aria-label="Extract への直接リンク" title="Extract への直接リンク">​</a></h3>
<p>ExtractはT型からU型を抽出します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Extract</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">U</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T0</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Extract</span><span class="token operator">&lt;</span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"b"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"c"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"a"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"f"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// "a"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Extract</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">Function</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// () =&gt; void</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="omit">Omit<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#omit" class="hash-link" aria-label="Omit への直接リンク" title="Omit への直接リンク">​</a></h3>
<p>OmitはT型からK型を除外して新しい型を構築します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Omit</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">K</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Pick</span><span class="token operator">&lt;</span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Exclude</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">keyof</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">interface</span><span class="token plain"> </span><span class="token class-name">Todo</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  title</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  completed</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">boolean</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  description</span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">TodoPreview</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Omit</span><span class="token operator">&lt;</span><span class="token plain">Todo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"description"</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">{</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">title: string;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">completed: boolean;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="nonnullable">NonNullable<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#nonnullable" class="hash-link" aria-label="NonNullable への直接リンク" title="NonNullable への直接リンク">​</a></h3>
<p>NonNullableは型からnullとundefinedの型をフィルタリングします。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">NonNullable</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">undefined</span><span class="token plain"> </span><span class="token operator">?</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T0</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> NonNullable</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">number</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">undefined</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string | number</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T1</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> NonNullable</span><span class="token operator">&lt;</span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">null</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">undefined</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// string[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="parameters">Parameters<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#parameters" class="hash-link" aria-label="Parameters への直接リンク" title="Parameters への直接リンク">​</a></h3>
<p>Parametersは関数のパラメータの型のタプル型を取得します。</p>
<div class="language-typescript codeBlockContainer_USIv theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_PMfr"><pre tabindex="0" class="prism-code language-typescript codeBlock_IHkF thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_THA1"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Parameters</span><span class="token class-name operator">&lt;</span><span class="token class-name constant" style="color:rgb(189, 147, 249)">T</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name operator">...</span><span class="token class-name">args</span><span class="token class-name operator">:</span><span class="token class-name"> </span><span class="token class-name builtin" style="color:rgb(189, 147, 249)">any</span><span class="token class-name punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token class-name"> </span><span class="token class-name operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extends</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">...</span><span class="token plain">args</span><span class="token operator">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">infer</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token operator">?</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token plain"> </span><span class="token operator">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">never</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">A</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">=&gt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">void</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// []</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">B</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token plain">typeofArray</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">isArray</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// [any]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">C</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token plain">typeofparseInt</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// [string, (number | undefined)?]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(189, 147, 249)">D</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> Parameters</span><span class="token operator">&lt;</span><span class="token plain">typeofMath</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">max</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// number[]</span><br></span></code></pre><div class="buttonGroup_uxJT"><button type="button" aria-label="クリップボードにコードをコピー" title="コピー" class="clean-btn"><span class="copyButtonIcons_LZ6a" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_H1v1"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_J5e4"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="最後に">最後に<a href="https://illacloud.com/ja/blog/typescript-most-practical-features-compilation#%E6%9C%80%E5%BE%8C%E3%81%AB" class="hash-link" aria-label="最後に への直接リンク" title="最後に への直接リンク">​</a></h2>
<p>これをお気に入りに追加しましょう！</p>]]></content:encoded>
            <category>typescript</category>
        </item>
        <item>
            <title><![CDATA[ITサポートのための最適なツール]]></title>
            <link>https://illacloud.com/ja/blog/it-support</link>
            <guid>https://illacloud.com/ja/blog/it-support</guid>
            <pubDate>Tue, 23 Jan 2024 20:00:00 GMT</pubDate>
            <description><![CDATA[通常の企業では、IT部門のテクニカルサポートが会社の情報システム、データベースの管理を担当しています]]></description>
            <content:encoded><![CDATA[<p>ITサポートはテクニカルサポートとプログラムサポートに分かれています。</p>
<p>テクニカルサポートには幅広い知識構造を持つ技術者が必要です。ある程度の規模の企業はすべてIT部門を持っており、通常はネットワーク管理と呼ばれますが、すべての企業がプログラムサポートを持っているわけではありません。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="itサポートの仕事内容">ITサポートの仕事内容<a href="https://illacloud.com/ja/blog/it-support#it%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AE%E4%BB%95%E4%BA%8B%E5%86%85%E5%AE%B9" class="hash-link" aria-label="ITサポートの仕事内容 への直接リンク" title="ITサポートの仕事内容 への直接リンク">​</a></h2>
<p>通常の企業では、IT部門のテクニカルサポートは会社の情報システム、データベース、機器のハードウェア設備などの管理を担当しています。会社が特別なソフトウェアが必要な場合や新しいシステムを更新する場合、通常は技術企業からプログラマーと共にチームを結成し、会社自体のプログラムサポートを行います。</p>
<p>テクニカルサポートはコンサルタントのようであり、より大まかな方向を指導する役割を果たすため、一般的に多くの知識を持っています。</p>
<p>プログラムサポートは主にコーディングに特化しています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="おすすめのツール">おすすめのツール<a href="https://illacloud.com/ja/blog/it-support#%E3%81%8A%EF%BF%BD%E3%81%99%E3%81%99%E3%82%81%E3%81%AE%E3%83%84%E3%83%BC%E3%83%AB" class="hash-link" aria-label="おすすめのツール への直接リンク" title="おすすめのツール への直接リンク">​</a></h2>
<p>ITサポートの業務では、タスクをより効果的に遂行するために多くのツールが必要です。なぜなら、ITには共通のニーズが多くあります。例えば：</p>
<ul>
<li>作業指示の処理</li>
<li>プロジェクト管理</li>
<li>コード管理</li>
<li>ドキュメント管理</li>
<li>通知</li>
<li>会議</li>
<li>...</li>
</ul>
<p>ここでは、皆さんが仕事をより効果的に遂行するのに役立ついくつかのおすすめのツールを紹介します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.com/ja/blog/it-support#illa-cloud" class="hash-link" aria-label="ILLA Cloud への直接リンク" title="ILLA Cloud への直接リンク">​</a></h2>
<p>もしビジネスロジック指向のツールを構築し、複雑なアニメーションや派手なページを追求せずに美しいUIだけを求める場合、ILLA Cloudが開発と構築におすすめです。</p>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、新しいプロジェクトを作成する必要がないシンプルなJSで内部ツールを素早く構築できる、箱から出して使えるローコードツールです。</p>
<ul>
<li>Web＆アプリ管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズされたB2Bツール</li>
<li>CRM</li>
</ul>
<p>ILLA Cloudはコードを書かずにドラッグアンドドロップでツールを素早く構築できるため、作業効率が10倍向上します。また、チーム協力をネイティブサポートしており、同僚と一緒に編集と構築ができます。</p>
<p>ILLA Cloudはコネクタ機能も備えており、他の使用しているSaaSツールとの迅速な接続をサポートします。予定されたタスク、Webhooks、パラメータの渡し、その他もサポートしています。</p>
<p>ILLA CloudにはAIエージェント機能も含まれており、テキスト分析、音声分析、画像分析などのAI駆動ツールを素早く構築するのに役立ちます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="linear">Linear<a href="https://illacloud.com/ja/blog/it-support#linear" class="hash-link" aria-label="Linear への直接リンク" title="Linear への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/linear.png" alt="linear" class="img_CfaS"></p>
<p>Linearはソフトウェアプロジェクト、スプリント、タスク、バグトラッキングを効率化するプロジェクト管理ツールです。高性能なチーム向けに構築されたシンプルで高速かつ強力なツールです。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点">利点<a href="https://illacloud.com/ja/blog/it-support#%E5%88%A9%E7%82%B9" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>効率的なプロジェクト管理</strong>: Linearはソフトウェアプロジェクトを効率化することを重視しており、ユーザーフレンドリーなインターフェースを提供し、複雑なプロジェクト管理タスクを簡素化し、チームがプロジェクトの目標と締切を達成しやすくしています。</p>
</li>
<li>
<p><strong>効率的なスプリントとタスク管理</strong>: スプリントとタスクを管理するためにカスタマイズされた機能を備えているため、Linearはアジャイル手法を管理するのに効果的なツールを提供し、ソフトウェア開発サイクルの計画、トラッキング、実行を容易にします。</p>
</li>
<li>
<p><strong>効果的なバグトラッキング</strong>: バグトラッキングへの重点は、Linearがソフトウェアの品質と信頼性を維持するため</p>
</li>
</ol>
<p>に重要なソフトウェアのバグを特定、文書化、解決するための堅実なツールを提供していることを示しており、非常に重要です。</p>
<ol start="4">
<li>
<p><strong>速度とシンプリシティ</strong>: シンプルで速いとされるLinearは、迅速なセットアップと使いやすさを提供し、学習コストの低いツールを実装したいチームにとって特に有益です。</p>
</li>
<li>
<p><strong>高性能チーム向けの適用性</strong>: 高性能チーム向けに構築されたLinearは、効率性と拡張性が最適化されており、パフォーマンスの低下なしに複雑なプロジェクトを管理するチームをサポートするでしょう。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点">欠点<a href="https://illacloud.com/ja/blog/it-support#%E6%AC%A0%E7%82%B9" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>過度の単純化の可能性</strong>: 単純さは利点ですが、非常に大規模または複雑なプロジェクトに必要な一部の高度な機能が不足している可能性があり、一部の特殊なアプリケーションに対するユーティリティを制限する可能性があります。</p>
</li>
<li>
<p><strong>ソフトウェアプロジェクトへの焦点</strong>: Linearの特定のソフトウェアプロジェクトへの焦点は、非ソフトウェアのチームには適していない可能性があり、非ソフトウェアのチームには汎用性が制限される可能性があります。</p>
</li>
<li>
<p><strong>新しいユーザー向けの学習コスト</strong>: シンプルさにもかかわらず、新しいユーザー、特にアジャイル手法に慣れていないユーザーは、特定のニーズに最適にツールを活用する方法を理解する際に学習コストを負担する可能性があります。</p>
</li>
<li>
<p><strong>カスタマイズの制限</strong>: 速くてシンプルなツールは、カスタマイズオプションが限られていることがあり、非常にカスタマイズされたプロジェクト管理ソリューションを必要とするチームのニーズを満たさない可能性があります。</p>
</li>
<li>
<p><strong>チームの規律に依存</strong>: どのプロジェクト管理ツールも、Linearを含めて、チームがそれを一貫して正しく使用する規律に依存することが多いため、いくつかの組織文化での課題となる可能性があります。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="gitlab">Gitlab<a href="https://illacloud.com/ja/blog/it-support#gitlab" class="hash-link" aria-label="Gitlab への直接リンク" title="Gitlab への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/gitlab.png" alt="gitlab" class="img_CfaS"></p>
<p>GitLabは単一のアプリケーションとして提供される完全なDevOpsプラットフォームです。これはソフトウェアライフサイクルを200％高速化し、ビジネスのスピードを劇的に向上させることができます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点-1">利点<a href="https://illacloud.com/ja/blog/it-support#%E5%88%A9%E7%82%B9-1" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>統合されたDevOpsワークフロー</strong>: 完全なDevOpsソリューションを提供する単一のアプリケーションとして、GitLabは計画からモニタリングまでのソフトウェア開発のすべての段階に統合環境を提供し、ワークフローを大幅に単純化できます。</p>
</li>
<li>
<p><strong>効率の向上</strong>: GitLabのConcurrent DevOpsへの重点は、開発サイクルの同時アクションをサポートすることを示唆しており、ソフトウェアライフサイクルを200％高速化できるため、ビジネスのペースを加速させることができます。</p>
</li>
<li>
<p><strong>オールインワンプラットフォーム</strong>: プラットフォームのオールインワン性は、チームが複数の個別ツールを統合する手間を省き、複雑さと互換性の問題を減少させることができます。</p>
</li>
<li>
<p><strong>効果的なコラボレーション</strong>: GitLabはコードリポジトリ、課題トラッキング、CI/CDなど、チームメンバー間の協力を促進するための統合プラットフォームを提供するため、チームワークと生産性を向上させることができます。</p>
</li>
<li>
<p><strong>可視性と透明性</strong>: DevOpsサイクルのすべての側面を1つの場所に持っていることは、開発プロセス全体での可視性と透明性を提供でき、より情報を元にした意思決定を可能にします。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-1">欠点<a href="https://illacloud.com/ja/blog/it-support#%E6%AC%A0%E7%82%B9-1" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>学習コスト</strong>: GitLabの包括的な性質は、特にそうした包括的なプラットフォームに慣れていないチームや、より単純なツールから移行しているチームにとって、学習コストが高いかもしれません。</p>
</li>
<li>
<p><strong>リソースの消費</strong>: 機能の幅広さから、GitLabはサーバーリソースを多く</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="gitlab-1">Gitlab<a href="https://illacloud.com/ja/blog/it-support#gitlab-1" class="hash-link" aria-label="Gitlab への直接リンク" title="Gitlab への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/gitlab.png" alt="gitlab" class="img_CfaS"></p>
<p>GitLabは、1つのアプリケーションとして提供される完全なDevOpsプラットフォームです。これにより、同時に行われるDevOpsによってソフトウェアライフサイクルが200％高速化され、ビジネスのスピードが大幅に向上します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点-2">利点<a href="https://illacloud.com/ja/blog/it-support#%E5%88%A9%E7%82%B9-2" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>統合されたDevOpsワークフロー</strong>：完全なDevOpsソリューションを提供する1つのアプリケーションとして、GitLabはソフトウェア開発のすべての段階に統合された環境を提供し、ワークフローを大幅に簡略化できます。</p>
</li>
<li>
<p><strong>効率の向上</strong>：GitLabはConcurrent DevOpsに重点を置いており、開発サイクルでの同時アクションをサポートしており、ソフトウェアライフサイクルが200％高速化される可能性があり、ビジネスのペースを加速させることができます。</p>
</li>
<li>
<p><strong>オールインワンプラットフォーム</strong>：このプラットフォームのオールインワンの性質により、チームは複数の別々のツールを統合する手間を省くことができ、複雑さと互換性の問題を軽減できます。</p>
</li>
<li>
<p><strong>効率的な協力</strong>：GitLabは、コードリポジトリ、課題追跡、CI/CDなどを提供する統一されたプラットフォームを提供することで、チームメンバー間の協力を促進し、チームワークと生産性を向上させるでしょう。</p>
</li>
<li>
<p><strong>可視性と透明性</strong>：DevOpsサイクルのすべての側面が1か所にあるため、開発プロセス全体での可視性と透明性が向上し、より情報を元にした意思決定ができます。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-2">欠点<a href="https://illacloud.com/ja/blog/it-support#%E6%AC%A0%E7%82%B9-2" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>学習カーブ</strong>：GitLabの包括的な性質は、特にこのような包括的なプラットフォームに慣れていないチームや、よりシンプルなツールから移行しているチームにとって、学習カーブが急である可能性があります。</p>
</li>
<li>
<p><strong>リソースの消費</strong>：多機能性が広がっているため、GitLabはサーバーリソースを多く必要とする可能性があり、小規模な組織やITインフラストラクチャが限られているチームにとっては課題となるかもしれません。</p>
</li>
<li>
<p><strong>小規模プロジェクトへの過度な対応</strong>：GitLabの広範な機能は、小規模なプロジェクトやチームにとっては必要以上になり、プラットフォームの過少利用を引き起こす可能性があります。</p>
</li>
<li>
<p><strong>ベンダーロックインの可能性</strong>：すべてのDevOpsニーズに1つのプラットフォームに依存することは、チームがGitLabに依存し、将来他のツールに切り替える場合に課題が生じる可能性があります。</p>
</li>
<li>
<p><strong>コストの考慮</strong>：GitLabは無料ティアを含むさまざまなプランを提供していますが、より高度な機能（大規模なチームと複雑なプロジェクトに必要なもの）は、通常、有料プランの一部で提供されており、一部の組織にとってはかなりの費用がかかる可能性があります。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="notion">Notion<a href="https://illacloud.com/ja/blog/it-support#notion" class="hash-link" aria-label="Notion への直接リンク" title="Notion への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/notion.png" alt="notion" class="img_CfaS"></p>
<p>Notionは、メモ、タスク、ウィキ、データベースを含むあらゆるものを管理するためのオールインワンワークスペースです。これは、高性能なチーム向けに構築されたシンプルで高速かつ強力なツールです。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点-3">利点<a href="https://illacloud.com/ja/blog/it-support#%E5%88%A9%E7%82%B9-3" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>多用途性</strong>：オールインワンワークスペースとして、Notionはメモ、タスク、ウィキ、データベースなどさまざまなコンテンツタイプを管理できる多目的プラットフォームを提供します。この多目的性は、1つのアプリケーション内でさまざまな作業の効率を向上させることができます。</p>
</li>
<li>
<p><strong>使いやすさ</strong>：シンプルで高速と評されるNotionは、ユーザーフレンドリーなインターフェースを持つ可能性が高く、迅速な導入と使いやすさを実現します。これにより、学習カーブが低減し、生産性が向上します。</p>
</li>
<li>
<p><strong>カスタマイズ性</strong>：Notionのプラットフォームは一般的に高度なカスタマイズが可能で、ユーザーは</p>
</li>
</ol>
<p>個人の使用またはチームの協力に合わせて調整できます。</p>
<ol start="4">
<li>
<p><strong>協力機能</strong>：高性能なチーム向けに構築されたNotionは、効果的なチームワーク、情報共有、プロジェクト管理を促進する堅牢な協力機能を持っていることが期待されます。</p>
</li>
<li>
<p><strong>統合機能</strong>：Notionは他のツールとの統合がうまく行きがちで、さまざまなアプリケーションやサービスを使用するチームにとって便利です。</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-3">欠点<a href="https://illacloud.com/ja/blog/it-support#%E6%AC%A0%E7%82%B9-3" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<ol>
<li>
<p><strong>新規ユーザーにとっては圧倒的かもしれない</strong>：Notionの多機能性とカスタマイズオプションの幅広さは、新規ユーザーにとっては圧倒的である可能性があり、よりシンプルなプラグアンドプレイ型のソリューションを求めているユーザーには適していないかもしれません。</p>
</li>
<li>
<p><strong>オフライン時の機能制限</strong>：Notionの機能はオフライン時に制限されることがあり、インターネット接続が不安定またはない場所でワークスペースにアクセスする必要があるユーザーにとっては欠点となる可能性があります。</p>
</li>
<li>
<p><strong>大規模なデータベースでのパフォーマンスの問題</strong>：データベースが大きくなるにつれて、Notionではパフォーマンスの問題が報告されており、読み込み時間の遅延やラグなどが発生することがあり、効率を妨げる可能性があります。</p>
</li>
<li>
<p><strong>データのエクスポートオプションの制約</strong>：Notionは情報の蓄積と整理には優れていますが、このデータをNotionからエクスポートすることが時々難しいことがあり、データの移植性に問題を引き起こす可能性があります。</p>
</li>
<li>
<p><strong>プレミアム機能のコスト要因</strong>：Notionは無料のティアを提供していますが、より高度な機能と大規模な使用制限は有料プランに制約されており、予算に敏感な個人や小規模なチームにとって考慮すべき要因となる可能性があります。</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-flow">ILLA Flow<a href="https://illacloud.com/ja/blog/it-support#illa-flow" class="hash-link" aria-label="ILLA Flow への直接リンク" title="ILLA Flow への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/it-support/connector.png" alt="connector" class="img_CfaS"></p>
<p>ILLA Flowは、ビジネスプロセスを自動化するのに役立つローコードワークフローツールです。これは、高性能なチーム向けに構築されたシンプルで高速かつ強力なツールです。</p>
<p>ドラッグアンドドロップインターフェースを使用して独自のワークフローを構築し、トリガーのスケジューリングまたはWebhookトリガーを使用してワークフローを実行できます。</p>
<p>スムーズなドラッグアンドドロップの体験により、統合の問題を心配することなく迅速にワークフローを構築できます。システム全体はJavaScriptによって駆動されており、柔軟性を確保しながら開発者向けにもフレンドリーです。</p>
<p>ILLA Flowは、スケジュールトリガーやWebhookトリガーを含む複数のトリガータイプをサポートしています。</p>
<p>ILLA Flowを使用して、次のようなことができます：</p>
<ul>
<li>新しいユーザーが登録したときにSlackにメッセージを送信する</li>
<li>GitHubのスターの数を毎日レポートする</li>
<li>毎日会議室を予約する</li>
<li>...</li>
</ul>
<p>エンジニアは、ILLA Flowを使用して多くのタスクを自動化しています：</p>
<ul>
<li>データベースからビジネスデータを読み取り、毎日Slackに送信する</li>
<li>CI/CDレポートシステムを構築する</li>
<li>警告が発生した場合にメールを送信する</li>
<li>...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/it-support#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>ITサポートにおいて、シンプルで使いやすいツールは効率を向上させるための鍵です。自分のニーズに合った適切なツールを選ぶことは重要です。皆さんが有用なツールを見つけて優れたITサポートになることを願っています。</p>]]></content:encoded>
            <category>ワークフロー</category>
        </item>
        <item>
            <title><![CDATA[2024年の市民開発者にとっての最高のツール]]></title>
            <link>https://illacloud.com/ja/blog/best-citizen-developer-tool</link>
            <guid>https://illacloud.com/ja/blog/best-citizen-developer-tool</guid>
            <pubDate>Tue, 23 Jan 2024 11:00:00 GMT</pubDate>
            <description><![CDATA[最近の数十年間、アプリケーション開発はITプログラマーの専売特許でしたが、これは将来変わるかもしれません！]]></description>
            <content:encoded><![CDATA[<p>最近の数十年間、アプリケーション開発はITプログラマーの専売特許でしたが、これは将来変わるかもしれません！</p>
<p>競争がますます激化するビジネス要求を考えると、企業が発展する唯一の方法は、追加費用をかけずにビジネス能力を向上させ、デリバリースピードを加速することです。</p>
<p>企業が直面するデジタルの課題に対処するために、市民開発（CD）は非技術的なビジネスユーザー（市民開発者とも呼ばれる）の道を開きます。IT承認済みのLow Code/No Code（LCNC）プラットフォームを使用すると、効率的で柔軟でユーザーフレンドリーな環境で企業アプリケーションを直感的に構築できます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="市民開発の価値">市民開発の価値<a href="https://illacloud.com/ja/blog/best-citizen-developer-tool#%E5%B8%82%E6%B0%91%E9%96%8B%E7%99%BA%E3%81%AE%E4%BE%A1%E5%80%A4" class="hash-link" aria-label="市民開発の価値 への直接リンク" title="市民開発の価値 への直接リンク">​</a></h2>
<p>プロジェクトマネジメント協会（PMI）によれば、市民開発はこの新しい標準を破壊する要因となり、多くの低コード/ノーコードプラットフォームはすでにそのクライアントやパートナーにこれを実証しています。実際の使用では、LCNCは最小のコストでアプリケーション開発の複雑さを大幅に削減する能力を証明しています。これまでに多くの組織が市民開発を採用し、迅速な変化を刺激し、コミュニティ全体で独自の足跡を作成し、全体の生産性を向上させるために運用しています。特に今日のデジタルの世界では、低コード/ノーコードは新しいデジタル空間が提供する無限の可能性を活用し、イノベーションを簡単に引き起こすのに重要な役割を果たしています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="おすすめのツール">おすすめのツール<a href="https://illacloud.com/ja/blog/best-citizen-developer-tool#%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E3%81%AE%E3%83%84%E3%83%BC%E3%83%AB" class="hash-link" aria-label="おすすめのツール への直接リンク" title="おすすめのツール への直接リンク">​</a></h2>
<p>基本的なコンピュータースキルを持つ市民開発者として、仕事をサポートするためのさまざまなツールが必要です。仕事を効率化するためのいくつかのおすすめのツールを以下に示します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.com/ja/blog/best-citizen-developer-tool#illa-cloud" class="hash-link" aria-label="ILLA Cloud への直接リンク" title="ILLA Cloud への直接リンク">​</a></h3>
<p>ビジネスロジック指向のツールを構築し、複雑なアニメーションや派手なページを追求せずに美しいUIだけが必要な場合、ILLA Cloudは開発と構築におすすめです。</p>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、新しいプロジェクトを作成する必要なく、シンプルなJSで内部ツールを迅速に構築できるノーコードツールです。</p>
<ul>
<li>ウェブ＆アプリ管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズされたB2Bツール</li>
<li>CRM</li>
</ul>
<p>ILLA Cloudを使用すると、コードを書く必要なくドラッグアンドドロップで迅速にツールを構築でき、作業効率が10倍向上します。また、チーム共同作業をネイティブでサポートし、同僚と一緒に編集と構築ができます。</p>
<p>ILLA Cloudにはコネクタの機能も備わっており、使用する他のSaaSツールに迅速に接続できます。スケジュールされたタスク、Webhooks、パラメーターの受け渡しなどもサポートしています。</p>
<p>ILLA CloudにはAIエージェント機能も含まれており、テキスト分析、音声分析、画像分析などのAI駆動ツールを迅速に構築するのに役立ちます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="webflow">Webflow<a href="https://illacloud.com/ja/blog/best-citizen-developer-tool#webflow" class="hash-link" aria-label="Webflow への直接リンク" title="Webflow への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-citizen-developer-tool/webflow.png" alt="webflow" class="img_CfaS"></p>
<p>高いUI要件を持つユーザー向けツールを構築し考えている場合、複雑なアニメーションやクールなページを追求している場合、Webflowは開発と構築におすすめです。</p>
<p>Webflowは自然な形で多くのアニメーション機能と強力なUI設定をサポートしており、非常に短い時間で見事なページを構築できます。また、モバイルデバイスに自然に適応します。</p>
<p>Webflowのコミュニティには、eコマース、ブログ、企業のウェブサイトなど、さまざまなビジネスニーズをサポートするテンプレートが豊富にあります。</p>
<p>Webflowには、ウェブサイト訪問者を管理するためのCRMバックエンドも含まれており、基本的な管理タスクのための二次開発が不要になり、迅速に使用できるようになっています。</p>
<p>もちろん、Webflowは運用コストなしでホスティングサービスもサポートしています。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="supabase">Supabase<a href="https://illacloud.com/ja/blog/best-citizen-developer-tool#supabase" class="hash-link" aria-label="Supabase への直接リンク" title="Supabase への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-citizen-developer-tool/supabase.png" alt="supabase" class="img_CfaS"></p>
<p>オンラインサイトを構築した場合、ユーザー向けの部分にはWebflow、内部ツールにはILLA Cloudを使用します。しかし、まだ重要な要素が欠けています。</p>
<p>ビジネス開発のデータには、それを保存する場所が必要です。</p>
<p>Supabaseはストレージにおすすめで、以下の利点を提供しています。</p>
<ul>
<li>開発者向けにフレンドリーで、非常に複雑な要件からシンプルなビジネス要件まで対応しています。</li>
<li>ビジネスの急速な成長に伴う技術的な問題を心配する必要はありません。事業が成長するにつれて動的に拡張します。</li>
<li>異なるテクノロジーとの互換性をサポートするさまざまなSDKをサポートしています。</li>
<li>SupabaseはPostgreSQLをベースにしているため、SQLを使用した簡単なデータ操作が可能です。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/best-citizen-developer-tool#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>市民開発者にとって、シンプルで使いやすいツールは作業効率を向上させるための鍵です。自分のニーズに合った適切なツールを選ぶことは重要です。皆さんが有用なツールを見つけ、優れた市民開発者になれることを願っています。</p>]]></content:encoded>
            <category>市民開発者</category>
            <category>市民開発</category>
            <category>市民開発者ツール</category>
        </item>
        <item>
            <title><![CDATA[Appsmith vs Retool: オープンソースの低コードプラットフォーム、どちらが優れている？]]></title>
            <link>https://illacloud.com/ja/blog/appsmith-vs-retool</link>
            <guid>https://illacloud.com/ja/blog/appsmith-vs-retool</guid>
            <pubDate>Tue, 23 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[低コード開発プラットフォームの常に進化する風景で、AppsmithとRetoolは強力な競合相手として登場し、それぞれユニークな機能と能力を提供しています。これらのプラットフォームは、アプリケーション開発を簡素化し、組織がカスタムの内部ツールを効率的に構築できるようにすることを目指しています。この包括的な比較では、両方のプラットフォームの強みと弱みを探り、低コード開発ニーズに対する情報提供をお手伝いするために、トップティアの代替案であるILLA Cloudを紹介します。]]></description>
            <content:encoded><![CDATA[<p>低コード開発プラットフォームの常に進化する風景で、AppsmithとRetoolは強力な競合相手として登場し、それぞれユニークな機能と能力を提供しています。これらのプラットフォームは、アプリケーション開発を簡素化し、組織がカスタムの内部ツールを効率的に構築できるようにすることを目指しています。この包括的な比較では、両方のプラットフォームの強みと弱みを探り、低コード開発ニーズに対する情報提供をお手伝いするために、トップティアの代替案であるILLA Cloudを紹介します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud-最高のソフトウェア開発ツール">ILLA Cloud: 最高のソフトウェア開発ツール<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#illa-cloud-%E6%9C%80%E9%AB%98%E3%81%AE%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB" class="hash-link" aria-label="ILLA Cloud: 最高のソフトウェア開発ツール への直接リンク" title="ILLA Cloud: 最高のソフトウェア開発ツール への直接リンク">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、新しいプロジェクトを作成する必要なく、簡単なJavaScriptで内部ツールを迅速に構築できる、使いやすい低コードツールです。</p>
<ul>
<li>Web＆アプリ管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズされたB2Bツール</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/illa.png" alt="illa" class="img_CfaS"></p>
<p>コンポーネントライブラリでの構築と比較して、ILLA Cloudは10倍速いツールの構築を可能にし、チーム内での共同編集をサポートします。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith">Appsmith<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#appsmith" class="hash-link" aria-label="Appsmith への直接リンク" title="Appsmith への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/appsmith.png" alt="appsmith" class="img_CfaS"></p>
<p>Appsmithは、インド拠点のオープンソースプラットフォームで、低コード開発分野で急速に認知されています。Retoolアプリケーションビルダーの多くの側面と機能の機能対応を誇り、強力な競合相手です。ただし、Appsmithを特徴付ける特定の特性について詳しく調べることが重要です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmithの利点">Appsmithの利点：<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#appsmith%E3%81%AE%E5%88%A9%E7%82%B9" class="hash-link" aria-label="Appsmithの利点： への直接リンク" title="Appsmithの利点： への直接リンク">​</a></h3>
<ul>
<li>オープンソースの利点：Appsmithはオープンソースプラットフォームで、開発者にプラットフォームのソースコードへのアクセスを提供します。このオープンな性質は、協力とカスタマイズを奨励し、開発環境に対するより大きな制御が必要な人々にとって好ましい選択肢です。</li>
<li>クラウドとオンプレミスの展開：Appsmithは、クラウドと完全なオンプレミスの展開をサポートすることにより、組織がセキュリティとコンプライアンスの要件に合致するホスティングオプションを選択できる柔軟性を提供します。</li>
<li>アクティブな開発者コミュニティ：Appsmithは、Githubなどのプラットフォームで成長している開発者コミュニティを楽しんでいます。このコミュニティのサポートにより、プラットフォームは現在のユーザーのニーズに合わせて最新で反応性のある状態を保つため、継続的な改善、タイムリーなバグ修正、新機能の開発が行われます。</li>
<li>幅広い統合オプション：Appsmithは、さまざまなデータベースとAPIとの統合を容易にし、ビジネスが必要なデータリソースにシームレスに接続できるようにします。この多様性により、アプリケーションが必要なデータリソースと連携できることが保証されます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmithのデメリット">Appsmithのデメリット：<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#appsmith%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88" class="hash-link" aria-label="Appsmithのデメリット： への直接リンク" title="Appsmithのデメリット： への直接リンク">​</a></h3>
<p>化されたワークフローが不足：顕著な制約の1つは、Appsmith内での自動化ワークフローやスケジュールされたジョブのサポートがないことです。これは、内部ツールで複雑な自動化プロセスを必要とする組織にとっては欠点となる可能性があります。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool-内部ツール作成のパイオニア">Retool: 内部ツール作成のパイオニア<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#retool-%E5%86%85%E9%83%A8%E3%83%84%E3%83%BC%E3%83%AB%E4%BD%9C%E6%88%90%E3%81%AE%E3%83%91%E3%82%A4%E3%82%AA%E3%83%8B%E3%82%A2" class="hash-link" aria-label="Retool: 内部ツール作成のパイオニア への直接リンク" title="Retool: 内部ツール作成のパイオニア への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/retool.png" alt="retool" class="img_CfaS"></p>
<p>Retoolは、カスタム内部ソフトウェアを作成するための確立された開発プラットフォームです。直感的なドラッグアンドドロップのアプリケーションビルダーとプレビルトのUIコンポーネントライブラリを提供しています。ただし、その強みと短所の両方を認識することが重要です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retoolの利点">Retoolの利点：<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#retool%E3%81%AE%E5%88%A9%E7%82%B9" class="hash-link" aria-label="Retoolの利点： への直接リンク" title="Retoolの利点： への直接リンク">​</a></h3>
<ul>
<li>ドラッグ＆ドロップのアプリケーションビルダー：Retoolは直感的なドラッグ＆ドロップのアプリケーションビルダーを提供し、さまざまな技術的な専門知識を持つユーザーにアクセス可能にします。</li>
<li>統合ライブラリ：豊富な統合ライブラリを備えているため、RetoolはデータベースとAPIへの接続プロセスを簡素化し、ビジネスがデータを効率的にアクセスおよび操作できるようにします。</li>
<li>細かいアクセス制御：Retoolは役割ベースのアクセス制御をサポートし、セキュアな環境を提供し、ユーザーが適切なツールとデータに適切なアクセス権を持っていることを確認します。</li>
<li>エンタープライズ機能：Retoolはシングルサインオン（SSO）、監査ログ記録、専任のエンタープライズサポートなどの機能を提供し、エンタープライズのニーズを満たします。</li>
<li>ネイティブモバイルアプリ：Retool Mobileは、Retool環境内でネイティブiOSおよびAndroidモバイルアプリを構築するための専用ソリューションを提供します。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retoolのデメリット">Retoolのデメリット：<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#retool%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88" class="hash-link" aria-label="Retoolのデメリ�ット： への直接リンク" title="Retoolのデメリット： への直接リンク">​</a></h3>
<ul>
<li>コードの拡張性が限られています：Retoolのコードの拡張性は主にJavaScriptをサポートしており、さまざまなコーディングオプションを必要とする開発者には課題があるかもしれません。</li>
<li>パフォーマンスが低い：ユーザーは、ブラウザベースのコード実行、単一ステップクエリ、グローバルエッジキャッシングの不足などに起因するRetoolアプリケーションのパフォーマンス問題を頻繁に報告しています。</li>
<li>ワークフローとスケジュールジョブが限られています：Retoolのワークフローオファリングはまだベータ版であり、完全な機能が不足しています。さらに、それはRetool Cloudでのみ利用可能で、セルフホステッドの顧客にアクセスが制限されています。</li>
<li>SQL専用の生成AI：Retoolの生成AI機能はSQLに制限されており、さまざまな言語とユースケースでのコード生成と最適化に対する開発者の要件を完全に満たす可能性がありません。</li>
<li>レガシーオンプレミス展開：Retoolのオンプレミス展開モデルはリソースを消費し、ビジネスがツールの開発からリソースを逸 divertしさせる複雑さを持っています。</li>
<li>高価な価格設定：Retoolは、多くの組織にとって高価なプラットフォーム手数料を採用しており、柔軟性に欠けています。</li>
<li>機能の遅い展開：新機能は時折遅く展開され、特にオンプレミスの顧客にとっては最新のテクノロジーを活用するのに遅れが生じることがあります。</li>
<li>クローズドソースコード：Retoolはクローズドソースであり、コード監査と拡張性オプションを制限しています。</li>
<li>米国クラウドのみ：Retool Cloudは米国でホスティングされており、米国外のユーザーとデータセンターに対するパフォーマンス低下を引き起こす可能性があります。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloudはベストオブ両方を提供します">ILLA Cloudはベストオブ両方を提供します<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#illa-cloud%E3%81%AF%E3%83%99%E3%82%B9%E3%83%88%E3%82%AA%E3%83%96%E4%B8%A1%E6%96%B9%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%97%E3%81%BE%E3%81%99" class="hash-link" aria-label="ILLA Cloudはベストオブ両方を提供します への直接リンク" title="ILLA Cloudはベストオブ両方を提供します への直接リンク">​</a></h2>
<p>ILLAは、内部ツールの開発において最も速いプラットフォームの一つです。これにより、開発者はウェブデザインやその他の仕事にかける貴重な時間を節約できます。開発者がますますILLAを選ぶ主な理由の1つは、そのライブラリです。このプラットフォームは、コードコンポーネントの豊富なコレクションを簡単にドラッグアンドドロップして複雑なアプリケーションを数分で構築できます。</p>
<p>また、アプリケーションプログラムインターフェースを使用して、選択したデータベースとILLAを結合することもできます。このプラットフォームはバックエンドとフロントエンドのデータを優れた方法で統合できます。その結果、開発者は基本的なデータ呼び出しで広範な情報のやり取りを実現できます。</p>
<p>どの開発者も、ILLAを選ぶ理由が2つあります。自由と他の開発者と同時に作業できる機会です。まず第一に、開発者はどこでもJavaScriptを書くことができます。これにより、仕事の柔軟性が向上し、多様な結果が得られます。</p>
<p>第二に、開発者はILLA Builderで他のプロフェッショナルとリアルタイムでリンクを共有できます。したがって、彼らは一緒に作業しながらお互いの作業を編集し、コメントすることができます。言い換えれば、開発者は楽しく協力的なワークスペースで作業できます。当然、これにより迅速で改善された結果が得られます。</p>
<p>最後に、開発者は常にILLAクラウドを使用して作業を持ち歩くことができます。どんなデバイスからでもクラウドにアクセスし、ILLAのユーザーインターフェースに移動できます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illaの主要な特徴">ILLAの主要な特徴<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#illa%E3%81%AE%E4%B8%BB%E8%A6%81%E3%81%AA%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="ILLAの主要な特徴 への直接リンク" title="ILLAの主要な特徴 への直接リンク">​</a></h3>
<p>ILLAの主要な特徴は次のとおりです：</p>
<ul>
<li>ILLAにはReactコンポーネントの使用可能なライブラリがあります。</li>
<li>ILLAデザインツールにはTypeScriptのタイピング機能があり、予測可能な静的タイピングをサポートしています。</li>
<li>ILLAデザインは、開発者の生産性向上に役立つクイックで簡単なインポートを提供します。</li>
<li>美しく設計された強力なテーマとコンポーネントにアクセスできます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="アップグレードされたillaの特徴">アップグレードされたILLAの特徴<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%81%9Filla%E3%81%AE%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="アップグレードされたILLAの特徴 への直接リンク" title="アップグレードされたILLAの特徴 への直接リンク">​</a></h3>
<p>ILLAのいくつかのアップグレードされた特徴は次のとおりです：</p>
<ul>
<li>任意のデータソースとの迅速な統合</li>
<li>ILLAを主要なデータベースまたは他のデータソースに接続できます。このツールを使用すると、バックエンドからフロントエンドコンポーネントを使用してデータを取得できます。</li>
<li>効率の向上のためのリアルタイムコラボレーション</li>
<li>ILLA Builderは開発者がプロジェクトで協力して作業できるようにします。彼らは異なる開発者にリンクを作成し共同編集し、リアルタイムで他のチームメンバーとコミュニケーションを取ることができます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="あなたのニーズに合ったレスポンシブなuiライブラリ">あなたのニーズに合ったレスポンシブなUIライブラリ<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AE%E3%83%8B%E3%83%BC%E3%82%BA%E3%81%AB%E5%90%88%E3%81%A3%E3%81%9F%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%81%AAui%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA" class="hash-link" aria-label="あなたのニーズに合ったレスポンシブなUIライブラリ への直接リンク" title="あなたのニーズに合ったレスポンシブなUIライブラリ への直接リンク">​</a></h3>
<p>ILLA Builderには、すべての開発者のニーズに対応する多くのコンポーネントも含まれています。したがって、開発者は望む内部ツールを迅速に開発するためにドラッグアンドドロップビルダーにアクセスできます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/appsmith-vs-retool#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>総括すると、AppsmithとAppsmithはどちらも優れた低コードプラットフォームで、アプリケーションの迅速かつ効率的な構築をサポートできます。ただし、それぞれ独自の強みと弱みがあり、どちらが適切かを決定する前に自身のニーズを考慮することが重要です。強力な管理機能を備えた手を動かすアプローチをお求めの場合、Tooljetが適しているかもしれません。一方、コーディングの経験が必要ないユーザーフレンドリーなプラットフォームをお求めの場合、Appsmithが適しているかもしれません。最終的に、それはあなたがどのような開発者で、どのようなアプリケーションを構築したいかにかかっています。</p>]]></content:encoded>
            <category>tooljet</category>
            <category>appsmith</category>
            <category>retool</category>
        </item>
        <item>
            <title><![CDATA[Tooljet vs. Appsmith: オープンソースのローコードプラットフォーム、どちらが優れているか？]]></title>
            <link>https://illacloud.com/ja/blog/tooljet-vs-appsmith</link>
            <guid>https://illacloud.com/ja/blog/tooljet-vs-appsmith</guid>
            <pubDate>Tue, 23 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[ローコード開発プラットフォームを考えている場合、TooljetとAppsmithのどちらが選択肢として優れているか疑問に思うかもしれません。両者は異なる機能を提供するオープンソースプラットフォームですが、それぞれ独自の強みと弱点があります。このブログ記事では、TooljetとAppsmithを比較し、あなたのニーズに合った選択肢をサポートします。]]></description>
            <content:encoded><![CDATA[<p>ローコード開発プラットフォームを考えている場合、TooljetとAppsmithのどちらが選択肢として優れているか疑問に思うかもしれません。両者は異なる機能を提供するオープンソースプラットフォームですが、それぞれ独自の強みと弱点があります。このブログ記事では、TooljetとAppsmithを比較し、あなたのニーズに合った選択肢をサポートします。</p>
<p>Tooljetは、視覚的な要素とドラッグアンドドロップツールを使用することを好む人々に最適です。そのユーザーインターフェースを使用すると、さまざまなコンポーネントを簡単に選択し、ドラッグアンドドロップしてアプリケーションを素早く作成できるため、アプリケーションの基本から迅速に作成できます。さらに、Tooljetにはリアルタイムで他のユーザーと協力し、プロジェクトの進捗をモニターするための強力な管理機能も備わっています。</p>
<p>Appsmithは、アプリケーションにより多くの制御を望む開発者に適しています。API統合、トリガー、スクリプトなど、アプリケーションに複雑な機能を追加できる幅広い機能を提供しています。さらに、Appsmithには必要な場合にカスタムコードを簡単に書くことができる直感的なコードエディタも備わっています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud-最高のソフトウェア開発ツール">ILLA Cloud: 最高のソフトウェア開発ツール<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#illa-cloud-%E6%9C%80%E9%AB%98%E3%81%AE%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB" class="hash-link" aria-label="ILLA Cloud: 最高のソフトウェア開発ツール への直接リンク" title="ILLA Cloud: 最高のソフトウェア開発ツール への直接リンク">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、新しいプロジェクトを作成せずに簡単なJSで内部ツールを素早く作成できる即時利用可能なローコードツールです。</p>
<ul>
<li>ウェブおよびアプリの管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズ可能なB2Bツール</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/illa.png" alt="illa" class="img_CfaS"></p>
<p>コンポーネントライブラリを使用する開発と比較して、ILLA Cloudはチーム内での共同編集をサポートし、ツールを10倍速く作成できます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljetとappsmithは2つの人気のあるソフトウェア開発ツールです">TooljetとAppsmithは2つの人気のあるソフトウェア開発ツールです。<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#tooljet%E3%81%A8appsmith%E3%81%AF2%E3%81%A4%E3%81%AE%E4%BA%BA%E6%B0%97%E3%81%AE%E3%81%82%E3%82%8B%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%99" class="hash-link" aria-label="TooljetとAppsmithは2つの人気のあるソフトウェア開発ツールです。 への直接リンク" title="TooljetとAppsmithは2つの人気のあるソフトウェア開発ツールです。 への直接リンク">​</a></h2>
<p>TooljetとAppsmithは、データソースを使用してアプリケーションを素早く効率的に作成するための非常に強力なソフトウェア開発ツールです。両方のツールは、ビジネスプロセス管理を最適化するために直感的なドラッグアンドドロップ要素、コードツール、データ接続、ビジュアル開発プロセスを使用しています。</p>
<p>その幅広い機能セットにより、TooljetとAppsmithは多くの開発者に成功をもたらし、データ駆動型のアプリケーションを短期間で開発し続けています。これらは、高度なデータ駆動型アプリケーションをわずか数ステップで作成したいすべてのコーディングスキルを持つソフトウェア開発者にとって不可欠なツールであることを何度も証明しています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet---プロジェクトをよりコントロールしたい人向け">Tooljet - プロジェクトをよりコントロールしたい人向け<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#tooljet---%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%82%88%E3%82%8A%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%81%84%E4%BA%BA%E5%90%91%E3%81%91" class="hash-link" aria-label="Tooljet - プロジェクトをよりコントロールしたい人向け への直接リンク" title="Tooljet - プロジェクトをよりコントロールしたい人向け への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/tooljet.png" alt="tooljet" class="img_CfaS"></p>
<p>TooljetとAppsmithは、市民開発者が迅速なアプリケーション開発を行うための強力なツールです。Tooljetはより実用的なアプローチを提供し、ビジネスユーザーがカスタムUIコンポーネントを備えた完全な管理パネルを作成するために必要なコントロールを持つことを可能にします。</p>
<p>この直感的なユーザーインターフェースは、ドラッグアンドドロップツール、ビジュアル要素、データソースを使用してアプリケーションをデザイン、開発、管理するためのユーザーに提供し、簡単にアプリケーションを作成できます。使いやすいユーザーインターフェースに加えて、Tooljetにはリアルタイム協力、包括的なプロジェクト管理機能、統合コンポーネントなど、強力な機能も備わっています。</p>
<p>この豊富な機能セットにより、開発者はコーディングを心配することなく迅速なアプリケーションを作成できます。TooljetはJava、JavaScript、Python、Rubyなどさまざまなプログラミング言語をサポートしており、カスタムアプリケーションの作成にさらに自由度を提供します。さらに、プロジェクトで作業する際に追加のサポートが必要なユーザー向けにTooljetは豊富なドキュメンテーションも提供しています。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljetの利点">Tooljetの利点：<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#tooljet%E3%81%AE%E5%88%A9%E7%82%B9" class="hash-link" aria-label="Tooljetの利点： への直接リンク" title="Tooljetの利点： への直接リンク">​</a></h3>
<ul>
<li>ドラッグアンドドロップツールを使用して迅速にアプリケーションを作成できる直感的で使いやすいユーザーインターフェース</li>
<li>リアルタイムで他のユーザーと協力し、プロジェクトの進行状況をモニターするための強力な管理機能</li>
<li>アプリケーションのパフォーマンス、使用状況、信頼性を測定するための統合分析およびレポートツール</li>
<li>Webhooks、API統合、追加の複雑さのためのカスタムコードをサポートする機能豊富なプラットフォーム</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljetの欠点">Tooljetの欠点：<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#tooljet%E3%81%AE%E6%AC%A0%E7%82%B9" class="hash-link" aria-label="Tooljetの欠点： への直接リンク" title="Tooljetの欠点： への直接リンク">​</a></h3>
<ul>
<li>ビジュアルアプローチは、基礎コードの理解なしに問題を解決するのが難しいことがある</li>
<li>ビジュアル要素は制限されており、より複雑なプロジェクトには十分な柔軟性を提供しない場合がある</li>
<li>サードパーティの統合のサポートが限られており、特定のアプリケーションのユースケースを制限する可能性がある</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith---ユーザーフレンドリー">Appsmith - ユーザーフレンドリー<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#appsmith---%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%95%E3%83%AC%E3%83%B3%E3%83%89%E3%83%AA%E3%83%BC" class="hash-link" aria-label="Appsmith - ユーザーフレンドリー への直接リンク" title="Appsmith - ユーザーフレンドリー への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/appsmith.png" alt="appsmith" class="img_CfaS"></p>
<p>Appsmithは、コーディング経験がなくてもアプリケーションを作成したい人々に最適です。技術的な知識が必要ないユーザーに対してアプリケーション開発をますますアクセス可能にします。Appsmithは、技術的な知識を必要としないユーザーが迅速なデータ駆動型アプリケーションを作成するための直感的で使いやすいローコードプラットフォームです。簡単なドラッグアンドドロップユーザーインターフェースを使用して、カスタムUIコンポーネントを簡単に作成し、包括的なプロジェクト管理機能でプロジェクトを管理できます。</p>
<p>Appsmithは、認可されたスタッフだけが機密情報にアクセスできるようにするロールベースのアクセス制御など、高度なセキュリティ機能も提供しています。さらに、Appsmithはシームレスにサードパーティサービスに統合し、Webhooks、API統合、カスタムコードをサポートしており、コーディングの必要なしに堅牢なアプリケーションを作成するための優れた選択肢です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmithの利点">Appsmithの利点：<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#appsmith%E3%81%AE%E5%88%A9%E7%82%B9" class="hash-link" aria-label="Appsmithの利点： への直接リンク" title="Appsmithの利点： への直接リンク">​</a></h3>
<ul>
<li>開発者が簡単に複雑な機能をアプリケーションに追加できる高度なカスタマイズ機能</li>
<li>必要に応じてカスタムコードを簡単にプロジェクトに記述できる直感的なコードエディタ</li>
<li>JavaScript、HTML5、CSS3、TypeScriptなど、複数のプログラミング言語をサポート</li>
<li>柔軟なAPI統合により、さまざまなサービスを迅速かつ安全に結合できる</li>
<li>新しいアプリケーションを基本から作成するのを簡単にする多くの事前定義のテンプレートとコンポーネントのバラエティ</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmithのデメリット">Appsmithのデメリット：<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#appsmith%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88" class="hash-link" aria-label="Appsmithのデメリット： への直接リンク" title="Appsmithのデメリット： への直接リンク">​</a></h3>
<ul>
<li>他のLow-Codeプラットフォームほどユーザーフレンドリーではなく、特定のユーザーにとってはその有用性が制限される可能性があります</li>
<li>コードの変更は手間がかかることがあり、変更ごとに手動の調整が必要です</li>
<li>Tooljetよりも高価で、一部の予算には適した選択肢ではないかもしれません</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloudは両方の世界を提供します">ILLA Cloudは両方の世界を提供します<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#illa-cloud%E3%81%AF%E4%B8%A1%E6%96%B9%E3%81%AE%E4%B8%96%E7%95%8C%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%97%E3%81%BE%E3%81%99" class="hash-link" aria-label="ILLA Cloudは両方の世界を提供します への直接リンク" title="ILLA Cloudは両方の世界を提供します への直接リンク">​</a></h2>
<p>ILLAは内部ツールの開発における最速のプラットフォームの一つです。 ILLAはWebデザインやその他の作業の一環で開発者の貴重な時間を節約します。開発者がILLAを選ぶ主要な理由の1つは、そのライブラリです。このプラットフォームには、コードコンポーネントの豊富なコレクションがあり、簡単にドラッグして複雑なアプリケーションを数分で作成できます。</p>
<p>また、選択したデータベースとILLAを接続するためにAPIを使用することもできます。このプラットフォームはバックエンドとフロントエンドのデータを優れた方法で統合できます。これにより、開発者はシンプルなデータ呼び出しで包括的な情報を提供できます。</p>
<p>どの開発者も、ILLAを愛する理由が2つあります：自由と他の開発者と同時に作業できる機会です。まず第一に、開発者はJavaScriptを好きな場所で書くことができます。これにより、作業の柔軟性が増し、多様な結果が得られます。</p>
<p>第二に、ILLA Builder内でリンクを他の専門家とリアルタイムで共有できます。これにより、進行中に作業を編集およびコメントできます。つまり、開発者は楽しく共同の作業領域で作業できます。もちろん、これにより迅速で向上した結果がもたらされます。</p>
<p>最後に、開発者はILLA Cloudを使用する際にいつでも作業を持ち運べます。どんなデバイスからでもクリック一つで、クラウドへのアクセスが可能で、ILLAのユーザーインターフェースにアクセスできます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illaの主な特徴">ILLAの主な特徴<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#illa%E3%81%AE%E4%B8%BB%E3%81%AA%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="ILLAの主な特徴 への直接リンク" title="ILLAの主な特徴 への直接リンク">​</a></h3>
<p>ここにILLAの主な特徴が示されています：</p>
<ul>
<li>ILLAにはすぐに使用できるReactコンポーネントライブラリがあります。</li>
<li>最も驚くべきことは、ILLAデザインツールがTypeScriptの型付け機能と予測可能な静的型付けをサポートしていることです。</li>
<li>ILLAデザインは、開発者の生産性を向上させる迅速で簡単なインポート機能を提供しています。</li>
<li>美しく設計された強力なテーマとコンポーネントにアクセスできます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="更新されたillaの機能">更新されたILLAの機能<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#%E6%9B%B4%E6%96%B0%E3%81%95%E3%82%8C%E3%81%9Filla%E3%81%AE%E6%A9%9F%E8%83%BD" class="hash-link" aria-label="更新されたILLAの機能 への直接リンク" title="更新されたILLAの機能 への直接リンク">​</a></h3>
<p>ここにいくつかの更新されたILLAの機能が示されています：</p>
<ul>
<li>任意のデータソースとの迅速な統合</li>
<li>ILLAを一般的なデータベースまたは他のデータソースに迅速に接続できます。このツールを使用して、バックエンドからフロントエンドコンポーネントを使用してデータを取得できます。</li>
<li>高度な効率向上のためのリアルタイムコラボレーション</li>
<li>ILLA Builderを使用すると、開発者はプロジェクトで協力できます。異なる開発者にリンクを作成し共有することで、ツールを共同で編集し、他のチームメンバーとリアルタイムにコミュニケーションを取ることができます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="あなたの要求に応じたレスポンシブuiライブラリ">あなたの要求に応じたレスポンシブUIライブラリ<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AE%E8%A6%81%E6%B1%82%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%9F%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96ui%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA" class="hash-link" aria-label="あなたの要求に応じたレスポンシブUIライブラリ へ��の直接リンク" title="あなたの要求に応じたレスポンシブUIライブラリ への直接リンク">​</a></h3>
<p>ILLA Builderには、あらゆる開発者の要求に効率的に対応する多くのコンポーネントがあります。したがって、開発者は望む内部ツールを迅速に開発するためにドラッグアンドドロップビルダーにアクセスできます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/tooljet-vs-appsmith#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>要するに、TooljetとAppsmithはどちらも優れたLow-Codeプラットフォームであり、アプリケーションを迅速かつ効率的に作成するのに役立つことができます。ただし、それぞれに独自の強みと弱点があるため、どちらを選ぶ前に自身のニーズを考慮することが重要です。より実用的なアプローチと強力な管理機能を求める場合は、Tooljetがより適しているかもしれません。一方、プログラミングスキル</p>
<p>を必要としないユーザーフレンドリーなプラットフォームを希望する場合は、Appsmithが適しているかもしれません。最終的には、あなたがどのような開発者であり、どのようなアプリケーションを作成したいかにかかっています。</p>]]></content:encoded>
            <category>tooljet</category>
            <category>appsmith</category>
            <category>retool</category>
        </item>
        <item>
            <title><![CDATA[Tooljet vs Retool: オープンソースのローコードプラットフォーム、どちらが優れていますか？]]></title>
            <link>https://illacloud.com/ja/blog/tooljet-vs-retool</link>
            <guid>https://illacloud.com/ja/blog/tooljet-vs-retool</guid>
            <pubDate>Tue, 23 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[効率的で使いやすい内部ツールの需要が高まっており、ローコードプラットフォームはビジネス向けのソリューションとして台頭しています。]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_dXVO" id="はじめに">はじめに<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB" class="hash-link" aria-label="はじめに への直接リンク" title="はじめに への直接リンク">​</a></h2>
<p>効率的で使いやすい内部ツールの需要が高まっており、ローコードプラットフォームはビジネス向けの内部プロセスを効率化するための解決策として浮上しています。RetoolとTooljetは、内部ツールの簡単な構築能力に注目され、人気のある2つのローコードプラットフォームです。このブログでは、RetoolとTooljetを比較し、それぞれの主要な機能、ユースケース、性能を探り、アプリケーション開発とデプロイメントのサポートプラットフォームとしてILLA Cloudを紹介します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud最高のソフトウェア開発ツール">ILLA Cloud：最高のソフトウェア開発ツール<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#illa-cloud%E6%9C%80%E9%AB%98%E3%81%AE%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB" class="hash-link" aria-label="ILLA Cloud：最高のソフトウェア開発ツール への直接リンク" title="ILLA Cloud：最高のソフトウェア開発ツール への直接リンク">​</a></h2>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、新しいプロジェクトを作成する必要なく、シンプルなJSで内部ツールを迅速に構築できるプラグアンドプレイのローコードツールです。</p>
<ul>
<li>Web &amp; App管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズされたB2Bツール</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/illa.png" alt="illa" class="img_CfaS"></p>
<p>コンポーネントライブラリを使用するよりも、ILLA Cloudは10倍高速なツール構築を実現し、チーム内での共同編集をサポートします。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#retool" class="hash-link" aria-label="Retool への直接リンク" title="Retool への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/retool.png" alt="retool" class="img_CfaS"></p>
<p>Retoolは広く使用されているローコードプラットフォームで、SQL GUIやAirtableダッシュボードなどのカスタム内部ツールを簡単に構築できます。幅広い統合機能を備えたRetoolは、さまざまなデータベースとAPIに接続でき、Redis UIやAirtable管理パネルを開発するための人気のある選択肢となっています。Retoolはセルフホスティング型とクラウドベースのソリューションの両方を提供しており、さまざまな規模のビジネスに柔軟なオプションを提供しています。ただし、Retoolの価格が高いと感じるユーザーもいるかもしれません。これがオープンソースのRetoolの代替方法を探す理由となっています。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retoolの主要な機能とユースケース">Retoolの主要な機能とユースケース:<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#retool%E3%81%AE%E4%B8%BB%E8%A6%81%E3%81%AA%E6%A9%9F%E8%83%BD%E3%81%A8%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9" class="hash-link" aria-label="Retoolの主要な機能とユースケース: への直接リンク" title="Retoolの主要な機能とユースケース: への直接リンク">​</a></h3>
<ul>
<li>幅広い統合機能: RetoolはSQL、Redis、AirtableなどさまざまなデータベースとAPIをサポートしており、Redis UI、SQL GUI、Airtable管理パネルの開発に向いています。</li>
<li>ユーザーインターフェースとエクスペリエンス: Retoolにはドラッグアンドドロップインターフェースがあり、コーディングの知識がないユーザーでも内部ツールを構築できます。また、テーブル、フォーム、チャートなどのプリビルトコンポーネントも提供しており、開発プロセスを迅速化します。</li>
<li>カスタマイズ性: Retoolのカスタムコンポーネントを使用すると、ユーザーは特定のニーズに合わせた独自のソリューションを作成できます。この機能により、内部ツールの外観と機能に対する柔軟性と制御が向上します。</li>
<li>セキュリティとコンプライアンス: Retoolは役割ベースのアクセス制御、監査ログ、SSOなどの強力なセキュリティ機能を提供しています。クラウドベースのソリューションに加えて、Retoolのセルフホスティング型およびオンプレミスオプションは、データとインフラストラクチャに対するさらなるコントロールをビジネスに提供します。</li>
<li>価格設定: Retoolはさまざまな価格プランを提供していますが、比較的高いコストが一部のユーザーにはハードルになることがあり、より手頃なオープンソースのRetoolの代替方法を探す動機となっています。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet">Tooljet<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#tooljet" class="hash-link" aria-label="Tooljet への直接リンク" title="Tooljet への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/tooljet-vs-appsmith-vs-retool/tooljet.png" alt="tooljet" class="img_CfaS"></p>
<p>Tooljetは、内部ツールやソフトウェアを迅速に構築および展開できる別の強力なローコードプラットフォームです。Retoolと同様に、Tooljetは幅広い統合を提供し、RedisおよびMySQL向けのGUIの作成やRedisクエリの処理を簡単にします。Tooljetのオープンソースの性質は、Retoolの代替方法を探しているビジネスにとって魅力的な選択肢です。使いやすさとカスタマイズ性に加え、TooljetはSSOやDockerサポートなどの機能を備えたセキュアでコンプライアントな環境を提供します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljetの主要な機能とユースケース">Tooljetの主要な機能とユースケース:<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#tooljet%E3%81%AE%E4%B8%BB%E8%A6%81%E3%81%AA%E6%A9%9F%E8%83%BD%E3%81%A8%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9" class="hash-link" aria-label="Tooljetの主要な機能とユースケース: への直接リンク" title="Tooljetの主要な機能とユースケース: への直接リンク">​</a></h3>
<ul>
<li>統合機能: Retoolと同様に、TooljetはさまざまなデータベースとAPIに接続できる幅広い統合を提供し、RedisやMySQLのGUIの作成、Redisクエリの処理が簡単になります。</li>
<li>ユーザーインターフェースとエクスペリエンス: Tooljetはドラッグアンドドロップビルダーを備えた直感的なインターフェースを提供し、ユーザーが内部ツールを作成してカスタマイズするのが簡単です。また、迅速な開発をサポートするためのプリビルトコンポーネントの豊富なライブラリも含まれています。</li>
<li>カスタマイズ性: Tooljetのオープンソースの性質により、Retoolよりもさらに高度なカスタマイズが可能です。ユーザーはソースコードを変更し、プラットフォームの開発に貢献することができ、内部ツールを固有の要件に合わせることができます。</li>
<li>セキュリティとコンプライアンス: Tooljetはセキュリティを優先し、SSO、Dockerサポート、役割ベースのアクセス制御などの機能を提供します。Tooljetを使用する際にも、内部ツールがセキュアかつコンプライアントであることを保証します。</li>
<li>価格設定: Tooljetのオープンソースモデルは無料で使用および変更できるため、特に予算の制約がある小規模なビジネスや予算に制約のある企業にとって魅力的でコスト効果の高い代替手段です。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retoolとtooljetの比較">RetoolとTooljetの比較<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#retool%E3%81%A8tooljet%E3%81%AE%E6%AF%94%E8%BC%83" class="hash-link" aria-label="RetoolとTooljetの比較 への直接リンク" title="RetoolとTooljetの比較 への直接リンク">​</a></h2>
<p>RetoolとTooljetを比較する際には、いくつかの重要な要因が影響します:</p>
<ul>
<li>統合機能: 両プラットフォームは幅広い統合を提供し、SQL、Redis、AirtableなどさまざまなデータベースとAPIに接続できるようになっています。両プラットフォームともこの分野で優れていますが、特定の統合要件や好みに応じて選択することがあります。</li>
<li>ユーザーインターフェースとエクスペリエンス: RetoolとTooljetはどちらも直感的なドラッグアンドドロップインターフェースとプリビルトコンポーネントのライブラリを提供しており、Googleの内部ツールやAirtableダッシュボードのような内部ツールを簡単に構築できます。個人の好みと使いやすさが、あなたのニーズに最適なオプションを決定するのに役立ちます。</li>
<li>カスタマイズ性: Retoolはカスタムコンポーネントを提供していますが、Tooljetのオープンソースの性質により、さらに高度なカスタマイズが可能です。両プラットフォームから選択する際に、内部ツールに必要なカスタマイズのレベルを考慮してください。</li>
<li>セキュリティとコンプライアンス: 両プラットフォームはセキュリティを優先し、Retoolはセルフホスティング型とオンプレミスオプションを提供し、TooljetはSSOとDockerサポートを提供しています。決定を下す際には、組織の特定のセキュリティポリシーと標準にどのプラットフォームが最適かを評価してください。</li>
<li>価格設定: Retoolの価格が一部のユーザーにとって障害になる場合、Tooljetのオープンソースモデルはより予算に優しい代替手段として魅力的かもしれません。各プラットフォームに関連する将来のコスト、更新、保守などの長期的なコストを考慮してください。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="あなたのニーズに合った適切なローコードプラットフォームの選択">あなたのニーズに合った適切なローコードプラットフォームの選択<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AE%E3%83%8B%E3%83%BC%E3%82%BA%E3%81%AB%E5%90%88%E3%81%A3%E3%81%9F%E9%81%A9%E5%88%87%E3%81%AA%E3%83%AD%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%AE%E9%81%B8%E6%8A%9E" class="hash-link" aria-label="あなたのニーズに合った適切なローコードプラットフォームの選択 への直接リンク" title="あなたのニーズに合った適切なローコードプラットフォームの選択 への直接リンク">​</a></h2>
<p>RetoolとTooljetの選択に関して、以下の要因を考慮してください：</p>
<ul>
<li>統合要件：両プラットフォームは幅広い統合オプションを提供していますので、具体的なニーズや好みに応じて選択することができます。内部ツールに必要なデータベースとAPIを最もサポートするプラットフォームを評価してください。</li>
<li>カスタマイズ性：カスタムコンポーネントが優先事項であれば、Retoolがより適しているかもしれません。ただし、柔軟性が高くオープンソースのプラットフォームを好む場合、Tooljetがより適しているかもしれません。</li>
<li>セキュリティとコンプライアンス：RetoolとTooljetの両方が堅牢なセキュリティ機能を提供していますので、決定をする際には組織のセキュリティポリシーや標準に合わせてください。特定のコンプライアンス要件を考慮してください。</li>
<li>予算：費用対効果のあるソリューションを探している場合、Tooljetのオープンソースモデルは、Retoolの価格体系よりも魅力的かもしれません。各プラットフォームに関連する長期的なコスト、更新、およびメンテナンスを考慮に入れてください。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloudはベストオブ両方を提供します">ILLA Cloudはベストオブ両方を提供します<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#illa-cloud%E3%81%AF%E3%83%99%E3%82%B9%E3%83%88%E3%82%AA%E3%83%96%E4%B8%A1%E6%96%B9%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%97%E3%81%BE%E3%81%99" class="hash-link" aria-label="ILLA Cloudはベストオブ両方を提供します への直接リンク" title="ILLA Cloudはベストオブ両方を提供します への直接リンク">​</a></h2>
<p>ILLAは内部ツールの開発において最速のプラットフォームの一つです。開発者はウェブデザインやその他の作業にかける貴重な時間を節約することができます。開発者がILLAを選ぶ主な理由の1つは、ライブラリです。このプラットフォームは、ドラッグアンドドロップで簡単にコードコンポーネントを組み合わせて、数分で複雑なアプリケーションを構築できる豊富なコードコンポーネントコレクションを提供しています。</p>
<p>ILLAを選ぶ理由の一つは、アプリケーションプログラミングインターフェースを使用して、選択したデータベースと連携できることです。このプラットフォームは、バックエンドとフロントエンドのデータを優れた方法で統合できます。その結果、開発者は基本的なデータ呼び出しで広範な情報のやり取りを可能にすることができます。</p>
<p>どんな開発者も、ILLAを愛するでしょう。その理由は2つです。自由と他の開発者と同時に作業できるチャンスです。まず第一に、開発者はどこでもJavaScriptを書くことができます。これにより、作業の柔軟性が向上し、結果の多様性が増します。</p>
<p>第二に、開発者はILLA Builderでリアルタイムに他のプロフェッショナルとリンクを共有できます。その結果、彼らはお互いの作業を編集しコメントを追加できます。言い換えれば、開発者は楽しく協力的な作業環境で作業することができます。当然、これにより速く改善された結果が得られます。</p>
<p>最後に、開発者はILLA Cloudを使用する際に常に作業を持ち歩くことができます。どんなデバイスからでも1クリックでクラウドにアクセスし、ILLAのユーザーインターフェースにアクセスできます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illaの主要な特徴">ILLAの主要な特徴<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#illa%E3%81%AE%E4%B8%BB%E8%A6%81%E3%81%AA%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="ILLAの主要な特徴 への直接リンク" title="ILLAの主要な特徴 への直接リンク">​</a></h3>
<p>ILLAの主要な特徴は以下です：</p>
<ul>
<li>ILLAにはReactコンポーネント用の使用準備が整ったライブラリがあります。</li>
<li>最も驚くべきことに、ILLAデザインツールにはTypeScriptの型付け機能があり、予測可能な静的型付けをサポートしています。</li>
<li>ILLAデザインは迅速かつ簡単なインポートを提供し、開発者の生産性向上に役立ちます。</li>
<li>美しく設計されたパワフルなテーマとコンポーネントにアクセスできます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="アップグレードされたillaの特徴">アップグレードされたILLAの特徴<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#%E3%82%A2%E3%83%83%E3%83%97%E3%82%B0%E3%83%AC%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%81%9Filla%E3%81%AE%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="アップグレードされたILLAの特徴 への直接リンク" title="アップグレードされたILLAの特徴 への直接リンク">​</a></h3>
<p>ILLAのアップグレードされた特徴は以下です：</p>
<ul>
<li>任意のデータソースとの迅速な統合</li>
<li>ILLAをメインストリームのデータベースまたは他のデータソースに接続できます。このツールを使用して、フロントエンドコンポーネントを使用してバックエンドからデータを取得できます。</li>
<li>強化された効率のためのリアルタイムコラボレーション</li>
<li>ILLA Builderを使用すると、開発者はプロジェクトで協力的に作業できます。異なる開発者にリンクを作成し共同編集し、リアルタイムで他のチームメンバーとコミュニケーションを取ることができます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="あなたのニーズに合ったレスポンシブuiライブラリ">あなたのニーズに合ったレスポンシブUIライブラリ<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AE%E3%83%8B%E3%83%BC%E3%82%BA%E3%81%AB%E5%90%88%E3%81%A3%E3%81%9F%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96ui%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA" class="hash-link" aria-label="あなたのニーズに合ったレスポンシブUIライブラリ への直接リンク" title="あなたのニーズに合ったレスポンシブUIライブラリ への直接リンク">​</a></h3>
<p>ILLA Builderには、すべての開発者のニーズに対応する多くのコンポーネントも用意されています。したがって、開発者は望む内部ツールを迅速に開発するためにドラッグアンドドロップビルダーにアクセスできます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/tooljet-vs-retool#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>要するに、TooljetとAppsmithはいずれも迅速かつ効率的にアプリケーションを構築するのに役立つ優れたローコードプラットフォームです。ただし、それぞれ独自の強みと弱点がありますので、どちらが最適かを決定する前に自分のニーズを考慮することが重要です。強力な管理機能を備えたより実践的なアプローチを求めている場合は、Tooljetがより適しているかもしれません。一方、コーディングの経験が必要ないユーザーフレンドリーなプラットフォームをお探しの場合は、Appsmithがより適しているかもしれません。最終的には、どの種類の開発者であり、どの種類のアプリケーションを構築したいかにかかっています。</p>]]></content:encoded>
            <category>tooljet</category>
            <category>appsmith</category>
            <category>retool</category>
        </item>
        <item>
            <title><![CDATA[ブロックのようにAIツールを作成する]]></title>
            <link>https://illacloud.com/ja/blog/build-ai-tools</link>
            <guid>https://illacloud.com/ja/blog/build-ai-tools</guid>
            <pubDate>Fri, 19 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[AIの開発は、今日では新奇性ではなく、さまざまな分野で広く適用されています。]]></description>
            <content:encoded><![CDATA[<p>AIの開発は、今日では新奇性ではなく、さまざまな分野で広く適用されています。しかし、ほとんどの人にとって、AIは高い障壁の技術であり、実用的な仕事に効果的に適用する前に、多くの時間と労力を学ぶ必要があります。</p>
<p>私たちそれぞれには、テキストから画像への変換ツールを構築したり、仕事の連鎖に特化したツールを作成したりするなど、独自のニーズがあります。 HuggingFaceには多くの興味深いモデルがあり、これらのモデルを基に独自のAIツールを素早く作成できるようになり、私たちの仕事をより賢くすることができます！</p>
<p>以下は、ユーザーがブロックのようにAIツールを構築できるようにする推奨ツールです：</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.com/ja/blog/build-ai-tools#illa-cloud" class="hash-link" aria-label="ILLA Cloud への直接リンク" title="ILLA Cloud への直接リンク">​</a></h2>
<p>公式ウェブサイト: <a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">https://illacloud.com</a></p>
<p>Github: <a href="https://github.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">https://github.com/illacloud/illa-builder</a></p>
<p>このオープンソースの低コードツールのスローガンは「<strong>AI駆動のビジネスツールを構築する</strong>」です。これは、ユーザーが迅速にAI駆動のツールを構築するのを支援することに焦点を当てています。ユーザーはドラッグアンドドロップを使用してページを構築し、次に3つの主要な機能を使用してAIに接続できます：</p>
<ul>
<li>ILLA AIエージェント</li>
<li>HuggingFaceのモデル</li>
<li>OpenAIのインターフェースを呼び出すためのRestAPI</li>
</ul>
<p>これにより、個人専用のAIツールを迅速に作成できます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="スマートアプリケーションの構築">スマートアプリケーションの構築<a href="https://illacloud.com/ja/blog/build-ai-tools#%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%A7%8B%E7%AF%89" class="hash-link" aria-label="スマートアプリケーションの構築 への直接リンク" title="スマートアプリケーションの構築 への直接リンク">​</a></h2>
<p>ここでは、ILLA Cloudで構築されたツールを使用して、独自のテキストから画像への変換パネルを構築します。これにより、次のような利点が得られます：</p>
<p>例: <a href="https://illacloud.com/image-generator" target="_blank" rel="noopener noreferrer">https://illacloud.com/image-generator</a></p>
<ul>
<li>生成された画像は、ILLA Flow機能を使用して任意のシステムやSaaSに送信できます。</li>
<li>後で使用するモデルは、RestAPIを介してまたはHuggingFaceのモデルを介して呼び出すことができます。</li>
<li>独自のプロンプトを追加して生成されたコンテンツが十分にカスタマイズされるようにできます。</li>
<li>ILLA AIエージェント機能を使用してコンテンツのプロンプトを充実させることができます。誰もがプロンプトの作成に精通しているわけではありませんから。</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/build-ai-tools/image_generate_content.webp" alt="image_generate_content" class="img_CfaS"></p>
<p>ここではいくつかのコンポーネントを使用し、ドラッグアンドドロップを使用して独自のWebパネルを迅速に作成し、次にJavaScriptを使用してロジックを接続し、私のチームで使用できるようにしました。</p>
<p>私は2つの例を構築しました。もう1つはAI音声処理パネルです。</p>
<p>例: <a href="https://illacloud.com/ai-voice-generator" target="_blank" rel="noopener noreferrer">https://illacloud.com/ai-voice-generator</a></p>
<p>このパネルには以下の機能があります：</p>
<ul>
<li>会議の議事録の書き起こし</li>
<li>会議の議事録の生成</li>
<li>会議の議事録の翻訳と吹き替え</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/build-ai-tools/mix_ai_voice.webp" alt="mix_ai_voice" class="img_CfaS"></p>
<p>これは主にOpenAIのWhisper機能を使用しています。数千のAI機能がありますが、最も重要なのは自分に合ったものを見つけることです。ILLA Cloudを使用すると、ブロックのように迅速にAIアプリケーションを構築できます。ぜひ今すぐご利用ください！</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/build-ai-tools#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>上記の紹介からわかるように、ILLA Cloudを使用すると迅速に独自のAIツールを構築でき、ILLA Cloudには多くのコンポーネントが含まれており、ほとんどの日常ビジネスニーズに対応できます。</p>
<p>ILLAの自社開発コンポーネントライブラリは、上記の機能を柔軟にカスタマイズできるようにしました。ILLA Cloudを使用して独自のAIツールを構築してみてください！</p>]]></content:encoded>
            <category>ai</category>
            <category>ツール</category>
        </item>
        <item>
            <title><![CDATA[Slackへのメッセージ送信を自動化するための最適な開発者向けツール]]></title>
            <link>https://illacloud.com/ja/blog/automate-send-to-slack</link>
            <guid>https://illacloud.com/ja/blog/automate-send-to-slack</guid>
            <pubDate>Wed, 17 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[Slackは多くの人々の仕事における主要なコミュニケーションツールとなり、日常的に開かなければならない必須ツールの1つとなりました。強力なテキストとメディアフォーマットをサポートするSlackは、さまざまなメッセージを送信できるようにしています。開発者として、自動化が必要な多くのタスクがあります。]]></description>
            <content:encoded><![CDATA[<p>多くの人々の仕事における主要なコミュニケーションツールとしてのSlackは、日常的に開かなければならない必須ツールの1つとなりました。強力なテキストとメディアフォーマットをサポートするSlackは、さまざまなメッセージを送信できるようにしています。開発者として、次のような多くの自動化が必要なタスクがあります：</p>
<ul>
<li><strong>コードのコンパイルとビルド</strong>: 特に大規模なプロジェクトでは、コードのコンパイルプロセスを自動化することは効率を大幅に向上させることができます。</li>
<li><strong>テスト実行</strong>: ユニットテスト、統合テスト、性能テストを自動的に実行してコードの品質を確保します。</li>
<li><strong>コードのデプロイ</strong>: CI/CDプロセスで一般的なコードの本番環境またはテスト環境へのデプロイを自動化します。</li>
<li><strong>データのバックアップとリカバリ</strong>: 定期的にデータベースとアプリケーションデータのバックアップを自動化し、必要な場合にそれを復元します。</li>
<li><strong>モニタリングとアラート</strong>: システムとアプリケーションのパフォーマンスを自動的にモニタリングし、問題が発生した場合にアラートを送信します。</li>
<li><strong>ログファイルの管理</strong>: ログの収集、分析、アーカイブを自動化します。</li>
<li><strong>環境の設定</strong>: 構成管理ツールを使用して開発、テスト、本番環境を自動的に設定および維持します。</li>
<li><strong>ドキュメンテーションの生成</strong>: コードコメントやデータベース構造から自動的にドキュメンテーションを生成します。</li>
<li><strong>データやファイルの一括処理</strong>: データ変換、移行、またはその他の一括処理タスクを自動的に実行します。</li>
<li><strong>依存関係の管理</strong>: プロジェクトの依存関係を自動的に管理して、ライブラリとフレームワークの最新かつ互換性のあるバージョンを確保します。</li>
</ul>
<p>これらのタスクは通常、JenkinsやGitHub Actionsを使用してCI/CDプロセスを実行したり、環境の設定と管理のためにAnsible、Puppetを使用したりするなど、さまざまなツールとスクリプトを使用して自動化されます。開発者はこれらのタスクを実行するために多くのツールを使用しますが、これらのツールは通常独立しています。タスクの完了後、私たち全員が更新情報について包括的な通知を評価するでしょう。</p>
<p>研究によれば、問題がSlackを介して作成時に通知されると、解決までの時間が50％短縮される可能性があると言われています。そのため、Slackへのメッセージ送信を自動化するためのツールが必要であり、さまざまなツールを確認するのではなく、1つの場所ですべてのメッセージを表示できるようにする必要があります。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/connector.png" alt="connector" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="解決方法">解決方法<a href="https://illacloud.com/ja/blog/automate-send-to-slack#%E8%A7%A3%EF%BF%BD%E6%B1%BA%E6%96%B9%E6%B3%95" class="hash-link" aria-label="解決方法 への直接リンク" title="解決方法 への直接リンク">​</a></h2>
<p>ここでは、この問題を解決するためのツールとして「ILLA Flow」というツールを選択します。これは、開発者向けのコネクタツールであり、Slackへのメッセージ送信を自動化するのをサポートします。</p>
<p>ILLA Flowは、RestAPI、GraphQL、さまざまなデータベース接続、さまざまなSaaSプラットフォームの機能など、さまざまな統合を提供しており、製品をお客様が使用しているものと簡単に接続できるようにしています。ILLA Flowはまた、スケジュールされたタスク、Webhook、パラメータの受け渡しをサポートしています。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/resource.png" alt="resource" class="img_CfaS"></p>
<p>ILLA Flowの最もユニークな機能は、ワークフローにAIエージェントを組み込む能力です。これにより、通知を送信する前にOpenAIのモデルによって作成されたAIエージェントを使用して、通知をよりスマートで興味深いものにすることができます。また、AIエージェントを使用して複雑な分析にも利用でき、以前は難解だった要約を簡素化できます。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/agent.png" alt="agent" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="達成した結果">達成した結果<a href="https://illacloud.com/ja/blog/automate-send-to-slack#%E9%81%94%E6%88%90%E3%81%97%E3%81%9F%E7%B5%90%E6%9E%9C" class="hash-link" aria-label="達成した結果 への直接リンク" title="達成した結果 への直接リンク">​</a></h2>
<p>ILLA Flowでワークフローを作成し、そのワークフロー内でSlackのWebhookを呼び出すことで、Slackへの自動メッセージ送信を実現できます。</p>
<p>CI/CDツールの完了後、または日常的なスケジュールタスクの後、Slackでメッセージを表示できます。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/automate-send-to-slack/connector.png" alt="connector" class="img_CfaS"></p>
<p>また、ILLA FlowをGitHubに接続し、ILLA Flowによって送信されたメッセージをGitHub Issuesで表示できます。</p>
<p>ILLA Flowをアラート監視システムに接続することもでき、アラームや異常が発生した場合にSlackでメッセージを表示できます。</p>
<p>最後に、ILLAの別製品であるILLA Builderは、Slackで送信されたリンクを介して詳細情報を表示するためにカスタムパネルを構築するのをサポートしており、通知を非常にスマートかつ詳細にします。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/automate-send-to-slack#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>日常の業務には多くの自動化シナリオがあり、ILLA Flowは開発者向けのツールです。他のほとんどの自動接続ツールは一般のユーザー向けに設計されており、開発者にとって設定が複雑になることがあります。</p>
<p>ILLA Flowを使用すると、AIエージェントとさまざまなSaaSを1クリックで統合でき、内部チームプロセスをより自動化し、通知をよりスマートにできます。</p>]]></content:encoded>
            <category>ワークフロー、Slack、自動化</category>
        </item>
        <item>
            <title><![CDATA[フリーランサーが管理パネルを作成するための最高の製品]]></title>
            <link>https://illacloud.com/ja/blog/boost-freelancer</link>
            <guid>https://illacloud.com/ja/blog/boost-freelancer</guid>
            <pubDate>Mon, 15 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[私は現在フリーランサーで、以前フリーランスのプラットフォームでウェブ開発のプロジェクトを手掛けました。]]></description>
            <content:encoded><![CDATA[<p>皆さん、こんにちは。私はオーウェンです。以前はTikTokで働いていたフルスタックエンジニアです。そこでの私の役割は、短いビデオコンテンツで知られるプラットフォームの開発と、快適なユーザーエクスペリエンスの確保に関わっていました。</p>
<p>私は現在フリーランサーで、以前フリーランスのプラットフォームでウェブ開発のプロジェクトを手掛けました。このプロジェクトのフロントエンド部分はそれほど時間がかからなかったのですが、管理パネルの広範な要件には多くの時間が費やされました。</p>
<p>私のデータはすべてSupabaseに保存されており、バックエンド管理のための完全なREST APIセットを開発しました。SupabaseでのCRUD操作にほとんどの作業が関わっていることに気づきました。管理パネルを迅速に開発するためのツールが必要でした。</p>
<p>そこで、管理パネルの迅速な開発を支援するオープンソースプロジェクトを作成しました。このプロジェクトはILLA Cloudと名付けられました。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloudとは何か">ILLA Cloudとは何か<a href="https://illacloud.com/ja/blog/boost-freelancer#illa-cloud%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B" class="hash-link" aria-label="ILLA Cloudとは何か への直接リンク" title="ILLA Cloudとは何か への直接リンク">​</a></h2>
<p>ILLAは開発者向けに設計されたローコードツールで、ドラッグアンドドロップのインターフェースを通じて迅速に管理パネルやダッシュボードを開発することができます。ILLA Cloudは、REST APIやGraphQLを含む一般的なデータベースやデータソースと幅広く統合します。</p>
<p>公式ウェブサイト: <a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">https://illacloud.com</a></p>
<p>ILLAを使用すると、以下のような様々なツールを迅速に構築することができます。</p>
<ul>
<li>ウェブ＆アプリ管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズされたB2Bツール</li>
</ul>
<p>これらはドラッグアンドドロップで簡単に作成でき、論理的な接続には最小限のJavaScriptのみが必要です。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/boost-freelancer/dashboard.png" alt="ダッシュボード" class="img_CfaS"></p>
<p>ILLAには、AI、データベース、さまざまなSaaSプラットフォームを統合するための包括的なコネクタツールセットもあります。これにより、お客様は、あなたが構築した製品を使用している製品と迅速にリンクすることができます。スケジュールされたタスク、Webhookのサポートに加えて、パラメータの渡しも可能です。</p>
<p>![コネクタ](<a href="https://cdn.illacloud.com/" target="_blank" rel="noopener noreferrer">https://cdn.illacloud.com</a></p>
<p>/illa-website/blog/boost-freelancer/connector.png)</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="なぜilla-cloudを作成したか">なぜILLA Cloudを作成したか<a href="https://illacloud.com/ja/blog/boost-freelancer#%E3%81%AA%E3%81%9Cilla-cloud%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%81%8B" class="hash-link" aria-label="なぜILLA Cloudを作成したか への直接リンク" title="なぜILLA Cloudを作成したか への直接リンク">​</a></h2>
<p>フリーランサーにとって、最も重要なことは疑いなく時間です。時間はお金です。管理パネルにあまり時間をかけたくないので、管理パネルを迅速に開発するのに役立つツールが必要でした。さらに、私のクライアントにとっては、使いやすさと美的魅力が最も重要です。そのため、開発にローコードツールを使用することは非常にユーザーフレンドリーな体験を提供します。</p>
<p>ドラッグアンドドロップを使用すると、コードを書くことなくSupabaseと直接やり取りする管理パネルを迅速に構築できます。このツールは管理パネルの迅速な開発に役立ち、ビジネスロジックの開発に集中することができます。</p>
<p>Supabaseを使用する理由は、非常にユーザーフレンドリーなオープンソースプロジェクトであり、バックエンドサービスの迅速な設定を支援するためです。また、そのドキュメントは非常にアクセスしやすく、私が始めるのに容易でした。</p>
<p>ILLA CloudにはSupabaseとの統合があります。SQLを使用すると、Supabase内のデータを迅速にクエリしたり変更したりすることができ、ダッシュボードや管理パネルの迅速な開発を促進します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="なぜilla-cloudを推奨するか">なぜILLA Cloudを推奨するか<a href="https://illacloud.com/ja/blog/boost-freelancer#%E3%81%AA%E3%81%9Cilla-cloud%E3%82%92%E6%8E%A8%E5%A5%A8%E3%81%99%E3%82%8B%E3%81%8B" class="hash-link" aria-label="なぜILLA Cloudを推奨するか への直接リンク" title="なぜILLA Cloudを推奨するか への直接リンク">​</a></h2>
<p>ILLAには月額20ドルのみ支払う必要があり、この料金はILLAのエディターの使用のためだけにかかります。これは非常にフリーランサーに優しいものです。あなたは数多くのクライアントとやり取りする必要があるかもしれませんが、ユーザーには支払う必要はありません。あなた自身のためだけに支払います。</p>
<p>さらに、ILLAにはすぐに使用できるドライブサービスが付属しています。開発中のファイルストレージのニーズには、ドライブサービスを直接使用することができ、迅速な開発に役立ちます。さらに、クライアントが高い使用量を持っている場合、彼らに自分のアカウントを再チャージしてもらうこともできますし、あなたに戻ってきてもらうこともできます。これはフォローアップの取引を締結するのに非常に有益です。</p>]]></content:encoded>
            <category>フリーランサー</category>
            <category>フリーランス</category>
            <category>アップワーク</category>
            <category>ファイバー</category>
        </item>
        <item>
            <title><![CDATA[SQLデータベース用のトップ7データベースGUI]]></title>
            <link>https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken</link>
            <guid>https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken</guid>
            <pubDate>Tue, 09 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[データベースGUIツールはSQLデータベースの作業を大幅に簡略化し、開発者にとって効率的です。選択肢が豊富な優れたデータベースGUIがあります。]]></description>
            <content:encoded><![CDATA[<p>データベースGUIツールはSQLデータベースの作業を大幅に簡略化し、開発者にとって効率的です。選択肢が豊富な優れたデータベースGUIがあります。このブログ投稿では、最適な選択をサポートするために、最高のデータベースGUIの7つを紹介します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="データベースguiとその重要性">データベースGUIとその重要性<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9gui%E3%81%A8%E3%81%9D%E3%81%AE%E9%87%8D%E8%A6%81%E6%80%A7" class="hash-link" aria-label="データベースGUIとその重要性 への直接リンク" title="データベースGUIとその重要性 への直接リンク">​</a></h2>
<p>データベースGUIは、データベース開発者、データベース管理者、データベース管理システムのユーザーにとって不可欠なツールです。データベース管理ツールを使用すると、データベース開発者はMySQLやPostgreSQLデータベースを編集および管理し、データベーススキーマをWindows、Linux、macOSのオペレーティングシステムで閲覧できます。</p>
<p>Microsoft SQL Server、Oracle MySQL Database、Oracle MySQL Serverなどの人気データベースも、包括的なクロスプラットフォームのGUIデータベース管理ツールによって利益を受けています。GUIデータベース管理ツールを使用することで、ユーザーは複雑なSQLステートメントを手動で入力する代わりに、データベースのための複雑なクエリジェネレータを1クリックで作成できます。</p>
<p>WebベースのGUIはますます人気があり、Webブラウザへのアクセス権を持つ人々がWindows、Linux、Macを含むあらゆるシステムからデータベースを簡単に管理できるようにしています。データベースGUIを使用することは、データベースの管理にはるかに迅速な方法です。また、SQLステートメントの手動入力と比較してはるかに包括的です。任意のデータベースシステムの機能に簡単にアクセスできるようにすることは、データベース管理を格段に利便性の高いものにします。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#illa-cloud" class="hash-link" aria-label="ILLA Cloud への直接リンク" title="ILLA Cloud への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/illa.png" alt="illa" class="img_CfaS"></p>
<p>ILLAは、開発者が短期間で機能豊かな内部ツールを作成できる一流のローコードソリューションで、ILLA Cloudを使用する開発者は、ウェブデザインやその他の統合にかかる時間と労力を削減することができます。</p>
<p>ILLAの開発者は、このツールのために多くの挿入を開発しました。これにより、ツールはさまざまな状況で開発者の要求とニーズに迅速に対応できます。さらに、ILLAのドラッグアンドドロップビルダーを使用して、生産性を最大限に高めることができます。ユーザーはまた、REST APIプラットフォームを使用してカスタムのWebサービスを作成することでデータベースを簡単に拡張できます。</p>
<p>ILLA Cloudは、SQLデータベースの管理に最適なグラフィカルユーザーインターフェース（GUI）の一つでもあります。ユーザーフレンドリーで直感的なインターフェースを提供し、開発者が複雑なSQLステートメントを手動で入力せずにデータベースを素早く変更できるようにします。ILLA Cloudは包括的なクロスプラットフォームサポートも提供し、Windows、Linux、Macを含むあらゆるシステムからアクセスできます。</p>
<p>ILLA Cloudを使用すると、ユーザーは1クリックで複雑なクエリジェネレータを作成できます。その優れた機能に加えて、ILLA Cloudはユーザーデータを保護するための企業レベルのセキュリティプロトコルも提供しています。さらに、ユーザーはREST APIプラットフォームを使用してデータベースを簡単に拡張できます。ILLA Cloudは、データベースの管理を簡略化したい人々にとって理想的な選択肢です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="dbeaver">DBeaver<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#dbeaver" class="hash-link" aria-label="DBeaver への直接リンク" title="DBeaver への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/dbeaver.avif" alt="dbeaver" class="img_CfaS"></p>
<p>DBeaverは、特にサブスクリプショ</p>
<p>ンモデルを避けたいユーザーにとって優れた選択肢です。これは無料でオープンソースのデータベース管理ツールで、クロスプラットフォームのサポートを提供し、Windows、Linux、Macを含むあらゆるシステムからデータベースにアクセスできます。</p>
<p>DBeaverを使用すると、ユーザーは素早く複雑なクエリを作成し、1クリックでデータベーススキーマを編集できます。また、大規模なSQLデータベースを管理するのを簡単にする多くのツールも提供しています。これらのツールにはERダイアグラムジェネレータ、データのインポート/エクスポート機能、複雑なクエリの作成を支援する強力なクエリジェネレータなどが含まれます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#retool" class="hash-link" aria-label="Retool への直接リンク" title="Retool への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/retool.avif" alt="retool" class="img_CfaS"></p>
<p>Retoolは、SQLデータベースを管理するための直感的なグラフィカルユーザーインターフェース（GUI）で、多くの機能と利点を提供しています。ドラッグアンドドロップ機能を備えたシンプルなインターフェースで、複雑なSQLステートメントを手動で入力せずに開発者がデータベースと効率的に対話し、迅速に変更できるようにします。</p>
<p>さらに、Retoolの高度なセキュリティプロトコルにより、ユーザーデータが不正アクセスから保護されます。また、クロスプラットフォームのサポートを提供し、Windows、Linux、Macを含むあらゆるシステムからアクセスできます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="tooljet">Tooljet<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#tooljet" class="hash-link" aria-label="Tooljet への直接リンク" title="Tooljet への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/tooljet.avif" alt="tooljet" class="img_CfaS"></p>
<p>Tooljetは、SQLデータベースを効率的に管理するための高度なグラフィカルユーザーインターフェース（GUI）で、幅広い機能とツールを提供します。直感的なドラッグアンドドロップインターフェースを備え、開発者は複雑なSQLステートメントを手動で入力せずにデータベースを迅速に変更できます。</p>
<p>Tooljetは、ユーザーが数クリックで複雑なクエリを作成できる強力なクエリジェネレータを提供し、組み込みのレポート機能を備えています。さらに、クロスプラットフォームのサポートを提供し、あらゆるシステムからデータベースにアクセスできます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="dbvisualizer">DbVisualizer<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#dbvisualizer" class="hash-link" aria-label="DbVisualizer への直接リンク" title="DbVisualizer への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/dbvisualizer.avif" alt="DbVisualizer" class="img_CfaS"></p>
<p>DbVisualizerは、SQLデータベースを管理するための強力で包括的なGUIツールです。ユーザーフレンドリーなドラッグアンドドロップインターフェースでデータベースを変更し、複雑なSQLステートメントを手動で入力する必要がない強力なクエリジェネレータを提供します。DbVisualizerは、Windows、Linux、Macを含むあらゆるシステムからデータベースにアクセスできる包括的なクロスプラットフォームサポートも提供します。</p>
<p>また、ユーザーデータを不正アクセスから保護する高度なセキュリティプロトコルも備えています。DbVisualizerは全体的に優れた選択肢です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith">Appsmith<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#appsmith" class="hash-link" aria-label="Appsmith への直接リンク" title="Appsmith への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/appsmith.avif" alt="appsmith" class="img_CfaS"></p>
<p>Appsmithは、大規模なSQLデータベースを管理するのを簡単にする非常にパワフルなグラフィカルユーザーインターフェース（GUI）です。多くのツールと機能を提供し、データベース管理を直感的かつ効率的にします。ドラッグアンドドロップインターフェースを使用して開発者は短時間で複雑なクエリを作成し、手動で長いSQLステートメントを入力する必要がありません。</p>
<p>Appsmithは、ユーザー認証や安全な接続暗号化などの高度なセキュリティプロトコルを提供しています。さらに、クロスプラットフォームのサポートを提供し、Windows、Linux、Macを含むあらゆるシステムからデータベースにアクセスできます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="dronahq">Dronahq<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#dronahq" class="hash-link" aria-label="Dronahq への直接リンク" title="Dronahq への直接リンク">​</a></h3>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/top-7-database-guis-for-sql-databases/dronahq.avif" alt="dronahq" class="img_CfaS"></p>
<p>Dronahqは、SQLデータベースの管理に使用する強力で機能豊富なグラフィカルユーザーインターフェース（GUI）です。このツールは、ユーザーが手動でSQLステートメントを入力することなく、複雑なクエリを作成するための直感的なドラッグアンドドロップインターフェースを提供します。</p>
<p>Dronahqは、Windows、Linux、Macなど、さまざまなシステムからデータベースにアクセスできる広範なクロスプラットフォームサポートを提供しており、ロールベースの認証やセキュアな接続の暗号化など、高度なセキュリティプロトコルも備えています。さらに、Dronahqには組み込みのレポート機能を使用して、ユーザーが迅速にカスタムレポートを作成できる強力なクエリジェネレータも備わっています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="あなたに最適なものを見��つける">あなたに最適なものを見つける<a href="https://illacloud.com/ja/blog/top-7-database-guis-fuer-sql-datenbanken#%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AB%E6%9C%80%E9%81%A9%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B" class="hash-link" aria-label="あなたに最適なものを見つける への直接リンク" title="あなたに最適なものを見つける への直接リンク">​</a></h2>
<p>利用可能なさまざまなグラフィカルユーザーインターフェース（GUI）の多様性を考慮し、自分に合った最適な選択肢を見つけるために試行することが重要です。各GUIには独自の機能があり、ユーザーは利点と欠点を検討し、研究する時間を取るべきです。</p>
<p>最終的に、適切なGUIの選択は、個人のコンピューターエクスペリエンスを大幅に向上させる長期的な投資である可能性があります。今日、ILLA Cloudを試してみるのはいかがでしょうか？優れた機能、使いやすいユーザーインターフェース、最適化されたパフォーマンスが、必要な解決策かもしれません！</p>]]></content:encoded>
            <category>データベース</category>
            <category>GUI</category>
            <category>ツール</category>
        </item>
        <item>
            <title><![CDATA[2024 年に CRUD アプリケーションを構築するための最高のツール]]></title>
            <link>https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications</link>
            <guid>https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications</guid>
            <pubDate>Mon, 08 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[CRUD アプリケーションは、ウェブページやモバイルアプリなどのさまざまなインターフェースを使用して、ユーザーがデータを作成、読み取り、更新、削除できるソフトウェアの一種です。]]></description>
            <content:encoded><![CDATA[<p>CRUD アプリケーションは、ユーザーがデータを作成、読み取り、更新、削除できるソフトウェアの一種で、ウェブ開発において非常に一般的です。これらは、複雑なコードを書かずにデータに基本的な操作を実行できるようにするもので、CRUD は、データモデルが行うべき四つの基本操作である「作成」、「読み取り」、「更新」、「削除」を表しています。</p>
<p>CRUD アプリケーションは、データベース、ユーザーインターフェース、API の三つの主要なコンポーネントから構成されています。データはデータベースに格納され、取得されます。ユーザーインターフェースはユーザーが対話するフロントエンドです。API にはデータベースと通信するコードとメソッドが含まれます。各コンポーネントは、開発者のニーズと好みに応じて異なる技術とフレームワークを使用できます。</p>
<p>このブログ記事では、CRUD アプリケーションを構築するための最高のツールをいくつか紹介し、各コンポーネントを個別にカバーします。また、それらを効果的に使用する方法についてもいくつかの例とヒントを提供します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="データベース">データベース<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9" class="hash-link" aria-label="データベース への直接リンク" title="データベース への直接リンク">​</a></h2>
<p>データベースは、ユーザーがデータを作成、読み取り、更新、削除できるようにするためのCRUD アプリケーションの中核であり、さまざまなデータベースの種類がありますが、大まかにはリレーショナル（SQL）と非リレーショナル（NoSQL）に分類できます。</p>
<p>リレーショナルデータベースは、データを格納するためにテーブルを使用し、各テーブルには事前に定義されたスキーマがあり、各行がレコードを表します。リレーショナルデータベースは、複雑なクエリとトランザクションが必要な構造化されたデータに適しています。最も人気のあるリレーショナルデータベースのいくつかは、MySQL、PostgreSQL、Oracle、SQL Server です。</p>
<p>非リレーショナルデータベースは、データを格納するためにコレクションを使用し、各コレクションには柔軟なスキーマがあり、各ドキュメントがレコードを表します。非リレーショナルデータベースは、高いスケーラビリティとパフォーマンスが必要な非構造化およびダイナミックなデータに適しています。最も人気のある非リレーショナルデータベースのいくつかは、MongoDB、CouchDB、Firebase、DynamoDB です。</p>
<p>CRUD アプリケーションに適したデータベースを選択するには、データの種類とボリューム、確実性と信頼性のレベル、実行するクエリの複雑さと頻度など、いくつかの要因を考慮する必要があります。また、データベースとユーザーインターフェース、API ツールの互換性と統合も考慮するべきです。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ユーザーインターフェース">ユーザーインターフェース<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E3%83%A6%E3%83%BC%EF%BF%BD%E3%82%B6%E3%83%BC%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9" class="hash-link" aria-label="ユーザーインターフェース への直接リンク" title="ユーザーインターフェース への直接リンク">​</a></h2>
<p>ユーザーインターフェースは、CRUD アプリケーションのフロントエンドであり、ユーザーがデータベースに格納されているデータを表示し、操作できる場所です。ユーザーインターフェースは、アプリケーションのタイプと複雑さに応じてさまざまな技術とフレームワークを使用して構築できます。</p>
<p>CRUD アプリケーションのユーザーインターフェースを構築する最も一般的な方法の一つは、HTML、CSS、JavaScript を使用することです。HTML はウェブページの構造とコンテンツを定義し、CSS はウェブページの外観とレイアウトをスタイル付け、JavaScript はウェブページに対話性と機能を追加します。プレーンな HTML、CSS、JavaScript を使用する</p>
<p>か、開発プロセスを簡素化し強化するライブラリやフレームワークを使用できます。</p>
<p>ユーザーインターフェースを構築するための最も人気のあるライブラリとフレームワークのいくつかは、React、Angular、Vue.js、Bootstrap、Tailwind CSS、jQuery などです。これらのツールは、動的でレスポンシブなウェブページを作成し、API とデータベースと通信できるさまざまな機能と利点を提供します。</p>
<p>CRUD アプリケーションのユーザーインターフェースを構築する別の方法は、ローコードまたはノーコードプラットフォームを使用することです。これらのプラットフォームでは、ドラッグアンドドロップコンポーネントとビジュアルエディタを使用してコードをほとんどまたはまったく書かずにウェブページを作成できます。最も人気のあるローコードまたはノーコードプラットフォームのいくつかは、Budibase、Appsmith、Bubble.io、Webflow などです。これらのツールは、複雑な技術を学ぶことなくシンプルで迅速なCRUD アプリケーションを作成したい初心者や非開発者向けに最適です。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="api">API<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#api" class="hash-link" aria-label="API への直接リンク" title="API への直接リンク">​</a></h2>
<p>API はユーザーインターフェースとデータベースの間の橋渡しです。API は、HTTP メソッド（GET（読み取り）、POST（作成）、PUT（更新）、DELETE（削除）など）を使用して、ユーザーインターフェースがデータベースからデータをリクエストする方法やデータをデータベースに送信する方法を定義します。API はまた、認証、承認、検証、エラーハンドリングなどを処理します。</p>
<p>CRUD アプリケーションのAPIを構築する方法はさまざまですが、最も一般的な方法の一つは REST（Representational State Transfer）を使用することです。REST は、リソース（データ）が標準的なHTTPメソッドとJSONまたはXMLなどのフォーマットを使用してアクセスおよび操作できる方法を定義するアーキテクチャスタイルです。REST API は、人間と機械の両方にとって理解しやすく使用しやすいです。</p>
<p>REST API を構築するための最も人気のあるツールのいくつかは、Node.js、Express.js、Flask、Django、Ruby on Rails、Laravel などです。これらのツールは、ウェブサーバーとAPIを作成および管理するためのさまざまな機能とライブラリを提供します。</p>
<p>CRUD アプリケーションのAPIを構築する別の方法は、GraphQL を使用することです。GraphQL はクエリ言語およびランタイムであり、単一のエンドポイントを使用してデータに対するクエリとミューテーション（操作）を定義および実行できるようにします。GraphQL API は、必要なデータのみをリクエストまたは送信できるため、過剰な取得や不足の取得を回避できるため、REST API よりも柔軟で効率的です。</p>
<p>GraphQL API を構築するための最も人気のあるツールのいくつかは、Apollo Server、Prisma、Hasura、Graphene などです。これらのツールは、GraphQL サーバーとスキーマを作成および管理するのに役立つライブラリまたはプラットフォームです。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="crud-アプリケーションの構築ツール">CRUD アプリケーションの構築ツール<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#crud-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB" class="hash-link" aria-label="CRUD アプリケーションの構築ツール への直接リンク" title="CRUD アプリケーションの構築ツール への直接リンク">​</a></h2>
<p>有用な CRUD アプリケーションを構築するのに便益を提供するソフトウェアは多数ありますが、最も適した CRUD アプリケーションを構築するのに役立つものを見つける必要があります。以下では、クライアントの好みと実行可能性に基づいて、おすすめの7つのソフトウェアについて説明し、それらの特徴と欠点を紹介し、賢明な選択ができるようにします。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#illa-cloud" class="hash-link" aria-label="ILLA Cloud への直接リンク" title="ILLA Cloud への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/illa.png" alt="illa" class="img_CfaS"></p>
<p>ILLA Cloudは、内部ツールを構築するためのオープンソースの低コードプラットフォームです。その主な目的は、プログラマーがデータを監視するためのモジュールを開発するのを支援することであり、開発者にとって最も退屈な仕事の1つです。このオープンソースの低コードアプリの新機能のもう一つは、カスタマイズされたコードブロックを作成し、後でマーケットプレイスで販売できることです。</p>
<p>それは主流のデータベースに接続されるか、または代替としてAPIを介して任意のデータベースに接続できます。ユーザーイベントの連鎖にアクションを追加することさえできます。バックエンドとフロントエンドのデータコンポーネントは密接に統合されており、開発者は大量の情報の相互作用のためのデータ呼び出しを書くことができます。</p>
<p>開発者にとっては、より豊かな機能を実装する自由を提供するため、2倍に役立ちます。彼らは{{テンプレート構文}}を使用してより豊かなコンテンツを作成できます。</p>
<p>リアルタイムのコラボレーションを可能にし、異なる場所で作業する開発者が同時に作業するのを容易にします。開発効率を向上させるために、リンクを共有し、共同編集し、コミュニケーションすることができます。</p>
<p>ILLA Builderには包括的なUIライブラリがあります。開発者は時間を無駄にせずに魅力的なインターフェースを構築するために使用できる多くの便利なコンポーネントがあります。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴">特徴:<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="特徴: への直接リンク" title="特徴: への直接リンク">​</a></h3>
<ul>
<li>任意のデータベースと簡単に統合できます。</li>
<li>ILLA CLIをWindows、Linux、MACのいずれかのオペレーティングシステムにダウンロードできます。</li>
<li>開発者がコミュニケーションを取るためのリアルタイムの協力を提供します。</li>
<li>柔軟な展開を提供します。ILLA Cloud、ILLA CLI、Kubernetes、およびDockerを使用できます。</li>
<li>サードパーティのAPIを簡単に統合できます。</li>
<li>共有、使用、コピー、および更新が無料です。</li>
<li>新しいアップデートと機能で常に磨かれています。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点">欠点:<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9" class="hash-link" aria-label="欠点: への直接リンク" title="欠点: への直接リンク">​</a></h3>
<ul>
<li>ILLA Cloudは基本的にプログラマーの利便性のために開発されました。</li>
<li>これを十分に活用するには、JavaScript、RUST、およびForlangのいずれかを習得する必要があります。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="appsmith">AppSmith<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#appsmith" class="hash-link" aria-label="AppSmith への直接リンク" title="AppSmith への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/appsmith.png" alt="appsmith" class="img_CfaS"></p>
<p>AppSmithは最初のオープンソースの低コードツールでした。開発者にクリックアンドドラッグプログラミングの全く新しい世界を紹介しました。標準プランには無制限のアプリとウィジェットが含まれており、ライブダッシュボードを構築するのに非常に役立ちます。この標準プランは無料です。これらの特徴の要約は以下です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴-1">特徴:<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4-1" class="hash-link" aria-label="特徴: への直接リンク" title="特徴: への直接リンク">​</a></h3>
<ul>
<li>サポートされているデータベースに簡単に接続できます。</li>
<li>直感的なドラッグアンドドロップウィジェットは非常に役立ち、コーディングをさらに簡単にします。</li>
<li>ガイド完備で、ドキュメンテーションやビデオも利用可能です。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-1">欠点:<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9-1" class="hash-link" aria-label="欠点: への直接リンク" title="欠点: への直接リンク">​</a></h3>
<ul>
<li>このアプリを十分に活用するには、JavaScriptを知っている必要があります。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="knack">Knack<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#knack" class="hash-link" aria-label="Knack への直接リンク" title="Knack への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/knack.png" alt="knack" class="img_CfaS"></p>
<p>Knackは、一般的には手動プロセスを自動化するために使用されるノーコードアプリです。既存のデータベースと統合しようとすると問題が発生する可能性があります。特定の制限があるため、内部プロセスに最適です。データを表示、管理、更新、分析、共有することができます。さまざまなケースのアプリケーションテンプレートが迅速に開始されます。以下はこのアプリケーションのいくつかの機能です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴-2">特徴：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4-2" class="hash-link" aria-label="特徴： への直接リンク" title="特徴： への直接リンク">​</a></h3>
<ul>
<li>組み込みのデータベースとユーザー管理、認証、電子メール、および通知の自動ワークフローをサポートします。</li>
<li>開発者はJavaScriptとCSSで簡単にカスタマイズできます。</li>
<li>ガイド全般、ドキュメンテーションとビデオを含む、ガイダンス用の完全なガイドが利用可能です。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-2">欠点：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9-2" class="hash-link" aria-label="欠点： への直接リンク" title="欠点： への直接リンク">​</a></h3>
<p>最も深刻な欠点は、他のデータベースと対話できないことです。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="budibase">Budibase<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#budibase" class="hash-link" aria-label="Budibase への直接リンク" title="Budibase への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/budibase.png" alt="budibase" class="img_CfaS"></p>
<p>Budibaseは、CRUDアプリケーションのために広く使用されている人気のあるローコードツールです。主要なデータベースと簡単に統合できます。以下はツールのいくつかの主要な特徴です。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴-3">特徴：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4-3" class="hash-link" aria-label="特徴： への直接リンク" title="特徴： への直接リンク">​</a></h3>
<ul>
<li>ページを美化するための多くのウィジェットとその他の機能があります。</li>
<li>内部データベースをサポートしますが、外部データベースに接続することもサポートします。</li>
<li>包括的なドキュメンテーションが利用可能で、ガイダンスも提供されています。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-3">欠点：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9-3" class="hash-link" aria-label="欠点： への直接リンク" title="欠点： への直接リンク">​</a></h3>
<ul>
<li>JavaScriptおよび技術スキルが必要です。</li>
<li>テンプレートは利用できません。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="bubble">Bubble<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#bubble" class="hash-link" aria-label="Bubble への直接リン��ク" title="Bubble への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/bubble.png" alt="bubble" class="img_CfaS"></p>
<p>このはるかに複雑なツールは、小規模な内部アプリにはお勧めできません。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴-4">特徴：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4-4" class="hash-link" aria-label="特徴： への直接リンク" title="特徴： への直接リンク">​</a></h3>
<ul>
<li>ウィジェットとデザインが利用可能です。</li>
<li>完璧に展開できます。</li>
<li>トラフィック、ユーザー、データのボリュームは無制限です。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-4">欠点：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9-4" class="hash-link" aria-label="欠点： への直接リンク" title="欠点： への直接リンク">​</a></h3>
<ul>
<li>学習が複雑です。</li>
<li>自分のインフラストラクチャにホストすることはできません。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ui-bakery">UI Bakery<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#ui-bakery" class="hash-link" aria-label="UI Bakery への直接リンク" title="UI Bakery への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/uibakery.png" alt="bakery" class="img_CfaS"></p>
<p>このアプリは比較的新しい製品ですが、事前定義のウィジェットと作成済みのテンプレートがあるため、内部ツールとCRUDアプリケーションを構築するための完璧なノーコードツールです。MySQL、Googleデータシート、およびPostgresなどのSQLデータベースに簡単に接続できます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴-5">特徴：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4-5" class="hash-link" aria-label="特徴： への直接リンク" title="特徴： への直接リンク">​</a></h3>
<ul>
<li>Google、Twitter、およびFacebookを介したユーザー管理をサポートします。</li>
<li>開発者はユニークなURLでアプリのホスティングを行うことができます。</li>
<li>ウィジェットとテンプレートをカスタマイズできます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-5">欠点：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9-5" class="hash-link" aria-label="欠点： への直接リンク" title="欠点： への直接リンク">​</a></h3>
<ul>
<li>一般向けアプリ、顧客向けウェブサイト、およびモバイルアプリには適していません。</li>
<li>これに対処するために技術スタッフが必要で、JavaScriptの取り扱いには適度な知識が必要です。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#retool" class="hash-link" aria-label="Retool への直接リンク" title="Retool への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/the-best-tools-for-build-crud-applications/retool.png" alt="retool" class="img_CfaS"></p>
<p>リストの最後になりますが、retoolもCRUDアプリケーションとして優れた選択肢です。これはドラッグアンドドロップのビルディングブロックプラットフォームです。外部データベースからデータを取得するにはJavaScriptをカスタマイズする必要があります。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴-6">特徴：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%89%B9%E5%BE%B4-6" class="hash-link" aria-label="特徴： への直接リンク" title="特徴： への直接リンク">​</a></h3>
<ul>
<li>組み込みの認証と認可をサポートします。</li>
<li>JavaScriptでカスタマイズできます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-6">欠点：<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E6%AC%A0%E7%82%B9-6" class="hash-link" aria-label="欠点： への直接リンク" title="欠点： への直接リンク">​</a></h3>
<ul>
<li>無料プランは最小限であり、エンドユーザーベースで料金がかかります。</li>
<li>一般向けアプリには使用できません。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/the-best-tools-for-build-crud-applications#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>CRUDアプリケーションは、さまざまなインターフェースを使用してデータの作成、読み取り、更新、削除をユーザーに許可するソフトウェアの一種です。CRUDアプリケーションは、データベース、ユーザーインターフェース、APIの3つの主要</p>
<p>なコンポーネントで構成されています。各コンポーネントは、開発者のニーズと好みに応じて異なるテクノロジとフレームワークを使用できます。</p>
<p>このブログ投稿では、CRUDアプリケーションを構築するための最高のツールのいくつかを個別にカバーしました。また、それらを効果的に使用するための例とヒントも提供しました。この投稿が、CRUDアプリケーションについての知識を深め、その構築方法を学ぶのに役立つことを願っています。</p>
<p>CRUDアプリケーションを迅速かつ簡単に構築できるツールをお探しの場合、ILLA Cloudをご利用いただくことをお勧めします。ILLA Cloudは、コーディング不要でCRUDアプリケーションを作成できるクラウドベースのプラットフォームです。任意のデータベースやAPIに接続し、ドラッグアンドドロップコンポーネントでユーザーインターフェースを設計し、ワンクリックでアプリケーションを展開できます。ILLA Cloudは、認証、認可、バリデーション、エラーハンドリングなどの機能も提供しています。ILLA Cloudは、数分でCRUDアプリケーションを構築するための最高のツールです。</p>]]></content:encoded>
            <category>crud</category>
            <category>tools</category>
        </item>
        <item>
            <title><![CDATA[内部ツールを構築するための最高のオープンソース低コードプラットフォーム]]></title>
            <link>https://illacloud.com/ja/blog/internal-tool</link>
            <guid>https://illacloud.com/ja/blog/internal-tool</guid>
            <pubDate>Fri, 05 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[オープンソースのツールは一般的ですが、1万のスターを持つものは珍しいです。]]></description>
            <content:encoded><![CDATA[<p>オープンソースのツールは一般的ですが、1万のスターを持つものは珍しいです。私は海外で1万のスターを持つ製品を共有します。ローコードツールはたくさんありますが、実際に役立つものは少ないです。このツールは主に北米の開発者によって使用され、そのDiscordコミュニティは非常に活発です。</p>
<p>コミュニティには実際に良いレビューがあります。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/good.png" alt="good" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloudのできること">ILLA Cloudのできること<a href="https://illacloud.com/ja/blog/internal-tool#illa-cloud%E3%81%AE%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8" class="hash-link" aria-label="ILLA Cloudのできること への直接リンク" title="ILLA Cloudのできること への直接リンク">​</a></h2>
<p>Github: <a href="https://illacloud.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">https://illacloud.com/illacloud/illa-builder</a></p>
<p>公式ウェブサイト: <a href="https://illa.cloud/" target="_blank" rel="noopener noreferrer">https://illa.cloud</a></p>
<p>ILLA Cloudの主要なユーザーはバックエンドエンジニアで、これは一般的な考えとは異なるかもしれません。多くのバックエンドエンジニアがILLA Cloudを使用して、多くのデータパネルや管理バックエンドを構築しています。結局のところ、ウェブ開発は常にバックエンドエンジニアにとって頭痛の種でした。ILLA Cloudで作成されたツールは、見た目も美しく、高速です。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/dashboard.png" alt="dashboard" class="img_CfaS"></p>
<p>ILLAはまた協力をサポートしており、複数の人がプロジェクトを共同で編集できるようにしています。バックエンドエンジニアはもはやさまざまな内部バックエンドを構築する必要はありません。フロントエンドエンジニアに頼る苦労と涙を私たちはみんな知っています。</p>
<p>公式ウェブサイトにはいくつかのソリューションもあり、現在は主に管理バックエンド、データパネルなどに焦点を当てているようです。</p>
<ul>
<li>AIテキストから画像へのパネル</li>
<li>AI音声処理パネル</li>
<li>データ分析パネル</li>
<li>コンテンツ管理CMS</li>
<li>カスタムCRM</li>
<li>管理バックエンド</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/solution.png" alt="solution" class="img_CfaS"></p>
<p>彼らはワークフローの構築もサポートしており、ローコード分野で多くの仕事を行っているようで、非常に包括的な製品のようです。基本的にさまざまな一般的なケースを満たしています。</p>
<p>たとえば：</p>
<ul>
<li>新しいユーザーが登録したときにSlackにメッセージを送信する</li>
<li>GitHubのスター数を毎日報告する</li>
<li>会議室の毎日の予約</li>
</ul>
<p>エンジニアはILLA Flowを使用して、多くのタスクを自動的に実行します。たとえば、データベースからビジネスデータを毎日読み取り、Slackに送信したり、CI/CDレポートシステムを構築したり、特定の警告が発生したときにメールを送信したりします。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/flow.jpeg" alt="flow" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="ユーザーエクスペリエンス">ユーザーエクスペリエンス<a href="https://illacloud.com/ja/blog/internal-tool#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%AA%E3%82%A8%E3%83%B3%E3%82%B9" class="hash-link" aria-label="ユーザーエクスペリエンス への直接リンク" title="ユーザーエクスペリエンス への直接リンク">​</a></h2>
<p>私はそれを簡単に体験しましたが、エディターのスムーズさと全体的なエクスペリエンスに本当に多くの努力が払われています。全体的な編集体験はかなり良いです。スムーズなドラッグアンドドロップの機能も含まれており、協力もサポートされています。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/team.gif" alt="collabration" class="img_CfaS"></p>
<p>さまざまなデータベース統合機能もサポートされており、さまざまなデータソースとデータベースからの迅速なデータの読み取りと書き込みが可能です。バックエンドエンジニアにとって、さまざまなサービスを統合することは本当に悪夢です。この場合、ILLAはすでにその作業を行っています。また、Huggingfaceとの統合もサポートしており、公式のコラボレーションのようです。Huggingfaceのモデル機能を素早く使用できるようになり、本当に興味深いです。いくつかのAI駆動のツールを迅速に作成できます。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/popular-tool/resource.png" alt="resource" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/internal-tool#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>ローコードツールはたくさんありますが、実際に使用および実装できるものは少ないです。ILLA</p>
<p>は現在2年間維持されており、その会社は現在これに完全に専念しています。特定の目的のために製造された一部のローコードツールとは異なり、彼らは開発者のニーズに直接対応しています。誰でも試すことができます！"</p>]]></content:encoded>
            <category>nvm</category>
            <category>nodejs</category>
            <category>mac</category>
            <category>javascript</category>
        </item>
        <item>
            <title><![CDATA[ILLA Flow: JavaScript駆動、開発者向けの自動ワークフロー作成製品]]></title>
            <link>https://illacloud.com/ja/blog/launch-flow</link>
            <guid>https://illacloud.com/ja/blog/launch-flow</guid>
            <pubDate>Fri, 05 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[ILLA Flowは、マインドマッピングに似た方法で完全なワークフローを構築できるワークフロー製品です。]]></description>
            <content:encoded><![CDATA[<p>みなさん、こんにちは。私はオーウェンで、私たちはローコードソリューションに特化したスタートアップ企業です。私たちのチームは非常に小さく、わずか7人です。</p>
<p>今日、私たちは新しい製品、ILLA Flowを発売しました。</p>
<p>ウェブサイト: <a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">https://illacloud.com</a> (ログイン後、ダッシュボードの左側にあります -&gt; Flow)</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-flow">ILLA Flow<a href="https://illacloud.com/ja/blog/launch-flow#illa-flow" class="hash-link" aria-label="ILLA Flow への直接リンク" title="ILLA Flow への直接リンク">​</a></h2>
<p>ILLA Flowは、マインドマッピングに似た方法で完全なワークフローを構築できるワークフロー製品で、さまざまなデータベースやAPIとの接続とスケジューリングが可能です。</p>
<p>ドラッグアンドドロップインターフェースを使用して独自のワークフローを構築し、トリガーのスケジューリングやWebhookトリガーを使用してワークフローを実行できます。</p>
<p>スムーズなドラッグアンドドロップのエクスペリエンスにより、統合の問題を気にせずに素早くワークフローを構築できます。システム全体はJavaScriptによって駆動されており、柔軟性を確保しながら開発者向けにも適しています。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/launch-flow/flow.jpeg" alt="flow" class="img_CfaS"></p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="すべてを統合">すべてを統合<a href="https://illacloud.com/ja/blog/launch-flow#%E3%81%99%E3%81%B9%E3%81%A6%E3%82%92%E7%B5%B1%E5%90%88" class="hash-link" aria-label="すべてを統合 への直接リンク" title="すべてを統合 への直接リンク">​</a></h2>
<p>ILLA Flowは、以下に接続できます</p>
<ul>
<li>RestAPI</li>
<li>MySQL</li>
<li>MariaDB,</li>
<li>PostgreSQL</li>
<li>...</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/launch-flow/resource.jpeg" alt="resource" class="img_CfaS"></p>
<p>より多くの接続機能のサポートを拡充する努力をしていきます。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="いくつかの例">いくつかの例<a href="https://illacloud.com/ja/blog/launch-flow#%E3%81%84%E3%81%8F%E3%81%A4%E3%81%8B%E3%81%AE%E4%BE%8B" class="hash-link" aria-label="いくつかの例 への直接リンク" title="いくつかの例 への直接リンク">​</a></h2>
<p>ILLA Flowは、スケジュールトリガーやWebhookトリガーを含む複数のトリガータイプをサポートしています。</p>
<p>ILLA Flowを使用して、以下のようなことができます：</p>
<ul>
<li>新しいユーザーが登録するとSlackにメッセージを送信</li>
<li>GitHubでの星の数を毎日報告</li>
<li>毎日会議室を予約</li>
<li>...</li>
</ul>
<p>エンジニアたちは、以下のようなタスクを自動化するためにILLA Flowを使用しています：</p>
<ul>
<li>データベースからビジネスデータを読み取り、毎日Slackに送信</li>
<li>CI/CDレポートシステムを構築</li>
<li>警告が発生した場合にメールを送信</li>
<li>...</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/launch-flow#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>ILLA Flowは、スケジュールトリガーとWebhooksの使用をサポートしています。ローコードツールとして、ILLAは複数のワークフローを駆動するためのパネルの構築も可能で、完全なビジネスプロセスを形成します。現在、製品は完全に無料で、費用はかかりません。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/launch-flow/dashboard.jpeg" alt="dashboard" class="img_CfaS"></p>
<p>この製品を作成した初期の意図は、市場に開発者向けのワークフロー製品が不足していることに対処することでした。私たちはより良い体験を提供するために、完全なローコードマトリックス製品を構築することを目指しています。さらに、Figmaで編集するようなチームでのリアルタイム共同編集を実現し、製品が初期段階であるため、まだ完璧ではない多くの機能があり、皆さんからの貴重なフィードバックを提供していただければ幸いです。</p>]]></content:encoded>
            <category>ワークフロー</category>
        </item>
        <item>
            <title><![CDATA[2024年のベストローコードプラットフォーム5選]]></title>
            <link>https://illacloud.com/ja/blog/best-low-code-platform</link>
            <guid>https://illacloud.com/ja/blog/best-low-code-platform</guid>
            <pubDate>Thu, 04 Jan 2024 10:00:00 GMT</pubDate>
            <description><![CDATA[ソフトウェア業界が進化するにつれ、ローコードツールはますます人気を集めています。適切なローコードツールを導入することで、さまざまなビジネスシナリオで効率と生産性の向上が実現できます。この記事では、2024年における最も人気のあるローコードツール製品について詳しく説明し、情報を元にした適切な選択を提供します。]]></description>
            <content:encoded><![CDATA[<p>ソフトウェア業界が進化するにつれ、ローコードツールはますます人気を集めています。さまざまなビジネスシナリオで適切なローコードツールを導入することで、驚異的な効率と生産性の向上が実現します。この記事では、2024年における最も人気のあるローコードツール製品について詳しく説明し、情報を元にした適切な選択を提供します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="なぜローコードツールを選ぶのか">なぜローコードツールを選ぶのか<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E3%81%AA%E3%81%9C%E3%83%AD%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E9%81%B8%E3%81%B6%E3%81%AE%E3%81%8B" class="hash-link" aria-label="なぜローコードツールを選ぶのか への直接リンク" title="なぜローコードツールを選ぶのか への直接リンク">​</a></h2>
<p>ローコードツールにはいくつかの魅力的な利点があります。それには以下が含まれます：</p>
<ul>
<li>ゼロの運用保守コスト</li>
<li>超高速の開発スピード</li>
<li>広範な開発者チームへの依存の削減</li>
<li>新しいアプリケーションの市場投入の加速</li>
</ul>
<p>通常、ローコードツールは内部ツールとポータルのシナリオの開発に特に適しています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="選択の幅">選択の幅<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E9%81%B8%E6%8A%9E%E3%81%AE%E5%B9%85" class="hash-link" aria-label="選択の幅 への直接リンク" title="選択の幅 への直接リンク">​</a></h2>
<p>私たちは、検討のために現在人気のあるローコードプラットフォームのリストをまとめました。詳細な紹介は後に続きます。</p>
<ul>
<li>ILLA Cloud：オープンソース</li>
<li>Budibase：オープンソース</li>
<li>Tooljet：オープンソース</li>
<li>SuperBlocks：プロプライエタリ</li>
<li>Retool：プロプライエタリ</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="illa-cloud">ILLA Cloud<a href="https://illacloud.com/ja/blog/best-low-code-platform#illa-cloud" class="hash-link" aria-label="ILLA Cloud への直接リンク" title="ILLA Cloud への直接リンク">​</a></h2>
<p>GitHubリンク：<a href="https://github.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">https://github.com/illacloud/illa-builder</a></p>
<p><a href="https://illacloud.com/" target="_blank" rel="noopener noreferrer">ILLA Cloud</a>は、シンプルなJavaScriptを使用して内部ツールを迅速に作成する革新的なローコードツールです。新しいプロジェクトをゼロから始める必要がなくなります。</p>
<p>主要な提供物には以下が含まれます：</p>
<ul>
<li>ウェブ＆アプリ管理パネル</li>
<li>データダッシュボード</li>
<li>カスタマイズ可能なB2Bツール</li>
</ul>
<p>ILLA Cloudは、従来のコンポーネントライブラリの構築よりも最大10倍高速な開発スピードを誇り、チームの効率を向上させる共同編集もサポートしています。</p>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/crm.webp" alt="crm" class="img_CfaS"></p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="ベストチョイス">ベストチョイス<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E3%83%99%E3%82%B9%E3%83%88%E3%83%81%E3%83%A7%E3%82%A4%E3%82%B9" class="hash-link" aria-label="ベストチョイス への直接リンク" title="ベストチョイス への直接リンク">​</a></h3>
<p>ILLA Cloudの他のローコードツールに対するユニークな利点：</p>
<ul>
<li>マルチユーザーのコラボレーションサポート</li>
<li>包括的なワークフローの機能</li>
<li>オープンソース製品でプライベートデプロイメントのオプションがある</li>
<li>さまざまな主要な統合に対応し、多様なデータソースに迅速に接続できる</li>
</ul>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/team.gif" alt="team" class="img_CfaS"></p>
<p>さらに、ILLA CloudにはAIエージェント機能が組み込まれています。このユニークな機能により、ローコードツールを使用して開発された製品にシームレスに統合できる迅速なAI駆動のライティングが可能です。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="budibase">Budibase<a href="https://illacloud.com/ja/blog/best-low-code-platform#budibase" class="hash-link" aria-label="Budibase への直接リンク" title="Budibase への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/budibase.png" alt="budibase" class="img_CfaS"></p>
<p>高速アプリケーション開発の領域で、Budibaseは強力なローコードプラットフォームとして登場し、開発者に迅速にカスタムアプリケーションを作成するためのツールを提供します。Budibaseの中核には、開発プロセスを簡素化するユーザーフレンドリーなビジュアル開発環境があります。この環境は、データ入力フォームからインタラクティブなダッシュボードまで、さまざまなアプリケーションのニーズに対応するプレビルトコンポーネントの多様な選択肢で充実しています。プレビルトの提供に加えて、BudibaseはカスタムCSSスタイルを設計する自由な柔軟性を提供し、アプリケーションに独自のビジュアルアイデンティティを注入する力を開発者に授けます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="オープンソース">オープンソース<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9" class="hash-link" aria-label="オープンソース への直接リンク" title="オープンソース への直接リンク">​</a></h3>
<p>Budibaseは明示的にオープンソースとして宣伝していませんが、その基盤には重要なヒントがあります。プラットフォームはオープンソースのテクノロジを利用しており、コミュニティ主導のイノベーションを促進しています。明確なオープンソース宣言の不在は、共同開発へのコミットメントに影響を与えませんが、確立されたオープンソースエコシステムを求める見込みのあるユーザーは、Budibaseのアーキテクチャを評価するためにさらに調査が必要かもしれません。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点">利点<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E5%88%A9%E7%82%B9" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<p>Budibaseの目立つ特徴の1つは、統合の能力です。プラットフォームは、アプリケーションがさまざまな外部サービスとシームレスに通信する現代の必要性を認識しています。プラグインが登場します。これにより、Budibaseはさまざまなサードパーティーサービスと統合できるようになり、外部ツールとサービスの機能を活用しながらBudibase環境内にとどまることができます。この統合フレンドリーなアプローチは、効率を高め、洗練された多機能アプリケーションの可能性を引き出します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点">欠点<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E6%AC%A0%E7%82%B9" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<p>強力なツールであるため、克服する必要のある学習曲線があり、Budibaseも例外ではありません。ローコード開発に新しいユーザー、特に低コード開発に新しいユーザーの中には、初めての段階で学習曲線が少し急であるかもしれません。プラットフォームの機能と能力の幅広さは、完全にマスターするために時間と労力の一定の投資を要求します。ただし、この初期段階を乗り越えることを耐え忍ぶユーザーにとって、Budibaseは創造的な可能性を実現し、驚異的な効率で革新的なアプリケーションのアイデアを具現化できる世界への扉を開きます。</p>
<p>低コードプラットフォームの競争の激しい環境で、Budibaseはユーザーフレンドリーなビジュアル開発、柔軟性、統合能力、価格プランのバランスを提供し、ワークフローの効率性を備えた有望な競技者として輝いており、あなたの創造的なアイデアのためのキャンバスとして、アプリケーションを敏捷性と繊細さを持って実現できるようにしています。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="tooljetツールジェット">Tooljet（ツールジェット）<a href="https://illacloud.com/ja/blog/best-low-code-platform#tooljet%E3%83%84%E3%83%BC%E3%83%AB%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88" class="hash-link" aria-label="Tooljet（ツールジェット） への直接リンク" title="Tooljet（ツールジェット） への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/tooljet.png" alt="Tooljet" class="img_CfaS"></p>
<p>低コード開発の常に進化する風景の中で、Tooljetはコーディングの複雑さに立ち入らずに洗練されたウェブアプリケーションを作成できるプラットフォームとして登場し、ダイナミックな競争相手となっています。Tooljetの中核には、アプリケーション開発プロセスを効率化するためのさまざまな機能を備えた多目的ツールキットがあります。その提供の中心には、直感的にコンポーネントを組み立て、複雑なレイアウトを設計できるシームレスなドラッグアンドドロップインターフェースがあります。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="特徴">特徴<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="特徴 への直接リンク" title="特徴 への直接リンク">​</a></h3>
<p>モダンなアプリケーション開発の要石であるデータベースモデリングは、Tooljetの武器庫で見つけることができます。ユーザーは簡単にデータ構造を形作り、アプリケーションを特定のユースケースとビジネスニーズに合わせることができます。プラットフォームのAPI統合への重点は、実現可能な範囲を広げ、アプリケーションが外部サービスとデータソースとシームレスに接続できるようにします。この統合の能力は、リアルワールドのシナリオにシームレスに対応した、ダイナミックでデータ豊かなアプリケーションへの扉を開きます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="オープンソース-1">オープンソース<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9-1" class="hash-link" aria-label="オープンソース への直接リンク" title="オープンソース への直接リンク">​</a></h3>
<p>Tooljetは明示的にオープンソースであるとはブランド化していませんが、注目すべき特徴があります。それはユーザーが生成したコードをエクスポートできる能力です。この特異な属性は、開発者に彼らの創造物を完全に所有する力を与え、アプリケーションを彼ら自身のサーバーでホストできるようにします。このアプローチは、低コード開発の効率性と、従来のコーディングプラクティスに通常関連付けられている自由と制御のバランスを取ることを結合しています。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="利点-1">利点<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E5%88%A9%E7%82%B9-1" class="hash-link" aria-label="利点 への直接リンク" title="利点 への直接リンク">​</a></h3>
<p>ユーザーからのフィードバックでは、Tooljetのユーザーフレンドリーなインターフェースが重要な利点として挙げられています。プラットフォームの直感的な性質は学習曲線を加速させ、技術的な知識が限られている人でもアプリケーションのビジョンを実現できるようにします。さらに、Tooljetは複雑なワークフローの作成を促進する能力を持つことから、ユーザーはアプリケーション内で複雑なアクションのシーケンスを編成でき、そのユーティリティを増幅させます。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="欠点-1">欠点<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E6%AC%A0%E7%82%B9-1" class="hash-link" aria-label="欠点 への直接リンク" title="欠点 への直接リンク">​</a></h3>
<p>しかし、どのツールにも制約がないわけではありません。Tooljetはさまざまな機能を備えてユーザーを支援しますが、一部のユーザーは高度なカスタマイズオプションを求めることがあるかもしれません。プラットフォームがユーザーフレンドリーで効率を重視しているため、高度な特殊な機能や複雑なデザインの微妙なニュアンスを求めるユーザーにとっては制約が生じることがあります。どんな技術でも、ユーザーは利用の容易さと特定のプロジェクト要件に基づいてカスタマイズの程度とのバランスを取る必要があります。</p>
<p>低コード開発の世界において、Tooljetは直感的なデザイン、データモデリングの能力、API統合の機能、そして柔軟な価格モデルの組み合わせを提供する強力な競争相手として登場します。コードのエクスポートと個人のサーバーでアプリケーションをホストするプラットフォームのユニークなアプローチは、低コードの利便性とコーディングの制御との間のギャップを埋め、アプリケーション開発の世界における創造性と革新の旅に参加することを歓迎します。個人がアプリケーション開発の風景を探求しているか、効率的なソリューションを探しているビジネスであっても、Tooljetはその機能豊かなツールキットを探索し、創造性と革新の</p>
<p>旅に乗り出すことを招待します。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="superblocksスーパーブロックス">SuperBlocks（スーパーブロックス）<a href="https://illacloud.com/ja/blog/best-low-code-platform#superblocks%E3%82%B9%E3%83%BC%E3%83%91%E3%83%BC%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%B9" class="hash-link" aria-label="SuperBlocks（スーパーブロックス） への直接リンク" title="SuperBlocks（スーパーブロックス） への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/superblocks.png" alt="SuperBlocks" class="img_CfaS"></p>
<p>SuperBlocksは、ビジネスが効率的で柔軟なソリューションを求める組織向けに堅牢でカスタマイズ可能な内部ツールを作成できる主要な低コード開発プラットフォームです。直感的なインターフェースと強力な機能を備えたSuperBlocksは、開発ニーズに対する効率的かつ柔軟なソリューションを提供します。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="superblocksの主要な特徴">SuperBlocksの主要な特徴<a href="https://illacloud.com/ja/blog/best-low-code-platform#superblocks%E3%81%AE%E4%B8%BB%E8%A6%81%E3%81%AA%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="SuperBlocksの主要な特徴 への直接リンク" title="SuperBlocksの主要な特徴 への直接リンク">​</a></h3>
<ul>
<li>ドラッグアンドドロップインターフェース：SuperBlocksはユーザーフレンドリーなドラッグアンドドロップインターフェースを提供し、ユーザーがコーディングの知識を必要とせずにビジュアルにアプリケーションを設計および構築できるようにします。この機能は開発プロセスを単純化し、非技術的なユーザーでも複雑な内部ツールを作成できるようにします。</li>
<li>広範なコンポーネントライブラリ：SuperBlocksは、プレビルトのコンポーネントとテンプレートを提供する広範なライブラリを提供し、これらを簡単にカスタマイズしてアプリケーションに統合できます。これにより、データの可視化、フォーム入力、ワークフロー自動化などの一般的な機能に対する既製のソリューションが提供され、ゼロからこれらの機能を構築する手間と労力が節約されます。</li>
<li>シームレスな統合：SuperBlocksはさまざまなサードパーティのサービスやAPIとシームレスに統合できるため、ユーザーは外部ツールやデータソースをアプリケーションに組み込むことができます。これにより、既存のシステムとの互換性が確保され、開発されたツールの機能性と柔軟性が向上します。</li>
<li>協力とバージョン管理：SuperBlocksには協力機能が含まれており、チームワークを促進し、開発プロセスを効率化します。複数のチームメンバーがプロジェクトに同時に取り組むことができ、協力、フィードバックの共有、変更の追跡が容易に行えます。さらに、バージョン管理の機能により、開発者は必要に応じてアプリケーションの以前のバージョンに戻すことができます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="superblocksの利点">SuperBlocksの利点<a href="https://illacloud.com/ja/blog/best-low-code-platform#superblocks%E3%81%AE%E5%88%A9%E7%82%B9" class="hash-link" aria-label="SuperBlocksの利点 への直接リンク" title="SuperBlocksの利点 への直接リンク">​</a></h3>
<ul>
<li>高速開発：直感的なインターフェースと広範なコンポーネントライブラリにより、SuperBlocksは開発プロセスを加速します。ビジュアルアプローチと既製のコンポーネントにより、手動のコーディングの必要性が減少し、内部ツールのプロトタイピングとデプロイメントが迅速に行えます。</li>
<li>カスタマイズ可能性：SuperBlocksはアプリケーションを特定の要件に合わせてカスタマイズできるようにします。プラットフォームはユーザーインターフェース、ワークフロー、データ統合のデザインに対する柔軟性を提供し、開発されたツールが組織の固有のニーズとブランディングガイドラインと一致することを保証します。</li>
<li>コスト効率：低コードのソリューションを提供することで、SuperBlocksは従来の開発リソースや高額なコーディングの依存を減少させます。これにより、組織は開発チームや専門知識が必要ない内部ツールを作成および維持できるため、大幅なコスト削減が実現します。</li>
<li>スケーラビリティ：SuperBlocksは成長するビジネスに並行してスケール設計されています。組織がシンプルな内部ツールまたは複雑なエンタープライズグレードのアプリケーションを作成する必要がある場合、SuperBlocksはスケーラビリティの要件に対応し、開発されたツールが増加するデータ量とユーザーデマンドに対応できることを確保します。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="retool">Retool<a href="https://illacloud.com/ja/blog/best-low-code-platform#retool" class="hash-link" aria-label="Retool への直接リンク" title="Retool への直接リンク">​</a></h2>
<p><img loading="lazy" src="https://cdn.illacloud.com/illa-website/blog/best-low-code-platform/retool.png" alt="retool" class="img_CfaS"></p>
<p>Retoolは、組織がスピードと効率を持って内部ツールを構築するのを支援する人気のある低コード開発プラットフォームです。直感的なインターフェースと強力な機能を備えたRetoolは、広範なコーディング知識を必要とせずに、ビジネスがカスタマイズされたアプリケーションを作成できるようにします。</p>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retoolの主な特徴">Retoolの主な特徴<a href="https://illacloud.com/ja/blog/best-low-code-platform#retool%E3%81%AE%E4%B8%BB%E3%81%AA%E7%89%B9%E5%BE%B4" class="hash-link" aria-label="Retoolの主な特徴 への直接リンク" title="Retoolの主な特徴 への直接リンク">​</a></h3>
<ul>
<li>ドラッグアンドドロップインターフェース：Retoolは、ユーザーがビジュアルにアプリケーションをデザインし組み立てることができるユーザーフレンドリーなドラッグアンドドロップインターフェースを提供しています。これにより、技術的でないユーザーも含め、ユーザーは迅速に機能的な内部ツールを構築できます。</li>
<li>幅広い統合機能：Retoolは、データベース、REST API、サードパーティのサービスなど、さまざまなデータソースとAPIとシームレスに統合できます。これにより、ユーザーはアプリケーション内で既存のデータとシステムを活用でき、ワークフローを合理化し機能を向上させることができます。</li>
<li>事前構築のコンポーネントとテンプレート：Retoolは、ユーザーが開発を加速するのに活用できる大規模なコンポーネントとテンプレートのライブラリを提供しています。これらのコンポーネントは、データテーブル、フォーム、グラフ、認証などの一般的な機能をカバーしており、これらの機能をゼロから構築する手間と時間を節約します。</li>
<li>リアルタイムの協力：Retoolは、チームメンバーがプロジェクトで同時に協力できるリアルタイムの協力機能を提供しています。これにより、協力が促進され、知識共有が容易になり、バージョン管理の問題とボトルネックが排除されることで、開発プロセスが合理化されます。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_dXVO" id="retoolの利点">Retoolの利点：<a href="https://illacloud.com/ja/blog/best-low-code-platform#retool%E3%81%AE%E5%88%A9%E7%82%B9" class="hash-link" aria-label="Retoolの利点： への直接リンク" title="Retoolの利点： への直接リンク">​</a></h3>
<ul>
<li>速さと効率：Retoolの直感的なインターフェースと事前構築のコンポーネントにより、内部ツールの市場投入までの時間が短縮されます。このプラットフォームはゼロから始める必要がなく、開発者は基本的な機能の構築ではなく、アプリケーションのカスタマイズと微調整に焦点を当てることができます。</li>
<li>カスタマイズ可能性：低コードのアプローチにもかかわらず、Retoolは広範なカスタマイズオプションを提供しています。ユーザーは、特定のビジネス要件とブランディングガイドラインに合わせて、アプリケーションの外観、動作、ワークフローを調整できます。</li>
<li>統合の柔軟性：Retoolの堅牢な統合機能により、さまざまなテックスタックを持つ組織に適しています。このプラットフォームはさまざまなデータソースとAPIとシームレスに接続でき、既存のシステムとの互換性を確保し、アプリケーション間のデータフローを円滑にすることができます。</li>
</ul>
<p>リストの最後になりますが、RetoolはCRUDアプリケーションとしても優れた選択肢です。これはドラッグアンドドロップのビルディングブロックプラットフォームです。外部データベースからデータを取得するためにJavaScriptをカスタマイズする必要があります。</p>
<h2 class="anchor anchorWithStickyNavbar_dXVO" id="結論">結論<a href="https://illacloud.com/ja/blog/best-low-code-platform#%E7%B5%90%E8%AB%96" class="hash-link" aria-label="結論 への直接リンク" title="結論 への直接リンク">​</a></h2>
<p>これらは2024年の最も有望な低コードツールです。それぞれが独自の特性を持っており、異なるシナリオには異なる問題解決アプローチが必要です。読者が適切な状況で開発に最も効率的なソリューションを選択できることを期待しています。低コードツールを使用して作業を高速化し、早く帰宅しましょう。</p>]]></content:encoded>
            <category>ローコード</category>
        </item>
    </channel>
</rss>